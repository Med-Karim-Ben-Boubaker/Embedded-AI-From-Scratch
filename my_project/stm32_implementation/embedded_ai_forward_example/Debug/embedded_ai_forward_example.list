
embedded_ai_forward_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08005e08  08005e08  00015e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006368  08006368  000206d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006370  08006370  000206d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006370  08006370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006374  08006374  00016374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08006378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000206d8  2**0
                  CONTENTS
 10 .bss          00000178  200006d8  200006d8  000206d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  000206d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000206d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020708  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003dd2  00000000  00000000  0002074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000010f8  00000000  00000000  0002451d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004b0  00000000  00000000  00025618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000346  00000000  00000000  00025ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020fe8  00000000  00000000  00025e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000693e  00000000  00000000  00046df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c206d  00000000  00000000  0004d734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000022d8  00000000  00000000  0010f7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ab  00000000  00000000  00111a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006d8 	.word	0x200006d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005df0 	.word	0x08005df0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006dc 	.word	0x200006dc
 80001cc:	08005df0 	.word	0x08005df0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f48:	b0bf      	sub	sp, #252	; 0xfc
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int layer0_neurons_num = 16;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  float layer0_outputs[layer0_neurons_num];
 8000f52:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 8000f56:	1e73      	subs	r3, r6, #1
 8000f58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000f5c:	4632      	mov	r2, r6
 8000f5e:	2300      	movs	r3, #0
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	014b      	lsls	r3, r1, #5
 8000f6e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f72:	0142      	lsls	r2, r0, #5
 8000f74:	4632      	mov	r2, r6
 8000f76:	2300      	movs	r3, #0
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	68f9      	ldr	r1, [r7, #12]
 8000f86:	014b      	lsls	r3, r1, #5
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	014a      	lsls	r2, r1, #5
 8000f92:	4633      	mov	r3, r6
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	3307      	adds	r3, #7
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	ebad 0d03 	sub.w	sp, sp, r3
 8000fa0:	466b      	mov	r3, sp
 8000fa2:	3303      	adds	r3, #3
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  dense_layer_t layer0 = {
 8000fac:	4b90      	ldr	r3, [pc, #576]	; (80011f0 <main+0x2ac>)
 8000fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000fb2:	4b90      	ldr	r3, [pc, #576]	; (80011f4 <main+0x2b0>)
 8000fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000fbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000fc6:	4b8c      	ldr	r3, [pc, #560]	; (80011f8 <main+0x2b4>)
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000fcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		  relu_activation,
		  layer0_outputs
  };

  // Define the second layer
  int layer1_neurons_num = 16;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  int layer1_input_size = 16;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  float layer1_outputs[layer1_neurons_num];
 8000fe0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000fe4:	1e4b      	subs	r3, r1, #1
 8000fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000fea:	460a      	mov	r2, r1
 8000fec:	2300      	movs	r3, #0
 8000fee:	603a      	str	r2, [r7, #0]
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	0143      	lsls	r3, r0, #5
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	0142      	lsls	r2, r0, #5
 8001008:	460a      	mov	r2, r1
 800100a:	2300      	movs	r3, #0
 800100c:	4692      	mov	sl, r2
 800100e:	469b      	mov	fp, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800101c:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001020:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001024:	460b      	mov	r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	3307      	adds	r3, #7
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	ebad 0d03 	sub.w	sp, sp, r3
 8001032:	466b      	mov	r3, sp
 8001034:	3303      	adds	r3, #3
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  dense_layer_t layer1 = {
 800103e:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <main+0x2b8>)
 8001040:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001044:	4b6e      	ldr	r3, [pc, #440]	; (8001200 <main+0x2bc>)
 8001046:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800104a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800104e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800105a:	4b67      	ldr	r3, [pc, #412]	; (80011f8 <main+0x2b4>)
 800105c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      relu_activation,        // Define the activation function ( keep the same architecture as the trained model )
      layer1_outputs
  };

  // Define the third layer
  int layer2_input_number = 16;
 8001068:	2310      	movs	r3, #16
 800106a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  int layer2_neurons_num = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  float layer2_outputs[layer2_neurons_num];
 8001074:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001078:	1e4b      	subs	r3, r1, #1
 800107a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800107e:	460a      	mov	r2, r1
 8001080:	2300      	movs	r3, #0
 8001082:	4690      	mov	r8, r2
 8001084:	4699      	mov	r9, r3
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001092:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001096:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800109a:	460a      	mov	r2, r1
 800109c:	2300      	movs	r3, #0
 800109e:	4614      	mov	r4, r2
 80010a0:	461d      	mov	r5, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	016b      	lsls	r3, r5, #5
 80010ac:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010b0:	0162      	lsls	r2, r4, #5
 80010b2:	460b      	mov	r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	3307      	adds	r3, #7
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	ebad 0d03 	sub.w	sp, sp, r3
 80010c0:	466b      	mov	r3, sp
 80010c2:	3303      	adds	r3, #3
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  dense_layer_t layer2 = {
 80010cc:	4b4d      	ldr	r3, [pc, #308]	; (8001204 <main+0x2c0>)
 80010ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010d0:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <main+0x2c4>)
 80010d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80010d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80010de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <main+0x2c8>)
 80010e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80010ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      linear_activation,      // Define the activation function ( keep the same architecture as the trained model )
      layer2_outputs
  };

  // define number of layers and the layers array
    int layers_num = 3;
 80010f4:	2303      	movs	r3, #3
 80010f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    dense_layer_t layers[3] = { layer0, layer1, layer2 };
 80010fa:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80010fe:	f107 05ac 	add.w	r5, r7, #172	; 0xac
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001106:	e895 0003 	ldmia.w	r5, {r0, r1}
 800110a:	e884 0003 	stmia.w	r4, {r0, r1}
 800110e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001112:	f107 0594 	add.w	r5, r7, #148	; 0x94
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800111e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001122:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001126:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001132:	e884 0003 	stmia.w	r4, {r0, r1}
    // Define the output array
    float output[OUTPUT_SIZE];

    // Define the model
    model_t model;
    model.init = model_init;
 8001136:	4b36      	ldr	r3, [pc, #216]	; (8001210 <main+0x2cc>)
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    model.init(&model, layers, layers_num);
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001140:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001144:	f107 0018 	add.w	r0, r7, #24
 8001148:	4798      	blx	r3
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114a:	f000 fa2d 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114e:	f000 f867 	bl	8001220 <SystemClock_Config>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  // Testing the sin wave model
#ifdef DEBUG_STATE
  for (int i = 0; i < 6; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001158:	e00e      	b.n	8001178 <main+0x234>
	  input[0] = 10;
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <main+0x2d0>)
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
	  model.predict(&model, input, output);
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001164:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001168:	f107 0018 	add.w	r0, r7, #24
 800116c:	4798      	blx	r3
  for (int i = 0; i < 6; i++) {
 800116e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001172:	3301      	adds	r3, #1
 8001174:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800117c:	2b05      	cmp	r3, #5
 800117e:	ddec      	ble.n	800115a <main+0x216>
  }
#endif
  /* USER CODE END 2 */
  float x = 0;
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  y_real = sin(x);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9dd 	bl	8000548 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	ec43 2b10 	vmov	d0, r2, r3
 8001196:	f003 fdb3 	bl	8004d00 <sin>
 800119a:	ec53 2b10 	vmov	r2, r3, d0
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fd01 	bl	8000ba8 <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <main+0x2d4>)
 80011aa:	6013      	str	r3, [r2, #0]
	  model.predict(&model, &x, &y_model);
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	f107 0114 	add.w	r1, r7, #20
 80011b2:	f107 0018 	add.w	r0, r7, #24
 80011b6:	4a19      	ldr	r2, [pc, #100]	; (800121c <main+0x2d8>)
 80011b8:	4798      	blx	r3
	  HAL_Delay(500);
 80011ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011be:	f000 fa65 	bl	800168c <HAL_Delay>

	  if ( x > 6 ){
 80011c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80011ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	dd03      	ble.n	80011dc <main+0x298>
		  x = 0;
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e7d4      	b.n	8001186 <main+0x242>
	  }
	  else {
		  x++;
 80011dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e8:	edc7 7a05 	vstr	s15, [r7, #20]
	  y_real = sin(x);
 80011ec:	e7cb      	b.n	8001186 <main+0x242>
 80011ee:	bf00      	nop
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	2000004c 	.word	0x2000004c
 80011f8:	080021ad 	.word	0x080021ad
 80011fc:	2000008c 	.word	0x2000008c
 8001200:	2000048c 	.word	0x2000048c
 8001204:	200004cc 	.word	0x200004cc
 8001208:	2000050c 	.word	0x2000050c
 800120c:	08002169 	.word	0x08002169
 8001210:	080022bd 	.word	0x080022bd
 8001214:	41200000 	.word	0x41200000
 8001218:	200006f8 	.word	0x200006f8
 800121c:	200006f4 	.word	0x200006f4

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fe13 	bl	8002e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <SystemClock_Config+0xcc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <SystemClock_Config+0xcc>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <SystemClock_Config+0xcc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <SystemClock_Config+0xd0>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <SystemClock_Config+0xd0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001294:	23a8      	movs	r3, #168	; 0xa8
 8001296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800129c:	2307      	movs	r3, #7
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fafb 	bl	80018a0 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b0:	f000 f820 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2105      	movs	r1, #5
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fd5c 	bl	8001d90 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012de:	f000 f809 	bl	80012f4 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	; 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133e:	2007      	movs	r0, #7
 8001340:	f000 fa7a 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f956 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_kill>:

int _kill(int pid, int sig)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013be:	f001 fd9f 	bl	8002f00 <__errno>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2216      	movs	r2, #22
 80013c6:	601a      	str	r2, [r3, #0]
  return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_exit>:

void _exit (int status)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ffe7 	bl	80013b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013e6:	e7fe      	b.n	80013e6 <_exit+0x12>

080013e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00a      	b.n	8001410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	4601      	mov	r1, r0
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf0      	blt.n	80013fa <_read+0x12>
  }

  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e009      	b.n	8001448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf1      	blt.n	8001434 <_write+0x12>
  }
  return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_close>:

int _close(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001482:	605a      	str	r2, [r3, #4]
  return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_isatty>:

int _isatty(int file)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f001 fd04 	bl	8002f00 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20020000 	.word	0x20020000
 8001524:	00000400 	.word	0x00000400
 8001528:	200006fc 	.word	0x200006fc
 800152c:	20000850 	.word	0x20000850

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157e:	f7ff ffd7 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f001 fcc3 	bl	8002f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fcdd 	bl	8000f44 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8001598:	08006378 	.word	0x08006378
  ldr r2, =_sbss
 800159c:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 80015a0:	20000850 	.word	0x20000850

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_Init+0x40>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_Init+0x40>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x40>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f931 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fe90 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f93b 	bl	8001886 <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 f911 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000000 	.word	0x20000000
 8001644:	20000008 	.word	0x20000008
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	20000700 	.word	0x20000700

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000700 	.word	0x20000700

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a4:	d005      	beq.n	80016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_Delay+0x44>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016b2:	bf00      	nop
 80016b4:	f7ff ffde 	bl	8001674 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8f7      	bhi.n	80016b4 <HAL_Delay+0x28>
  {
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff47 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff5c 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffb0 	bl	80017f4 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e267      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d075      	beq.n	80019aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d00c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b82      	ldr	r3, [pc, #520]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e2:	d10b      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	4b7e      	ldr	r3, [pc, #504]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d05b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x108>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d157      	bne.n	80019a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e242      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x74>
 8001906:	4b76      	ldr	r3, [pc, #472]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xb0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x98>
 800191e:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6f      	ldr	r2, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6d      	ldr	r3, [pc, #436]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6c      	ldr	r2, [pc, #432]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xb0>
 8001938:	4b69      	ldr	r3, [pc, #420]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a68      	ldr	r2, [pc, #416]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a65      	ldr	r2, [pc, #404]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fe8c 	bl	8001674 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fe88 	bl	8001674 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e207      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xc0>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fe78 	bl	8001674 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fe74 	bl	8001674 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1f3      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b51      	ldr	r3, [pc, #324]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0xe8>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b6:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b44      	ldr	r3, [pc, #272]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x152>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1c7      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4937      	ldr	r1, [pc, #220]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e03a      	b.n	8001a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff fe2d 	bl	8001674 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fe29 	bl	8001674 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1a8      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4925      	ldr	r1, [pc, #148]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fe0c 	bl	8001674 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fe08 	bl	8001674 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e187      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d036      	beq.n	8001af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d016      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_RCC_OscConfig+0x248>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff fdec 	bl	8001674 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fde8 	bl	8001674 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e167      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x200>
 8001abe:	e01b      	b.n	8001af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_OscConfig+0x248>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fdd5 	bl	8001674 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	e00e      	b.n	8001aec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff fdd1 	bl	8001674 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d907      	bls.n	8001aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e150      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	42470000 	.word	0x42470000
 8001ae8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b88      	ldr	r3, [pc, #544]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ea      	bne.n	8001ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8097 	beq.w	8001c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b81      	ldr	r3, [pc, #516]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b7d      	ldr	r3, [pc, #500]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a7c      	ldr	r2, [pc, #496]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b7a      	ldr	r3, [pc, #488]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b77      	ldr	r3, [pc, #476]	; (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b74      	ldr	r3, [pc, #464]	; (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a73      	ldr	r2, [pc, #460]	; (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fd91 	bl	8001674 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff fd8d 	bl	8001674 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e10c      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2ea>
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a63      	ldr	r2, [pc, #396]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	e01c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x324>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x30c>
 8001b92:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a5e      	ldr	r2, [pc, #376]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	4a5b      	ldr	r2, [pc, #364]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x324>
 8001bac:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a57      	ldr	r2, [pc, #348]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb8:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a54      	ldr	r2, [pc, #336]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d015      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fd52 	bl	8001674 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fd4e 	bl	8001674 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0cb      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ee      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x334>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fd3c 	bl	8001674 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7ff fd38 	bl	8001674 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0b5      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ee      	bne.n	8001c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4a38      	ldr	r2, [pc, #224]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a1 	beq.w	8001d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d05c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d141      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fd0c 	bl	8001674 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff fd08 	bl	8001674 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e087      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	491b      	ldr	r1, [pc, #108]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff fce1 	bl	8001674 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7ff fcdd 	bl	8001674 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e05c      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x416>
 8001cd4:	e054      	b.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fcca 	bl	8001674 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff fcc6 	bl	8001674 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e045      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x444>
 8001d02:	e03d      	b.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e038      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_RCC_OscConfig+0x4ec>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d028      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d121      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0cc      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b68      	ldr	r3, [pc, #416]	; (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d90c      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b65      	ldr	r3, [pc, #404]	; (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a58      	ldr	r2, [pc, #352]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d044      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d119      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e067      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4934      	ldr	r1, [pc, #208]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7ff fbf8 	bl	8001674 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff fbf4 	bl	8001674 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e04f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d20c      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fb58 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	08005e08 	.word	0x08005e08
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b094      	sub	sp, #80	; 0x50
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f74:	4b79      	ldr	r3, [pc, #484]	; (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x40>
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	f200 80e1 	bhi.w	8002148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x34>
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8e:	e0db      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f94:	e0db      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f9a:	e0d8      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	; (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fa4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	2200      	movs	r2, #0
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fce:	4622      	mov	r2, r4
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	0159      	lsls	r1, r3, #5
 8001fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe0:	0150      	lsls	r0, r2, #5
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	1a51      	subs	r1, r2, r1
 8001fea:	6139      	str	r1, [r7, #16]
 8001fec:	4629      	mov	r1, r5
 8001fee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002000:	4659      	mov	r1, fp
 8002002:	018b      	lsls	r3, r1, #6
 8002004:	4651      	mov	r1, sl
 8002006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200a:	4651      	mov	r1, sl
 800200c:	018a      	lsls	r2, r1, #6
 800200e:	4651      	mov	r1, sl
 8002010:	ebb2 0801 	subs.w	r8, r2, r1
 8002014:	4659      	mov	r1, fp
 8002016:	eb63 0901 	sbc.w	r9, r3, r1
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800202a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800202e:	4690      	mov	r8, r2
 8002030:	4699      	mov	r9, r3
 8002032:	4623      	mov	r3, r4
 8002034:	eb18 0303 	adds.w	r3, r8, r3
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	462b      	mov	r3, r5
 800203c:	eb49 0303 	adc.w	r3, r9, r3
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800204e:	4629      	mov	r1, r5
 8002050:	024b      	lsls	r3, r1, #9
 8002052:	4621      	mov	r1, r4
 8002054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002058:	4621      	mov	r1, r4
 800205a:	024a      	lsls	r2, r1, #9
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002062:	2200      	movs	r2, #0
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
 8002066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800206c:	f7fe fdec 	bl	8000c48 <__aeabi_uldivmod>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4613      	mov	r3, r2
 8002076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002078:	e058      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	2200      	movs	r2, #0
 8002082:	4618      	mov	r0, r3
 8002084:	4611      	mov	r1, r2
 8002086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800208a:	623b      	str	r3, [r7, #32]
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002094:	4642      	mov	r2, r8
 8002096:	464b      	mov	r3, r9
 8002098:	f04f 0000 	mov.w	r0, #0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	0159      	lsls	r1, r3, #5
 80020a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a6:	0150      	lsls	r0, r2, #5
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4641      	mov	r1, r8
 80020ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80020b2:	4649      	mov	r1, r9
 80020b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020cc:	ebb2 040a 	subs.w	r4, r2, sl
 80020d0:	eb63 050b 	sbc.w	r5, r3, fp
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	00eb      	lsls	r3, r5, #3
 80020de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020e2:	00e2      	lsls	r2, r4, #3
 80020e4:	4614      	mov	r4, r2
 80020e6:	461d      	mov	r5, r3
 80020e8:	4643      	mov	r3, r8
 80020ea:	18e3      	adds	r3, r4, r3
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	464b      	mov	r3, r9
 80020f0:	eb45 0303 	adc.w	r3, r5, r3
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002102:	4629      	mov	r1, r5
 8002104:	028b      	lsls	r3, r1, #10
 8002106:	4621      	mov	r1, r4
 8002108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800210c:	4621      	mov	r1, r4
 800210e:	028a      	lsls	r2, r1, #10
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002116:	2200      	movs	r2, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	61fa      	str	r2, [r7, #28]
 800211c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002120:	f7fe fd92 	bl	8000c48 <__aeabi_uldivmod>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4613      	mov	r3, r2
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800213c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800213e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetSysClockFreq+0x204>)
 800214a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002150:	4618      	mov	r0, r3
 8002152:	3750      	adds	r7, #80	; 0x50
 8002154:	46bd      	mov	sp, r7
 8002156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	00f42400 	.word	0x00f42400
 8002164:	007a1200 	.word	0x007a1200

08002168 <linear_activation>:
 *
 * @param input  Pointer to input data.
 * @param output Pointer to output data.
 * @param size   Number of elements in the input and output arrays.
 */
void linear_activation(float *input, float *output, size_t size) {
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++) {
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e00c      	b.n	8002194 <linear_activation+0x2c>
        output[i] = input[i];
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	441a      	add	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	440b      	add	r3, r1
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++) {
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d3ee      	bcc.n	800217a <linear_activation+0x12>
    }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <relu_activation>:
 *
 * @param input  Pointer to input data.
 * @param output Pointer to output data.
 * @param size   Number of elements in the input and output arrays.
 */
void relu_activation(float *input, float *output, size_t size) {
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++) {
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	e016      	b.n	80021ec <relu_activation+0x40>
        output[i] = fmaxf(0, input[i]);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	18d4      	adds	r4, r2, r3
 80021d2:	eef0 0a67 	vmov.f32	s1, s15
 80021d6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002200 <relu_activation+0x54>
 80021da:	f002 fde9 	bl	8004db0 <fmaxf>
 80021de:	eef0 7a40 	vmov.f32	s15, s0
 80021e2:	edc4 7a00 	vstr	s15, [r4]
    for (size_t i = 0; i < size; i++) {
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d3e4      	bcc.n	80021be <relu_activation+0x12>
    }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	00000000 	.word	0x00000000

08002204 <forward_pass>:
/**
 * @brief Perform a forward pass through a dense layer.
 *
 * @param p_forward_pass_args Pointer to the structure containing the arguments for the forward pass.
 */
void forward_pass(forward_pass_args_t *p_forward_pass_args) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    dense_layer_t *p_dense_layer = p_forward_pass_args->p_dense_layer;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
    printf("Forward Pass:\n");
    printf("  Input Size: %ld\n", p_dense_layer->input_size);
    printf("  Output Size: %ld\n", p_dense_layer->output_size);
#endif

    for (size_t i = 0; i < p_dense_layer->output_size; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e03f      	b.n	8002298 <forward_pass+0x94>
        p_dense_layer->p_outputs[i] = p_dense_layer->p_biases[i];
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	441a      	add	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6959      	ldr	r1, [r3, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	601a      	str	r2, [r3, #0]

#if DEBUG_LEVEL >= 2
        printf("  Neuron %ld: %f +", i, p_dense_layer->p_outputs[i]);
#endif

        for (size_t j = 0; j < p_dense_layer->input_size; j++) {
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e028      	b.n	8002288 <forward_pass+0x84>
            p_dense_layer->p_outputs[i] += p_forward_pass_args->p_inputs[j] * p_dense_layer->p_weights[i * p_dense_layer->input_size + j];
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	ed93 7a00 	vldr	s14, [r3]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	edd3 6a00 	vldr	s13, [r3]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	6979      	ldr	r1, [r7, #20]
 800225c:	fb03 f101 	mul.w	r1, r3, r1
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	440b      	add	r3, r1
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227e:	edc3 7a00 	vstr	s15, [r3]
        for (size_t j = 0; j < p_dense_layer->input_size; j++) {
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	3301      	adds	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	d3d1      	bcc.n	8002236 <forward_pass+0x32>
    for (size_t i = 0; i < p_dense_layer->output_size; i++) {
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3ba      	bcc.n	8002218 <forward_pass+0x14>
        printf("%f, ", p_dense_layer->p_outputs[i]);
    }
    printf("]\n");
#endif

    p_dense_layer->activation(p_dense_layer->p_outputs, p_dense_layer->p_outputs, p_dense_layer->output_size);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	6950      	ldr	r0, [r2, #20]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	6951      	ldr	r1, [r2, #20]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	4798      	blx	r3
    for (size_t i = 0; i < p_dense_layer->output_size; i++) {
        printf("%f, ", p_dense_layer->p_outputs[i]);
    }
    printf("]\n");
#endif
}
 80022b4:	bf00      	nop
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <model_init>:
 *
 * @param model      Pointer to the model structure.
 * @param p_layers   Pointer to the array of dense layers.
 * @param num_layers Number of layers in the model.
 */
void model_init(model_t *model, dense_layer_t *p_layers, size_t num_layers) {
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
    model->p_layers = p_layers;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	601a      	str	r2, [r3, #0]
    model->num_layers = num_layers;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	605a      	str	r2, [r3, #4]
    model->predict = model_predict;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <model_init+0x30>)
 80022d8:	609a      	str	r2, [r3, #8]
    model->init = model_init;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <model_init+0x34>)
 80022de:	60da      	str	r2, [r3, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	080022f5 	.word	0x080022f5
 80022f0:	080022bd 	.word	0x080022bd

080022f4 <model_predict>:
 *
 * @param model   Pointer to the model structure.
 * @param inputs  Pointer to the input data.
 * @param outputs Pointer to the output data.
 */
void model_predict(model_t *model, const float *inputs, float *outputs) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
#if DEBUG_LEVEL >= 1
    printf("\n---Entering model_predict function---\n");
#endif

    const float *current_input = inputs;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	627b      	str	r3, [r7, #36]	; 0x24

#if DEBUG_LEVEL >= 1
    printf("Looping for each layer: number of layers: %ld\n", model->num_layers);
#endif

    for (size_t l = 0; l < model->num_layers; l++) {
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	e032      	b.n	8002370 <model_predict+0x7c>

#if DEBUG_LEVEL >= 2
        printf("Creating forward pass arguments for layer %ld...\n", l);
#endif

        forward_pass_args_t args = {
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	617b      	str	r3, [r7, #20]
            .p_inputs = current_input,
            .p_dense_layer = &model->p_layers[l]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	6a3a      	ldr	r2, [r7, #32]
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
        forward_pass_args_t args = {
 800231e:	61bb      	str	r3, [r7, #24]
        };

        forward_pass(&args);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff6d 	bl	8002204 <forward_pass>
            printf("%f, ", args.p_dense_layer->p_outputs[i]);
        }
        printf("]\n");
#endif

        if (l == model->num_layers - 1) {
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	429a      	cmp	r2, r3
 8002334:	d116      	bne.n	8002364 <model_predict+0x70>
            // For the last layer, store the output in the `outputs` array
#if DEBUG_LEVEL >= 2
            printf("Storing output for the last layer...\n");
#endif
            for (size_t i = 0; i < args.p_dense_layer->output_size; i++) {
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e00d      	b.n	8002358 <model_predict+0x64>
                outputs[i] = args.p_dense_layer->p_outputs[i];
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	440b      	add	r3, r1
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	601a      	str	r2, [r3, #0]
            for (size_t i = 0; i < args.p_dense_layer->output_size; i++) {
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	429a      	cmp	r2, r3
 8002360:	d3ec      	bcc.n	800233c <model_predict+0x48>
 8002362:	e002      	b.n	800236a <model_predict+0x76>
        } else {
            // For intermediate layers, update the `current_input` for the next layer
#if DEBUG_LEVEL >= 2
            printf("Updating current_input for the next layer...\n");
#endif
            current_input = args.p_dense_layer->p_outputs;
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t l = 0; l < model->num_layers; l++) {
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	3301      	adds	r3, #1
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	429a      	cmp	r2, r3
 8002378:	d3c7      	bcc.n	800230a <model_predict+0x16>
    }

#if DEBUG_LEVEL >= 1
    printf("---Exiting model_predict function---\n");
#endif
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <__cvt>:
 8002384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002388:	ec55 4b10 	vmov	r4, r5, d0
 800238c:	2d00      	cmp	r5, #0
 800238e:	460e      	mov	r6, r1
 8002390:	4619      	mov	r1, r3
 8002392:	462b      	mov	r3, r5
 8002394:	bfbb      	ittet	lt
 8002396:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800239a:	461d      	movlt	r5, r3
 800239c:	2300      	movge	r3, #0
 800239e:	232d      	movlt	r3, #45	; 0x2d
 80023a0:	700b      	strb	r3, [r1, #0]
 80023a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80023a8:	4691      	mov	r9, r2
 80023aa:	f023 0820 	bic.w	r8, r3, #32
 80023ae:	bfbc      	itt	lt
 80023b0:	4622      	movlt	r2, r4
 80023b2:	4614      	movlt	r4, r2
 80023b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80023b8:	d005      	beq.n	80023c6 <__cvt+0x42>
 80023ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80023be:	d100      	bne.n	80023c2 <__cvt+0x3e>
 80023c0:	3601      	adds	r6, #1
 80023c2:	2102      	movs	r1, #2
 80023c4:	e000      	b.n	80023c8 <__cvt+0x44>
 80023c6:	2103      	movs	r1, #3
 80023c8:	ab03      	add	r3, sp, #12
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	ab02      	add	r3, sp, #8
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	ec45 4b10 	vmov	d0, r4, r5
 80023d4:	4653      	mov	r3, sl
 80023d6:	4632      	mov	r2, r6
 80023d8:	f000 fe4a 	bl	8003070 <_dtoa_r>
 80023dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80023e0:	4607      	mov	r7, r0
 80023e2:	d102      	bne.n	80023ea <__cvt+0x66>
 80023e4:	f019 0f01 	tst.w	r9, #1
 80023e8:	d022      	beq.n	8002430 <__cvt+0xac>
 80023ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80023ee:	eb07 0906 	add.w	r9, r7, r6
 80023f2:	d110      	bne.n	8002416 <__cvt+0x92>
 80023f4:	783b      	ldrb	r3, [r7, #0]
 80023f6:	2b30      	cmp	r3, #48	; 0x30
 80023f8:	d10a      	bne.n	8002410 <__cvt+0x8c>
 80023fa:	2200      	movs	r2, #0
 80023fc:	2300      	movs	r3, #0
 80023fe:	4620      	mov	r0, r4
 8002400:	4629      	mov	r1, r5
 8002402:	f7fe fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8002406:	b918      	cbnz	r0, 8002410 <__cvt+0x8c>
 8002408:	f1c6 0601 	rsb	r6, r6, #1
 800240c:	f8ca 6000 	str.w	r6, [sl]
 8002410:	f8da 3000 	ldr.w	r3, [sl]
 8002414:	4499      	add	r9, r3
 8002416:	2200      	movs	r2, #0
 8002418:	2300      	movs	r3, #0
 800241a:	4620      	mov	r0, r4
 800241c:	4629      	mov	r1, r5
 800241e:	f7fe fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 8002422:	b108      	cbz	r0, 8002428 <__cvt+0xa4>
 8002424:	f8cd 900c 	str.w	r9, [sp, #12]
 8002428:	2230      	movs	r2, #48	; 0x30
 800242a:	9b03      	ldr	r3, [sp, #12]
 800242c:	454b      	cmp	r3, r9
 800242e:	d307      	bcc.n	8002440 <__cvt+0xbc>
 8002430:	9b03      	ldr	r3, [sp, #12]
 8002432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002434:	1bdb      	subs	r3, r3, r7
 8002436:	4638      	mov	r0, r7
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	b004      	add	sp, #16
 800243c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002440:	1c59      	adds	r1, r3, #1
 8002442:	9103      	str	r1, [sp, #12]
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e7f0      	b.n	800242a <__cvt+0xa6>

08002448 <__exponent>:
 8002448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800244a:	4603      	mov	r3, r0
 800244c:	2900      	cmp	r1, #0
 800244e:	bfb8      	it	lt
 8002450:	4249      	neglt	r1, r1
 8002452:	f803 2b02 	strb.w	r2, [r3], #2
 8002456:	bfb4      	ite	lt
 8002458:	222d      	movlt	r2, #45	; 0x2d
 800245a:	222b      	movge	r2, #43	; 0x2b
 800245c:	2909      	cmp	r1, #9
 800245e:	7042      	strb	r2, [r0, #1]
 8002460:	dd2a      	ble.n	80024b8 <__exponent+0x70>
 8002462:	f10d 0207 	add.w	r2, sp, #7
 8002466:	4617      	mov	r7, r2
 8002468:	260a      	movs	r6, #10
 800246a:	4694      	mov	ip, r2
 800246c:	fb91 f5f6 	sdiv	r5, r1, r6
 8002470:	fb06 1415 	mls	r4, r6, r5, r1
 8002474:	3430      	adds	r4, #48	; 0x30
 8002476:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800247a:	460c      	mov	r4, r1
 800247c:	2c63      	cmp	r4, #99	; 0x63
 800247e:	f102 32ff 	add.w	r2, r2, #4294967295
 8002482:	4629      	mov	r1, r5
 8002484:	dcf1      	bgt.n	800246a <__exponent+0x22>
 8002486:	3130      	adds	r1, #48	; 0x30
 8002488:	f1ac 0402 	sub.w	r4, ip, #2
 800248c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002490:	1c41      	adds	r1, r0, #1
 8002492:	4622      	mov	r2, r4
 8002494:	42ba      	cmp	r2, r7
 8002496:	d30a      	bcc.n	80024ae <__exponent+0x66>
 8002498:	f10d 0209 	add.w	r2, sp, #9
 800249c:	eba2 020c 	sub.w	r2, r2, ip
 80024a0:	42bc      	cmp	r4, r7
 80024a2:	bf88      	it	hi
 80024a4:	2200      	movhi	r2, #0
 80024a6:	4413      	add	r3, r2
 80024a8:	1a18      	subs	r0, r3, r0
 80024aa:	b003      	add	sp, #12
 80024ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80024b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80024b6:	e7ed      	b.n	8002494 <__exponent+0x4c>
 80024b8:	2330      	movs	r3, #48	; 0x30
 80024ba:	3130      	adds	r1, #48	; 0x30
 80024bc:	7083      	strb	r3, [r0, #2]
 80024be:	70c1      	strb	r1, [r0, #3]
 80024c0:	1d03      	adds	r3, r0, #4
 80024c2:	e7f1      	b.n	80024a8 <__exponent+0x60>

080024c4 <_printf_float>:
 80024c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c8:	ed2d 8b02 	vpush	{d8}
 80024cc:	b08d      	sub	sp, #52	; 0x34
 80024ce:	460c      	mov	r4, r1
 80024d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80024d4:	4616      	mov	r6, r2
 80024d6:	461f      	mov	r7, r3
 80024d8:	4605      	mov	r5, r0
 80024da:	f000 fcc7 	bl	8002e6c <_localeconv_r>
 80024de:	f8d0 a000 	ldr.w	sl, [r0]
 80024e2:	4650      	mov	r0, sl
 80024e4:	f7fd fec4 	bl	8000270 <strlen>
 80024e8:	2300      	movs	r3, #0
 80024ea:	930a      	str	r3, [sp, #40]	; 0x28
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	9305      	str	r3, [sp, #20]
 80024f0:	f8d8 3000 	ldr.w	r3, [r8]
 80024f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80024f8:	3307      	adds	r3, #7
 80024fa:	f023 0307 	bic.w	r3, r3, #7
 80024fe:	f103 0208 	add.w	r2, r3, #8
 8002502:	f8c8 2000 	str.w	r2, [r8]
 8002506:	e9d3 8900 	ldrd	r8, r9, [r3]
 800250a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800250e:	9307      	str	r3, [sp, #28]
 8002510:	f8cd 8018 	str.w	r8, [sp, #24]
 8002514:	ee08 0a10 	vmov	s16, r0
 8002518:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800251c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002520:	4b9e      	ldr	r3, [pc, #632]	; (800279c <_printf_float+0x2d8>)
 8002522:	f04f 32ff 	mov.w	r2, #4294967295
 8002526:	f7fe fb01 	bl	8000b2c <__aeabi_dcmpun>
 800252a:	bb88      	cbnz	r0, 8002590 <_printf_float+0xcc>
 800252c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002530:	4b9a      	ldr	r3, [pc, #616]	; (800279c <_printf_float+0x2d8>)
 8002532:	f04f 32ff 	mov.w	r2, #4294967295
 8002536:	f7fe fadb 	bl	8000af0 <__aeabi_dcmple>
 800253a:	bb48      	cbnz	r0, 8002590 <_printf_float+0xcc>
 800253c:	2200      	movs	r2, #0
 800253e:	2300      	movs	r3, #0
 8002540:	4640      	mov	r0, r8
 8002542:	4649      	mov	r1, r9
 8002544:	f7fe faca 	bl	8000adc <__aeabi_dcmplt>
 8002548:	b110      	cbz	r0, 8002550 <_printf_float+0x8c>
 800254a:	232d      	movs	r3, #45	; 0x2d
 800254c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002550:	4a93      	ldr	r2, [pc, #588]	; (80027a0 <_printf_float+0x2dc>)
 8002552:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <_printf_float+0x2e0>)
 8002554:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002558:	bf94      	ite	ls
 800255a:	4690      	movls	r8, r2
 800255c:	4698      	movhi	r8, r3
 800255e:	2303      	movs	r3, #3
 8002560:	6123      	str	r3, [r4, #16]
 8002562:	9b05      	ldr	r3, [sp, #20]
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	6023      	str	r3, [r4, #0]
 800256a:	f04f 0900 	mov.w	r9, #0
 800256e:	9700      	str	r7, [sp, #0]
 8002570:	4633      	mov	r3, r6
 8002572:	aa0b      	add	r2, sp, #44	; 0x2c
 8002574:	4621      	mov	r1, r4
 8002576:	4628      	mov	r0, r5
 8002578:	f000 f9da 	bl	8002930 <_printf_common>
 800257c:	3001      	adds	r0, #1
 800257e:	f040 8090 	bne.w	80026a2 <_printf_float+0x1de>
 8002582:	f04f 30ff 	mov.w	r0, #4294967295
 8002586:	b00d      	add	sp, #52	; 0x34
 8002588:	ecbd 8b02 	vpop	{d8}
 800258c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002590:	4642      	mov	r2, r8
 8002592:	464b      	mov	r3, r9
 8002594:	4640      	mov	r0, r8
 8002596:	4649      	mov	r1, r9
 8002598:	f7fe fac8 	bl	8000b2c <__aeabi_dcmpun>
 800259c:	b140      	cbz	r0, 80025b0 <_printf_float+0xec>
 800259e:	464b      	mov	r3, r9
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bfbc      	itt	lt
 80025a4:	232d      	movlt	r3, #45	; 0x2d
 80025a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80025aa:	4a7f      	ldr	r2, [pc, #508]	; (80027a8 <_printf_float+0x2e4>)
 80025ac:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <_printf_float+0x2e8>)
 80025ae:	e7d1      	b.n	8002554 <_printf_float+0x90>
 80025b0:	6863      	ldr	r3, [r4, #4]
 80025b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80025b6:	9206      	str	r2, [sp, #24]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	d13f      	bne.n	800263c <_printf_float+0x178>
 80025bc:	2306      	movs	r3, #6
 80025be:	6063      	str	r3, [r4, #4]
 80025c0:	9b05      	ldr	r3, [sp, #20]
 80025c2:	6861      	ldr	r1, [r4, #4]
 80025c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80025c8:	2300      	movs	r3, #0
 80025ca:	9303      	str	r3, [sp, #12]
 80025cc:	ab0a      	add	r3, sp, #40	; 0x28
 80025ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80025d2:	ab09      	add	r3, sp, #36	; 0x24
 80025d4:	ec49 8b10 	vmov	d0, r8, r9
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	6022      	str	r2, [r4, #0]
 80025dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80025e0:	4628      	mov	r0, r5
 80025e2:	f7ff fecf 	bl	8002384 <__cvt>
 80025e6:	9b06      	ldr	r3, [sp, #24]
 80025e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80025ea:	2b47      	cmp	r3, #71	; 0x47
 80025ec:	4680      	mov	r8, r0
 80025ee:	d108      	bne.n	8002602 <_printf_float+0x13e>
 80025f0:	1cc8      	adds	r0, r1, #3
 80025f2:	db02      	blt.n	80025fa <_printf_float+0x136>
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	4299      	cmp	r1, r3
 80025f8:	dd41      	ble.n	800267e <_printf_float+0x1ba>
 80025fa:	f1ab 0302 	sub.w	r3, fp, #2
 80025fe:	fa5f fb83 	uxtb.w	fp, r3
 8002602:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002606:	d820      	bhi.n	800264a <_printf_float+0x186>
 8002608:	3901      	subs	r1, #1
 800260a:	465a      	mov	r2, fp
 800260c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002610:	9109      	str	r1, [sp, #36]	; 0x24
 8002612:	f7ff ff19 	bl	8002448 <__exponent>
 8002616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002618:	1813      	adds	r3, r2, r0
 800261a:	2a01      	cmp	r2, #1
 800261c:	4681      	mov	r9, r0
 800261e:	6123      	str	r3, [r4, #16]
 8002620:	dc02      	bgt.n	8002628 <_printf_float+0x164>
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	07d2      	lsls	r2, r2, #31
 8002626:	d501      	bpl.n	800262c <_printf_float+0x168>
 8002628:	3301      	adds	r3, #1
 800262a:	6123      	str	r3, [r4, #16]
 800262c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002630:	2b00      	cmp	r3, #0
 8002632:	d09c      	beq.n	800256e <_printf_float+0xaa>
 8002634:	232d      	movs	r3, #45	; 0x2d
 8002636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800263a:	e798      	b.n	800256e <_printf_float+0xaa>
 800263c:	9a06      	ldr	r2, [sp, #24]
 800263e:	2a47      	cmp	r2, #71	; 0x47
 8002640:	d1be      	bne.n	80025c0 <_printf_float+0xfc>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1bc      	bne.n	80025c0 <_printf_float+0xfc>
 8002646:	2301      	movs	r3, #1
 8002648:	e7b9      	b.n	80025be <_printf_float+0xfa>
 800264a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800264e:	d118      	bne.n	8002682 <_printf_float+0x1be>
 8002650:	2900      	cmp	r1, #0
 8002652:	6863      	ldr	r3, [r4, #4]
 8002654:	dd0b      	ble.n	800266e <_printf_float+0x1aa>
 8002656:	6121      	str	r1, [r4, #16]
 8002658:	b913      	cbnz	r3, 8002660 <_printf_float+0x19c>
 800265a:	6822      	ldr	r2, [r4, #0]
 800265c:	07d0      	lsls	r0, r2, #31
 800265e:	d502      	bpl.n	8002666 <_printf_float+0x1a2>
 8002660:	3301      	adds	r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	6123      	str	r3, [r4, #16]
 8002666:	65a1      	str	r1, [r4, #88]	; 0x58
 8002668:	f04f 0900 	mov.w	r9, #0
 800266c:	e7de      	b.n	800262c <_printf_float+0x168>
 800266e:	b913      	cbnz	r3, 8002676 <_printf_float+0x1b2>
 8002670:	6822      	ldr	r2, [r4, #0]
 8002672:	07d2      	lsls	r2, r2, #31
 8002674:	d501      	bpl.n	800267a <_printf_float+0x1b6>
 8002676:	3302      	adds	r3, #2
 8002678:	e7f4      	b.n	8002664 <_printf_float+0x1a0>
 800267a:	2301      	movs	r3, #1
 800267c:	e7f2      	b.n	8002664 <_printf_float+0x1a0>
 800267e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002684:	4299      	cmp	r1, r3
 8002686:	db05      	blt.n	8002694 <_printf_float+0x1d0>
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	6121      	str	r1, [r4, #16]
 800268c:	07d8      	lsls	r0, r3, #31
 800268e:	d5ea      	bpl.n	8002666 <_printf_float+0x1a2>
 8002690:	1c4b      	adds	r3, r1, #1
 8002692:	e7e7      	b.n	8002664 <_printf_float+0x1a0>
 8002694:	2900      	cmp	r1, #0
 8002696:	bfd4      	ite	le
 8002698:	f1c1 0202 	rsble	r2, r1, #2
 800269c:	2201      	movgt	r2, #1
 800269e:	4413      	add	r3, r2
 80026a0:	e7e0      	b.n	8002664 <_printf_float+0x1a0>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	055a      	lsls	r2, r3, #21
 80026a6:	d407      	bmi.n	80026b8 <_printf_float+0x1f4>
 80026a8:	6923      	ldr	r3, [r4, #16]
 80026aa:	4642      	mov	r2, r8
 80026ac:	4631      	mov	r1, r6
 80026ae:	4628      	mov	r0, r5
 80026b0:	47b8      	blx	r7
 80026b2:	3001      	adds	r0, #1
 80026b4:	d12c      	bne.n	8002710 <_printf_float+0x24c>
 80026b6:	e764      	b.n	8002582 <_printf_float+0xbe>
 80026b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80026bc:	f240 80e0 	bls.w	8002880 <_printf_float+0x3bc>
 80026c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026c4:	2200      	movs	r2, #0
 80026c6:	2300      	movs	r3, #0
 80026c8:	f7fe f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80026cc:	2800      	cmp	r0, #0
 80026ce:	d034      	beq.n	800273a <_printf_float+0x276>
 80026d0:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <_printf_float+0x2ec>)
 80026d2:	2301      	movs	r3, #1
 80026d4:	4631      	mov	r1, r6
 80026d6:	4628      	mov	r0, r5
 80026d8:	47b8      	blx	r7
 80026da:	3001      	adds	r0, #1
 80026dc:	f43f af51 	beq.w	8002582 <_printf_float+0xbe>
 80026e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026e4:	429a      	cmp	r2, r3
 80026e6:	db02      	blt.n	80026ee <_printf_float+0x22a>
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	07d8      	lsls	r0, r3, #31
 80026ec:	d510      	bpl.n	8002710 <_printf_float+0x24c>
 80026ee:	ee18 3a10 	vmov	r3, s16
 80026f2:	4652      	mov	r2, sl
 80026f4:	4631      	mov	r1, r6
 80026f6:	4628      	mov	r0, r5
 80026f8:	47b8      	blx	r7
 80026fa:	3001      	adds	r0, #1
 80026fc:	f43f af41 	beq.w	8002582 <_printf_float+0xbe>
 8002700:	f04f 0800 	mov.w	r8, #0
 8002704:	f104 091a 	add.w	r9, r4, #26
 8002708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	4543      	cmp	r3, r8
 800270e:	dc09      	bgt.n	8002724 <_printf_float+0x260>
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	079b      	lsls	r3, r3, #30
 8002714:	f100 8107 	bmi.w	8002926 <_printf_float+0x462>
 8002718:	68e0      	ldr	r0, [r4, #12]
 800271a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800271c:	4298      	cmp	r0, r3
 800271e:	bfb8      	it	lt
 8002720:	4618      	movlt	r0, r3
 8002722:	e730      	b.n	8002586 <_printf_float+0xc2>
 8002724:	2301      	movs	r3, #1
 8002726:	464a      	mov	r2, r9
 8002728:	4631      	mov	r1, r6
 800272a:	4628      	mov	r0, r5
 800272c:	47b8      	blx	r7
 800272e:	3001      	adds	r0, #1
 8002730:	f43f af27 	beq.w	8002582 <_printf_float+0xbe>
 8002734:	f108 0801 	add.w	r8, r8, #1
 8002738:	e7e6      	b.n	8002708 <_printf_float+0x244>
 800273a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	dc39      	bgt.n	80027b4 <_printf_float+0x2f0>
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <_printf_float+0x2ec>)
 8002742:	2301      	movs	r3, #1
 8002744:	4631      	mov	r1, r6
 8002746:	4628      	mov	r0, r5
 8002748:	47b8      	blx	r7
 800274a:	3001      	adds	r0, #1
 800274c:	f43f af19 	beq.w	8002582 <_printf_float+0xbe>
 8002750:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002754:	4313      	orrs	r3, r2
 8002756:	d102      	bne.n	800275e <_printf_float+0x29a>
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	07d9      	lsls	r1, r3, #31
 800275c:	d5d8      	bpl.n	8002710 <_printf_float+0x24c>
 800275e:	ee18 3a10 	vmov	r3, s16
 8002762:	4652      	mov	r2, sl
 8002764:	4631      	mov	r1, r6
 8002766:	4628      	mov	r0, r5
 8002768:	47b8      	blx	r7
 800276a:	3001      	adds	r0, #1
 800276c:	f43f af09 	beq.w	8002582 <_printf_float+0xbe>
 8002770:	f04f 0900 	mov.w	r9, #0
 8002774:	f104 0a1a 	add.w	sl, r4, #26
 8002778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800277a:	425b      	negs	r3, r3
 800277c:	454b      	cmp	r3, r9
 800277e:	dc01      	bgt.n	8002784 <_printf_float+0x2c0>
 8002780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002782:	e792      	b.n	80026aa <_printf_float+0x1e6>
 8002784:	2301      	movs	r3, #1
 8002786:	4652      	mov	r2, sl
 8002788:	4631      	mov	r1, r6
 800278a:	4628      	mov	r0, r5
 800278c:	47b8      	blx	r7
 800278e:	3001      	adds	r0, #1
 8002790:	f43f aef7 	beq.w	8002582 <_printf_float+0xbe>
 8002794:	f109 0901 	add.w	r9, r9, #1
 8002798:	e7ee      	b.n	8002778 <_printf_float+0x2b4>
 800279a:	bf00      	nop
 800279c:	7fefffff 	.word	0x7fefffff
 80027a0:	08005e18 	.word	0x08005e18
 80027a4:	08005e1c 	.word	0x08005e1c
 80027a8:	08005e20 	.word	0x08005e20
 80027ac:	08005e24 	.word	0x08005e24
 80027b0:	08005e28 	.word	0x08005e28
 80027b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027b8:	429a      	cmp	r2, r3
 80027ba:	bfa8      	it	ge
 80027bc:	461a      	movge	r2, r3
 80027be:	2a00      	cmp	r2, #0
 80027c0:	4691      	mov	r9, r2
 80027c2:	dc37      	bgt.n	8002834 <_printf_float+0x370>
 80027c4:	f04f 0b00 	mov.w	fp, #0
 80027c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027cc:	f104 021a 	add.w	r2, r4, #26
 80027d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027d2:	9305      	str	r3, [sp, #20]
 80027d4:	eba3 0309 	sub.w	r3, r3, r9
 80027d8:	455b      	cmp	r3, fp
 80027da:	dc33      	bgt.n	8002844 <_printf_float+0x380>
 80027dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027e0:	429a      	cmp	r2, r3
 80027e2:	db3b      	blt.n	800285c <_printf_float+0x398>
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	07da      	lsls	r2, r3, #31
 80027e8:	d438      	bmi.n	800285c <_printf_float+0x398>
 80027ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80027ee:	eba2 0903 	sub.w	r9, r2, r3
 80027f2:	9b05      	ldr	r3, [sp, #20]
 80027f4:	1ad2      	subs	r2, r2, r3
 80027f6:	4591      	cmp	r9, r2
 80027f8:	bfa8      	it	ge
 80027fa:	4691      	movge	r9, r2
 80027fc:	f1b9 0f00 	cmp.w	r9, #0
 8002800:	dc35      	bgt.n	800286e <_printf_float+0x3aa>
 8002802:	f04f 0800 	mov.w	r8, #0
 8002806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800280a:	f104 0a1a 	add.w	sl, r4, #26
 800280e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	eba3 0309 	sub.w	r3, r3, r9
 8002818:	4543      	cmp	r3, r8
 800281a:	f77f af79 	ble.w	8002710 <_printf_float+0x24c>
 800281e:	2301      	movs	r3, #1
 8002820:	4652      	mov	r2, sl
 8002822:	4631      	mov	r1, r6
 8002824:	4628      	mov	r0, r5
 8002826:	47b8      	blx	r7
 8002828:	3001      	adds	r0, #1
 800282a:	f43f aeaa 	beq.w	8002582 <_printf_float+0xbe>
 800282e:	f108 0801 	add.w	r8, r8, #1
 8002832:	e7ec      	b.n	800280e <_printf_float+0x34a>
 8002834:	4613      	mov	r3, r2
 8002836:	4631      	mov	r1, r6
 8002838:	4642      	mov	r2, r8
 800283a:	4628      	mov	r0, r5
 800283c:	47b8      	blx	r7
 800283e:	3001      	adds	r0, #1
 8002840:	d1c0      	bne.n	80027c4 <_printf_float+0x300>
 8002842:	e69e      	b.n	8002582 <_printf_float+0xbe>
 8002844:	2301      	movs	r3, #1
 8002846:	4631      	mov	r1, r6
 8002848:	4628      	mov	r0, r5
 800284a:	9205      	str	r2, [sp, #20]
 800284c:	47b8      	blx	r7
 800284e:	3001      	adds	r0, #1
 8002850:	f43f ae97 	beq.w	8002582 <_printf_float+0xbe>
 8002854:	9a05      	ldr	r2, [sp, #20]
 8002856:	f10b 0b01 	add.w	fp, fp, #1
 800285a:	e7b9      	b.n	80027d0 <_printf_float+0x30c>
 800285c:	ee18 3a10 	vmov	r3, s16
 8002860:	4652      	mov	r2, sl
 8002862:	4631      	mov	r1, r6
 8002864:	4628      	mov	r0, r5
 8002866:	47b8      	blx	r7
 8002868:	3001      	adds	r0, #1
 800286a:	d1be      	bne.n	80027ea <_printf_float+0x326>
 800286c:	e689      	b.n	8002582 <_printf_float+0xbe>
 800286e:	9a05      	ldr	r2, [sp, #20]
 8002870:	464b      	mov	r3, r9
 8002872:	4442      	add	r2, r8
 8002874:	4631      	mov	r1, r6
 8002876:	4628      	mov	r0, r5
 8002878:	47b8      	blx	r7
 800287a:	3001      	adds	r0, #1
 800287c:	d1c1      	bne.n	8002802 <_printf_float+0x33e>
 800287e:	e680      	b.n	8002582 <_printf_float+0xbe>
 8002880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002882:	2a01      	cmp	r2, #1
 8002884:	dc01      	bgt.n	800288a <_printf_float+0x3c6>
 8002886:	07db      	lsls	r3, r3, #31
 8002888:	d53a      	bpl.n	8002900 <_printf_float+0x43c>
 800288a:	2301      	movs	r3, #1
 800288c:	4642      	mov	r2, r8
 800288e:	4631      	mov	r1, r6
 8002890:	4628      	mov	r0, r5
 8002892:	47b8      	blx	r7
 8002894:	3001      	adds	r0, #1
 8002896:	f43f ae74 	beq.w	8002582 <_printf_float+0xbe>
 800289a:	ee18 3a10 	vmov	r3, s16
 800289e:	4652      	mov	r2, sl
 80028a0:	4631      	mov	r1, r6
 80028a2:	4628      	mov	r0, r5
 80028a4:	47b8      	blx	r7
 80028a6:	3001      	adds	r0, #1
 80028a8:	f43f ae6b 	beq.w	8002582 <_printf_float+0xbe>
 80028ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028b0:	2200      	movs	r2, #0
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80028b8:	f7fe f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80028bc:	b9d8      	cbnz	r0, 80028f6 <_printf_float+0x432>
 80028be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80028c2:	f108 0201 	add.w	r2, r8, #1
 80028c6:	4631      	mov	r1, r6
 80028c8:	4628      	mov	r0, r5
 80028ca:	47b8      	blx	r7
 80028cc:	3001      	adds	r0, #1
 80028ce:	d10e      	bne.n	80028ee <_printf_float+0x42a>
 80028d0:	e657      	b.n	8002582 <_printf_float+0xbe>
 80028d2:	2301      	movs	r3, #1
 80028d4:	4652      	mov	r2, sl
 80028d6:	4631      	mov	r1, r6
 80028d8:	4628      	mov	r0, r5
 80028da:	47b8      	blx	r7
 80028dc:	3001      	adds	r0, #1
 80028de:	f43f ae50 	beq.w	8002582 <_printf_float+0xbe>
 80028e2:	f108 0801 	add.w	r8, r8, #1
 80028e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	4543      	cmp	r3, r8
 80028ec:	dcf1      	bgt.n	80028d2 <_printf_float+0x40e>
 80028ee:	464b      	mov	r3, r9
 80028f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028f4:	e6da      	b.n	80026ac <_printf_float+0x1e8>
 80028f6:	f04f 0800 	mov.w	r8, #0
 80028fa:	f104 0a1a 	add.w	sl, r4, #26
 80028fe:	e7f2      	b.n	80028e6 <_printf_float+0x422>
 8002900:	2301      	movs	r3, #1
 8002902:	4642      	mov	r2, r8
 8002904:	e7df      	b.n	80028c6 <_printf_float+0x402>
 8002906:	2301      	movs	r3, #1
 8002908:	464a      	mov	r2, r9
 800290a:	4631      	mov	r1, r6
 800290c:	4628      	mov	r0, r5
 800290e:	47b8      	blx	r7
 8002910:	3001      	adds	r0, #1
 8002912:	f43f ae36 	beq.w	8002582 <_printf_float+0xbe>
 8002916:	f108 0801 	add.w	r8, r8, #1
 800291a:	68e3      	ldr	r3, [r4, #12]
 800291c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800291e:	1a5b      	subs	r3, r3, r1
 8002920:	4543      	cmp	r3, r8
 8002922:	dcf0      	bgt.n	8002906 <_printf_float+0x442>
 8002924:	e6f8      	b.n	8002718 <_printf_float+0x254>
 8002926:	f04f 0800 	mov.w	r8, #0
 800292a:	f104 0919 	add.w	r9, r4, #25
 800292e:	e7f4      	b.n	800291a <_printf_float+0x456>

08002930 <_printf_common>:
 8002930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002934:	4616      	mov	r6, r2
 8002936:	4699      	mov	r9, r3
 8002938:	688a      	ldr	r2, [r1, #8]
 800293a:	690b      	ldr	r3, [r1, #16]
 800293c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002940:	4293      	cmp	r3, r2
 8002942:	bfb8      	it	lt
 8002944:	4613      	movlt	r3, r2
 8002946:	6033      	str	r3, [r6, #0]
 8002948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800294c:	4607      	mov	r7, r0
 800294e:	460c      	mov	r4, r1
 8002950:	b10a      	cbz	r2, 8002956 <_printf_common+0x26>
 8002952:	3301      	adds	r3, #1
 8002954:	6033      	str	r3, [r6, #0]
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	0699      	lsls	r1, r3, #26
 800295a:	bf42      	ittt	mi
 800295c:	6833      	ldrmi	r3, [r6, #0]
 800295e:	3302      	addmi	r3, #2
 8002960:	6033      	strmi	r3, [r6, #0]
 8002962:	6825      	ldr	r5, [r4, #0]
 8002964:	f015 0506 	ands.w	r5, r5, #6
 8002968:	d106      	bne.n	8002978 <_printf_common+0x48>
 800296a:	f104 0a19 	add.w	sl, r4, #25
 800296e:	68e3      	ldr	r3, [r4, #12]
 8002970:	6832      	ldr	r2, [r6, #0]
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	42ab      	cmp	r3, r5
 8002976:	dc26      	bgt.n	80029c6 <_printf_common+0x96>
 8002978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800297c:	1e13      	subs	r3, r2, #0
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	bf18      	it	ne
 8002982:	2301      	movne	r3, #1
 8002984:	0692      	lsls	r2, r2, #26
 8002986:	d42b      	bmi.n	80029e0 <_printf_common+0xb0>
 8002988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800298c:	4649      	mov	r1, r9
 800298e:	4638      	mov	r0, r7
 8002990:	47c0      	blx	r8
 8002992:	3001      	adds	r0, #1
 8002994:	d01e      	beq.n	80029d4 <_printf_common+0xa4>
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	6922      	ldr	r2, [r4, #16]
 800299a:	f003 0306 	and.w	r3, r3, #6
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf02      	ittt	eq
 80029a2:	68e5      	ldreq	r5, [r4, #12]
 80029a4:	6833      	ldreq	r3, [r6, #0]
 80029a6:	1aed      	subeq	r5, r5, r3
 80029a8:	68a3      	ldr	r3, [r4, #8]
 80029aa:	bf0c      	ite	eq
 80029ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029b0:	2500      	movne	r5, #0
 80029b2:	4293      	cmp	r3, r2
 80029b4:	bfc4      	itt	gt
 80029b6:	1a9b      	subgt	r3, r3, r2
 80029b8:	18ed      	addgt	r5, r5, r3
 80029ba:	2600      	movs	r6, #0
 80029bc:	341a      	adds	r4, #26
 80029be:	42b5      	cmp	r5, r6
 80029c0:	d11a      	bne.n	80029f8 <_printf_common+0xc8>
 80029c2:	2000      	movs	r0, #0
 80029c4:	e008      	b.n	80029d8 <_printf_common+0xa8>
 80029c6:	2301      	movs	r3, #1
 80029c8:	4652      	mov	r2, sl
 80029ca:	4649      	mov	r1, r9
 80029cc:	4638      	mov	r0, r7
 80029ce:	47c0      	blx	r8
 80029d0:	3001      	adds	r0, #1
 80029d2:	d103      	bne.n	80029dc <_printf_common+0xac>
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029dc:	3501      	adds	r5, #1
 80029de:	e7c6      	b.n	800296e <_printf_common+0x3e>
 80029e0:	18e1      	adds	r1, r4, r3
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	2030      	movs	r0, #48	; 0x30
 80029e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029ea:	4422      	add	r2, r4
 80029ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029f4:	3302      	adds	r3, #2
 80029f6:	e7c7      	b.n	8002988 <_printf_common+0x58>
 80029f8:	2301      	movs	r3, #1
 80029fa:	4622      	mov	r2, r4
 80029fc:	4649      	mov	r1, r9
 80029fe:	4638      	mov	r0, r7
 8002a00:	47c0      	blx	r8
 8002a02:	3001      	adds	r0, #1
 8002a04:	d0e6      	beq.n	80029d4 <_printf_common+0xa4>
 8002a06:	3601      	adds	r6, #1
 8002a08:	e7d9      	b.n	80029be <_printf_common+0x8e>
	...

08002a0c <_printf_i>:
 8002a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a10:	7e0f      	ldrb	r7, [r1, #24]
 8002a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a14:	2f78      	cmp	r7, #120	; 0x78
 8002a16:	4691      	mov	r9, r2
 8002a18:	4680      	mov	r8, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	469a      	mov	sl, r3
 8002a1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a22:	d807      	bhi.n	8002a34 <_printf_i+0x28>
 8002a24:	2f62      	cmp	r7, #98	; 0x62
 8002a26:	d80a      	bhi.n	8002a3e <_printf_i+0x32>
 8002a28:	2f00      	cmp	r7, #0
 8002a2a:	f000 80d4 	beq.w	8002bd6 <_printf_i+0x1ca>
 8002a2e:	2f58      	cmp	r7, #88	; 0x58
 8002a30:	f000 80c0 	beq.w	8002bb4 <_printf_i+0x1a8>
 8002a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a3c:	e03a      	b.n	8002ab4 <_printf_i+0xa8>
 8002a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a42:	2b15      	cmp	r3, #21
 8002a44:	d8f6      	bhi.n	8002a34 <_printf_i+0x28>
 8002a46:	a101      	add	r1, pc, #4	; (adr r1, 8002a4c <_printf_i+0x40>)
 8002a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a4c:	08002aa5 	.word	0x08002aa5
 8002a50:	08002ab9 	.word	0x08002ab9
 8002a54:	08002a35 	.word	0x08002a35
 8002a58:	08002a35 	.word	0x08002a35
 8002a5c:	08002a35 	.word	0x08002a35
 8002a60:	08002a35 	.word	0x08002a35
 8002a64:	08002ab9 	.word	0x08002ab9
 8002a68:	08002a35 	.word	0x08002a35
 8002a6c:	08002a35 	.word	0x08002a35
 8002a70:	08002a35 	.word	0x08002a35
 8002a74:	08002a35 	.word	0x08002a35
 8002a78:	08002bbd 	.word	0x08002bbd
 8002a7c:	08002ae5 	.word	0x08002ae5
 8002a80:	08002b77 	.word	0x08002b77
 8002a84:	08002a35 	.word	0x08002a35
 8002a88:	08002a35 	.word	0x08002a35
 8002a8c:	08002bdf 	.word	0x08002bdf
 8002a90:	08002a35 	.word	0x08002a35
 8002a94:	08002ae5 	.word	0x08002ae5
 8002a98:	08002a35 	.word	0x08002a35
 8002a9c:	08002a35 	.word	0x08002a35
 8002aa0:	08002b7f 	.word	0x08002b7f
 8002aa4:	682b      	ldr	r3, [r5, #0]
 8002aa6:	1d1a      	adds	r2, r3, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	602a      	str	r2, [r5, #0]
 8002aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e09f      	b.n	8002bf8 <_printf_i+0x1ec>
 8002ab8:	6820      	ldr	r0, [r4, #0]
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	0607      	lsls	r7, r0, #24
 8002abe:	f103 0104 	add.w	r1, r3, #4
 8002ac2:	6029      	str	r1, [r5, #0]
 8002ac4:	d501      	bpl.n	8002aca <_printf_i+0xbe>
 8002ac6:	681e      	ldr	r6, [r3, #0]
 8002ac8:	e003      	b.n	8002ad2 <_printf_i+0xc6>
 8002aca:	0646      	lsls	r6, r0, #25
 8002acc:	d5fb      	bpl.n	8002ac6 <_printf_i+0xba>
 8002ace:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002ad2:	2e00      	cmp	r6, #0
 8002ad4:	da03      	bge.n	8002ade <_printf_i+0xd2>
 8002ad6:	232d      	movs	r3, #45	; 0x2d
 8002ad8:	4276      	negs	r6, r6
 8002ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ade:	485a      	ldr	r0, [pc, #360]	; (8002c48 <_printf_i+0x23c>)
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	e012      	b.n	8002b0a <_printf_i+0xfe>
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	1d19      	adds	r1, r3, #4
 8002aea:	6029      	str	r1, [r5, #0]
 8002aec:	0605      	lsls	r5, r0, #24
 8002aee:	d501      	bpl.n	8002af4 <_printf_i+0xe8>
 8002af0:	681e      	ldr	r6, [r3, #0]
 8002af2:	e002      	b.n	8002afa <_printf_i+0xee>
 8002af4:	0641      	lsls	r1, r0, #25
 8002af6:	d5fb      	bpl.n	8002af0 <_printf_i+0xe4>
 8002af8:	881e      	ldrh	r6, [r3, #0]
 8002afa:	4853      	ldr	r0, [pc, #332]	; (8002c48 <_printf_i+0x23c>)
 8002afc:	2f6f      	cmp	r7, #111	; 0x6f
 8002afe:	bf0c      	ite	eq
 8002b00:	2308      	moveq	r3, #8
 8002b02:	230a      	movne	r3, #10
 8002b04:	2100      	movs	r1, #0
 8002b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b0a:	6865      	ldr	r5, [r4, #4]
 8002b0c:	60a5      	str	r5, [r4, #8]
 8002b0e:	2d00      	cmp	r5, #0
 8002b10:	bfa2      	ittt	ge
 8002b12:	6821      	ldrge	r1, [r4, #0]
 8002b14:	f021 0104 	bicge.w	r1, r1, #4
 8002b18:	6021      	strge	r1, [r4, #0]
 8002b1a:	b90e      	cbnz	r6, 8002b20 <_printf_i+0x114>
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	d04b      	beq.n	8002bb8 <_printf_i+0x1ac>
 8002b20:	4615      	mov	r5, r2
 8002b22:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b26:	fb03 6711 	mls	r7, r3, r1, r6
 8002b2a:	5dc7      	ldrb	r7, [r0, r7]
 8002b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b30:	4637      	mov	r7, r6
 8002b32:	42bb      	cmp	r3, r7
 8002b34:	460e      	mov	r6, r1
 8002b36:	d9f4      	bls.n	8002b22 <_printf_i+0x116>
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d10b      	bne.n	8002b54 <_printf_i+0x148>
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	07de      	lsls	r6, r3, #31
 8002b40:	d508      	bpl.n	8002b54 <_printf_i+0x148>
 8002b42:	6923      	ldr	r3, [r4, #16]
 8002b44:	6861      	ldr	r1, [r4, #4]
 8002b46:	4299      	cmp	r1, r3
 8002b48:	bfde      	ittt	le
 8002b4a:	2330      	movle	r3, #48	; 0x30
 8002b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b54:	1b52      	subs	r2, r2, r5
 8002b56:	6122      	str	r2, [r4, #16]
 8002b58:	f8cd a000 	str.w	sl, [sp]
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	aa03      	add	r2, sp, #12
 8002b60:	4621      	mov	r1, r4
 8002b62:	4640      	mov	r0, r8
 8002b64:	f7ff fee4 	bl	8002930 <_printf_common>
 8002b68:	3001      	adds	r0, #1
 8002b6a:	d14a      	bne.n	8002c02 <_printf_i+0x1f6>
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	b004      	add	sp, #16
 8002b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	f043 0320 	orr.w	r3, r3, #32
 8002b7c:	6023      	str	r3, [r4, #0]
 8002b7e:	4833      	ldr	r0, [pc, #204]	; (8002c4c <_printf_i+0x240>)
 8002b80:	2778      	movs	r7, #120	; 0x78
 8002b82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	6829      	ldr	r1, [r5, #0]
 8002b8a:	061f      	lsls	r7, r3, #24
 8002b8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b90:	d402      	bmi.n	8002b98 <_printf_i+0x18c>
 8002b92:	065f      	lsls	r7, r3, #25
 8002b94:	bf48      	it	mi
 8002b96:	b2b6      	uxthmi	r6, r6
 8002b98:	07df      	lsls	r7, r3, #31
 8002b9a:	bf48      	it	mi
 8002b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8002ba0:	6029      	str	r1, [r5, #0]
 8002ba2:	bf48      	it	mi
 8002ba4:	6023      	strmi	r3, [r4, #0]
 8002ba6:	b91e      	cbnz	r6, 8002bb0 <_printf_i+0x1a4>
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	f023 0320 	bic.w	r3, r3, #32
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	e7a7      	b.n	8002b04 <_printf_i+0xf8>
 8002bb4:	4824      	ldr	r0, [pc, #144]	; (8002c48 <_printf_i+0x23c>)
 8002bb6:	e7e4      	b.n	8002b82 <_printf_i+0x176>
 8002bb8:	4615      	mov	r5, r2
 8002bba:	e7bd      	b.n	8002b38 <_printf_i+0x12c>
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	6826      	ldr	r6, [r4, #0]
 8002bc0:	6961      	ldr	r1, [r4, #20]
 8002bc2:	1d18      	adds	r0, r3, #4
 8002bc4:	6028      	str	r0, [r5, #0]
 8002bc6:	0635      	lsls	r5, r6, #24
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	d501      	bpl.n	8002bd0 <_printf_i+0x1c4>
 8002bcc:	6019      	str	r1, [r3, #0]
 8002bce:	e002      	b.n	8002bd6 <_printf_i+0x1ca>
 8002bd0:	0670      	lsls	r0, r6, #25
 8002bd2:	d5fb      	bpl.n	8002bcc <_printf_i+0x1c0>
 8002bd4:	8019      	strh	r1, [r3, #0]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	6123      	str	r3, [r4, #16]
 8002bda:	4615      	mov	r5, r2
 8002bdc:	e7bc      	b.n	8002b58 <_printf_i+0x14c>
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	1d1a      	adds	r2, r3, #4
 8002be2:	602a      	str	r2, [r5, #0]
 8002be4:	681d      	ldr	r5, [r3, #0]
 8002be6:	6862      	ldr	r2, [r4, #4]
 8002be8:	2100      	movs	r1, #0
 8002bea:	4628      	mov	r0, r5
 8002bec:	f7fd faf0 	bl	80001d0 <memchr>
 8002bf0:	b108      	cbz	r0, 8002bf6 <_printf_i+0x1ea>
 8002bf2:	1b40      	subs	r0, r0, r5
 8002bf4:	6060      	str	r0, [r4, #4]
 8002bf6:	6863      	ldr	r3, [r4, #4]
 8002bf8:	6123      	str	r3, [r4, #16]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c00:	e7aa      	b.n	8002b58 <_printf_i+0x14c>
 8002c02:	6923      	ldr	r3, [r4, #16]
 8002c04:	462a      	mov	r2, r5
 8002c06:	4649      	mov	r1, r9
 8002c08:	4640      	mov	r0, r8
 8002c0a:	47d0      	blx	sl
 8002c0c:	3001      	adds	r0, #1
 8002c0e:	d0ad      	beq.n	8002b6c <_printf_i+0x160>
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	079b      	lsls	r3, r3, #30
 8002c14:	d413      	bmi.n	8002c3e <_printf_i+0x232>
 8002c16:	68e0      	ldr	r0, [r4, #12]
 8002c18:	9b03      	ldr	r3, [sp, #12]
 8002c1a:	4298      	cmp	r0, r3
 8002c1c:	bfb8      	it	lt
 8002c1e:	4618      	movlt	r0, r3
 8002c20:	e7a6      	b.n	8002b70 <_printf_i+0x164>
 8002c22:	2301      	movs	r3, #1
 8002c24:	4632      	mov	r2, r6
 8002c26:	4649      	mov	r1, r9
 8002c28:	4640      	mov	r0, r8
 8002c2a:	47d0      	blx	sl
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d09d      	beq.n	8002b6c <_printf_i+0x160>
 8002c30:	3501      	adds	r5, #1
 8002c32:	68e3      	ldr	r3, [r4, #12]
 8002c34:	9903      	ldr	r1, [sp, #12]
 8002c36:	1a5b      	subs	r3, r3, r1
 8002c38:	42ab      	cmp	r3, r5
 8002c3a:	dcf2      	bgt.n	8002c22 <_printf_i+0x216>
 8002c3c:	e7eb      	b.n	8002c16 <_printf_i+0x20a>
 8002c3e:	2500      	movs	r5, #0
 8002c40:	f104 0619 	add.w	r6, r4, #25
 8002c44:	e7f5      	b.n	8002c32 <_printf_i+0x226>
 8002c46:	bf00      	nop
 8002c48:	08005e2a 	.word	0x08005e2a
 8002c4c:	08005e3b 	.word	0x08005e3b

08002c50 <std>:
 8002c50:	2300      	movs	r3, #0
 8002c52:	b510      	push	{r4, lr}
 8002c54:	4604      	mov	r4, r0
 8002c56:	e9c0 3300 	strd	r3, r3, [r0]
 8002c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c5e:	6083      	str	r3, [r0, #8]
 8002c60:	8181      	strh	r1, [r0, #12]
 8002c62:	6643      	str	r3, [r0, #100]	; 0x64
 8002c64:	81c2      	strh	r2, [r0, #14]
 8002c66:	6183      	str	r3, [r0, #24]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	305c      	adds	r0, #92	; 0x5c
 8002c6e:	f000 f8f4 	bl	8002e5a <memset>
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <std+0x58>)
 8002c74:	6263      	str	r3, [r4, #36]	; 0x24
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <std+0x5c>)
 8002c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <std+0x60>)
 8002c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <std+0x64>)
 8002c80:	6323      	str	r3, [r4, #48]	; 0x30
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <std+0x68>)
 8002c84:	6224      	str	r4, [r4, #32]
 8002c86:	429c      	cmp	r4, r3
 8002c88:	d006      	beq.n	8002c98 <std+0x48>
 8002c8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002c8e:	4294      	cmp	r4, r2
 8002c90:	d002      	beq.n	8002c98 <std+0x48>
 8002c92:	33d0      	adds	r3, #208	; 0xd0
 8002c94:	429c      	cmp	r4, r3
 8002c96:	d105      	bne.n	8002ca4 <std+0x54>
 8002c98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca0:	f000 b958 	b.w	8002f54 <__retarget_lock_init_recursive>
 8002ca4:	bd10      	pop	{r4, pc}
 8002ca6:	bf00      	nop
 8002ca8:	08002dd5 	.word	0x08002dd5
 8002cac:	08002df7 	.word	0x08002df7
 8002cb0:	08002e2f 	.word	0x08002e2f
 8002cb4:	08002e53 	.word	0x08002e53
 8002cb8:	20000704 	.word	0x20000704

08002cbc <stdio_exit_handler>:
 8002cbc:	4a02      	ldr	r2, [pc, #8]	; (8002cc8 <stdio_exit_handler+0xc>)
 8002cbe:	4903      	ldr	r1, [pc, #12]	; (8002ccc <stdio_exit_handler+0x10>)
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <stdio_exit_handler+0x14>)
 8002cc2:	f000 b869 	b.w	8002d98 <_fwalk_sglue>
 8002cc6:	bf00      	nop
 8002cc8:	20000510 	.word	0x20000510
 8002ccc:	08004659 	.word	0x08004659
 8002cd0:	2000051c 	.word	0x2000051c

08002cd4 <cleanup_stdio>:
 8002cd4:	6841      	ldr	r1, [r0, #4]
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <cleanup_stdio+0x34>)
 8002cd8:	4299      	cmp	r1, r3
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	4604      	mov	r4, r0
 8002cde:	d001      	beq.n	8002ce4 <cleanup_stdio+0x10>
 8002ce0:	f001 fcba 	bl	8004658 <_fflush_r>
 8002ce4:	68a1      	ldr	r1, [r4, #8]
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <cleanup_stdio+0x38>)
 8002ce8:	4299      	cmp	r1, r3
 8002cea:	d002      	beq.n	8002cf2 <cleanup_stdio+0x1e>
 8002cec:	4620      	mov	r0, r4
 8002cee:	f001 fcb3 	bl	8004658 <_fflush_r>
 8002cf2:	68e1      	ldr	r1, [r4, #12]
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <cleanup_stdio+0x3c>)
 8002cf6:	4299      	cmp	r1, r3
 8002cf8:	d004      	beq.n	8002d04 <cleanup_stdio+0x30>
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d00:	f001 bcaa 	b.w	8004658 <_fflush_r>
 8002d04:	bd10      	pop	{r4, pc}
 8002d06:	bf00      	nop
 8002d08:	20000704 	.word	0x20000704
 8002d0c:	2000076c 	.word	0x2000076c
 8002d10:	200007d4 	.word	0x200007d4

08002d14 <global_stdio_init.part.0>:
 8002d14:	b510      	push	{r4, lr}
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <global_stdio_init.part.0+0x30>)
 8002d18:	4c0b      	ldr	r4, [pc, #44]	; (8002d48 <global_stdio_init.part.0+0x34>)
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <global_stdio_init.part.0+0x38>)
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	4620      	mov	r0, r4
 8002d20:	2200      	movs	r2, #0
 8002d22:	2104      	movs	r1, #4
 8002d24:	f7ff ff94 	bl	8002c50 <std>
 8002d28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	2109      	movs	r1, #9
 8002d30:	f7ff ff8e 	bl	8002c50 <std>
 8002d34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002d38:	2202      	movs	r2, #2
 8002d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d3e:	2112      	movs	r1, #18
 8002d40:	f7ff bf86 	b.w	8002c50 <std>
 8002d44:	2000083c 	.word	0x2000083c
 8002d48:	20000704 	.word	0x20000704
 8002d4c:	08002cbd 	.word	0x08002cbd

08002d50 <__sfp_lock_acquire>:
 8002d50:	4801      	ldr	r0, [pc, #4]	; (8002d58 <__sfp_lock_acquire+0x8>)
 8002d52:	f000 b900 	b.w	8002f56 <__retarget_lock_acquire_recursive>
 8002d56:	bf00      	nop
 8002d58:	20000845 	.word	0x20000845

08002d5c <__sfp_lock_release>:
 8002d5c:	4801      	ldr	r0, [pc, #4]	; (8002d64 <__sfp_lock_release+0x8>)
 8002d5e:	f000 b8fb 	b.w	8002f58 <__retarget_lock_release_recursive>
 8002d62:	bf00      	nop
 8002d64:	20000845 	.word	0x20000845

08002d68 <__sinit>:
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	f7ff fff0 	bl	8002d50 <__sfp_lock_acquire>
 8002d70:	6a23      	ldr	r3, [r4, #32]
 8002d72:	b11b      	cbz	r3, 8002d7c <__sinit+0x14>
 8002d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d78:	f7ff bff0 	b.w	8002d5c <__sfp_lock_release>
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <__sinit+0x28>)
 8002d7e:	6223      	str	r3, [r4, #32]
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <__sinit+0x2c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f5      	bne.n	8002d74 <__sinit+0xc>
 8002d88:	f7ff ffc4 	bl	8002d14 <global_stdio_init.part.0>
 8002d8c:	e7f2      	b.n	8002d74 <__sinit+0xc>
 8002d8e:	bf00      	nop
 8002d90:	08002cd5 	.word	0x08002cd5
 8002d94:	2000083c 	.word	0x2000083c

08002d98 <_fwalk_sglue>:
 8002d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d9c:	4607      	mov	r7, r0
 8002d9e:	4688      	mov	r8, r1
 8002da0:	4614      	mov	r4, r2
 8002da2:	2600      	movs	r6, #0
 8002da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002da8:	f1b9 0901 	subs.w	r9, r9, #1
 8002dac:	d505      	bpl.n	8002dba <_fwalk_sglue+0x22>
 8002dae:	6824      	ldr	r4, [r4, #0]
 8002db0:	2c00      	cmp	r4, #0
 8002db2:	d1f7      	bne.n	8002da4 <_fwalk_sglue+0xc>
 8002db4:	4630      	mov	r0, r6
 8002db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dba:	89ab      	ldrh	r3, [r5, #12]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d907      	bls.n	8002dd0 <_fwalk_sglue+0x38>
 8002dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	d003      	beq.n	8002dd0 <_fwalk_sglue+0x38>
 8002dc8:	4629      	mov	r1, r5
 8002dca:	4638      	mov	r0, r7
 8002dcc:	47c0      	blx	r8
 8002dce:	4306      	orrs	r6, r0
 8002dd0:	3568      	adds	r5, #104	; 0x68
 8002dd2:	e7e9      	b.n	8002da8 <_fwalk_sglue+0x10>

08002dd4 <__sread>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ddc:	f000 f86c 	bl	8002eb8 <_read_r>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	bfab      	itete	ge
 8002de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002de6:	89a3      	ldrhlt	r3, [r4, #12]
 8002de8:	181b      	addge	r3, r3, r0
 8002dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002dee:	bfac      	ite	ge
 8002df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002df2:	81a3      	strhlt	r3, [r4, #12]
 8002df4:	bd10      	pop	{r4, pc}

08002df6 <__swrite>:
 8002df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfa:	461f      	mov	r7, r3
 8002dfc:	898b      	ldrh	r3, [r1, #12]
 8002dfe:	05db      	lsls	r3, r3, #23
 8002e00:	4605      	mov	r5, r0
 8002e02:	460c      	mov	r4, r1
 8002e04:	4616      	mov	r6, r2
 8002e06:	d505      	bpl.n	8002e14 <__swrite+0x1e>
 8002e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f000 f840 	bl	8002e94 <_lseek_r>
 8002e14:	89a3      	ldrh	r3, [r4, #12]
 8002e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1e:	81a3      	strh	r3, [r4, #12]
 8002e20:	4632      	mov	r2, r6
 8002e22:	463b      	mov	r3, r7
 8002e24:	4628      	mov	r0, r5
 8002e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e2a:	f000 b857 	b.w	8002edc <_write_r>

08002e2e <__sseek>:
 8002e2e:	b510      	push	{r4, lr}
 8002e30:	460c      	mov	r4, r1
 8002e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e36:	f000 f82d 	bl	8002e94 <_lseek_r>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	bf15      	itete	ne
 8002e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e4a:	81a3      	strheq	r3, [r4, #12]
 8002e4c:	bf18      	it	ne
 8002e4e:	81a3      	strhne	r3, [r4, #12]
 8002e50:	bd10      	pop	{r4, pc}

08002e52 <__sclose>:
 8002e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e56:	f000 b80d 	b.w	8002e74 <_close_r>

08002e5a <memset>:
 8002e5a:	4402      	add	r2, r0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d100      	bne.n	8002e64 <memset+0xa>
 8002e62:	4770      	bx	lr
 8002e64:	f803 1b01 	strb.w	r1, [r3], #1
 8002e68:	e7f9      	b.n	8002e5e <memset+0x4>
	...

08002e6c <_localeconv_r>:
 8002e6c:	4800      	ldr	r0, [pc, #0]	; (8002e70 <_localeconv_r+0x4>)
 8002e6e:	4770      	bx	lr
 8002e70:	2000065c 	.word	0x2000065c

08002e74 <_close_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4d06      	ldr	r5, [pc, #24]	; (8002e90 <_close_r+0x1c>)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	602b      	str	r3, [r5, #0]
 8002e80:	f7fe faeb 	bl	800145a <_close>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	d102      	bne.n	8002e8e <_close_r+0x1a>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	b103      	cbz	r3, 8002e8e <_close_r+0x1a>
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	bd38      	pop	{r3, r4, r5, pc}
 8002e90:	20000840 	.word	0x20000840

08002e94 <_lseek_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	4d07      	ldr	r5, [pc, #28]	; (8002eb4 <_lseek_r+0x20>)
 8002e98:	4604      	mov	r4, r0
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	602a      	str	r2, [r5, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f7fe fb00 	bl	80014a8 <_lseek>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d102      	bne.n	8002eb2 <_lseek_r+0x1e>
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	b103      	cbz	r3, 8002eb2 <_lseek_r+0x1e>
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	20000840 	.word	0x20000840

08002eb8 <_read_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4d07      	ldr	r5, [pc, #28]	; (8002ed8 <_read_r+0x20>)
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	4608      	mov	r0, r1
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	602a      	str	r2, [r5, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f7fe fa8e 	bl	80013e8 <_read>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d102      	bne.n	8002ed6 <_read_r+0x1e>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	b103      	cbz	r3, 8002ed6 <_read_r+0x1e>
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	20000840 	.word	0x20000840

08002edc <_write_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4d07      	ldr	r5, [pc, #28]	; (8002efc <_write_r+0x20>)
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	4608      	mov	r0, r1
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	602a      	str	r2, [r5, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7fe fa99 	bl	8001422 <_write>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_write_r+0x1e>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_write_r+0x1e>
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	20000840 	.word	0x20000840

08002f00 <__errno>:
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <__errno+0x8>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000568 	.word	0x20000568

08002f0c <__libc_init_array>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4d0d      	ldr	r5, [pc, #52]	; (8002f44 <__libc_init_array+0x38>)
 8002f10:	4c0d      	ldr	r4, [pc, #52]	; (8002f48 <__libc_init_array+0x3c>)
 8002f12:	1b64      	subs	r4, r4, r5
 8002f14:	10a4      	asrs	r4, r4, #2
 8002f16:	2600      	movs	r6, #0
 8002f18:	42a6      	cmp	r6, r4
 8002f1a:	d109      	bne.n	8002f30 <__libc_init_array+0x24>
 8002f1c:	4d0b      	ldr	r5, [pc, #44]	; (8002f4c <__libc_init_array+0x40>)
 8002f1e:	4c0c      	ldr	r4, [pc, #48]	; (8002f50 <__libc_init_array+0x44>)
 8002f20:	f002 ff66 	bl	8005df0 <_init>
 8002f24:	1b64      	subs	r4, r4, r5
 8002f26:	10a4      	asrs	r4, r4, #2
 8002f28:	2600      	movs	r6, #0
 8002f2a:	42a6      	cmp	r6, r4
 8002f2c:	d105      	bne.n	8002f3a <__libc_init_array+0x2e>
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f34:	4798      	blx	r3
 8002f36:	3601      	adds	r6, #1
 8002f38:	e7ee      	b.n	8002f18 <__libc_init_array+0xc>
 8002f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f3e:	4798      	blx	r3
 8002f40:	3601      	adds	r6, #1
 8002f42:	e7f2      	b.n	8002f2a <__libc_init_array+0x1e>
 8002f44:	08006370 	.word	0x08006370
 8002f48:	08006370 	.word	0x08006370
 8002f4c:	08006370 	.word	0x08006370
 8002f50:	08006374 	.word	0x08006374

08002f54 <__retarget_lock_init_recursive>:
 8002f54:	4770      	bx	lr

08002f56 <__retarget_lock_acquire_recursive>:
 8002f56:	4770      	bx	lr

08002f58 <__retarget_lock_release_recursive>:
 8002f58:	4770      	bx	lr

08002f5a <quorem>:
 8002f5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f5e:	6903      	ldr	r3, [r0, #16]
 8002f60:	690c      	ldr	r4, [r1, #16]
 8002f62:	42a3      	cmp	r3, r4
 8002f64:	4607      	mov	r7, r0
 8002f66:	db7e      	blt.n	8003066 <quorem+0x10c>
 8002f68:	3c01      	subs	r4, #1
 8002f6a:	f101 0814 	add.w	r8, r1, #20
 8002f6e:	f100 0514 	add.w	r5, r0, #20
 8002f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002f7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f80:	3301      	adds	r3, #1
 8002f82:	429a      	cmp	r2, r3
 8002f84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002f88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002f8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f90:	d331      	bcc.n	8002ff6 <quorem+0x9c>
 8002f92:	f04f 0e00 	mov.w	lr, #0
 8002f96:	4640      	mov	r0, r8
 8002f98:	46ac      	mov	ip, r5
 8002f9a:	46f2      	mov	sl, lr
 8002f9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002fa0:	b293      	uxth	r3, r2
 8002fa2:	fb06 e303 	mla	r3, r6, r3, lr
 8002fa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002faa:	0c1a      	lsrs	r2, r3, #16
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	ebaa 0303 	sub.w	r3, sl, r3
 8002fb2:	f8dc a000 	ldr.w	sl, [ip]
 8002fb6:	fa13 f38a 	uxtah	r3, r3, sl
 8002fba:	fb06 220e 	mla	r2, r6, lr, r2
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	9b00      	ldr	r3, [sp, #0]
 8002fc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002fcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002fd0:	f8bd 3000 	ldrh.w	r3, [sp]
 8002fd4:	4581      	cmp	r9, r0
 8002fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fda:	f84c 3b04 	str.w	r3, [ip], #4
 8002fde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002fe2:	d2db      	bcs.n	8002f9c <quorem+0x42>
 8002fe4:	f855 300b 	ldr.w	r3, [r5, fp]
 8002fe8:	b92b      	cbnz	r3, 8002ff6 <quorem+0x9c>
 8002fea:	9b01      	ldr	r3, [sp, #4]
 8002fec:	3b04      	subs	r3, #4
 8002fee:	429d      	cmp	r5, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	d32c      	bcc.n	800304e <quorem+0xf4>
 8002ff4:	613c      	str	r4, [r7, #16]
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f001 f9a8 	bl	800434c <__mcmp>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	db22      	blt.n	8003046 <quorem+0xec>
 8003000:	3601      	adds	r6, #1
 8003002:	4629      	mov	r1, r5
 8003004:	2000      	movs	r0, #0
 8003006:	f858 2b04 	ldr.w	r2, [r8], #4
 800300a:	f8d1 c000 	ldr.w	ip, [r1]
 800300e:	b293      	uxth	r3, r2
 8003010:	1ac3      	subs	r3, r0, r3
 8003012:	0c12      	lsrs	r2, r2, #16
 8003014:	fa13 f38c 	uxtah	r3, r3, ip
 8003018:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800301c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003020:	b29b      	uxth	r3, r3
 8003022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003026:	45c1      	cmp	r9, r8
 8003028:	f841 3b04 	str.w	r3, [r1], #4
 800302c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003030:	d2e9      	bcs.n	8003006 <quorem+0xac>
 8003032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800303a:	b922      	cbnz	r2, 8003046 <quorem+0xec>
 800303c:	3b04      	subs	r3, #4
 800303e:	429d      	cmp	r5, r3
 8003040:	461a      	mov	r2, r3
 8003042:	d30a      	bcc.n	800305a <quorem+0x100>
 8003044:	613c      	str	r4, [r7, #16]
 8003046:	4630      	mov	r0, r6
 8003048:	b003      	add	sp, #12
 800304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	3b04      	subs	r3, #4
 8003052:	2a00      	cmp	r2, #0
 8003054:	d1ce      	bne.n	8002ff4 <quorem+0x9a>
 8003056:	3c01      	subs	r4, #1
 8003058:	e7c9      	b.n	8002fee <quorem+0x94>
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	3b04      	subs	r3, #4
 800305e:	2a00      	cmp	r2, #0
 8003060:	d1f0      	bne.n	8003044 <quorem+0xea>
 8003062:	3c01      	subs	r4, #1
 8003064:	e7eb      	b.n	800303e <quorem+0xe4>
 8003066:	2000      	movs	r0, #0
 8003068:	e7ee      	b.n	8003048 <quorem+0xee>
 800306a:	0000      	movs	r0, r0
 800306c:	0000      	movs	r0, r0
	...

08003070 <_dtoa_r>:
 8003070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003074:	ed2d 8b04 	vpush	{d8-d9}
 8003078:	69c5      	ldr	r5, [r0, #28]
 800307a:	b093      	sub	sp, #76	; 0x4c
 800307c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003080:	ec57 6b10 	vmov	r6, r7, d0
 8003084:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003088:	9107      	str	r1, [sp, #28]
 800308a:	4604      	mov	r4, r0
 800308c:	920a      	str	r2, [sp, #40]	; 0x28
 800308e:	930d      	str	r3, [sp, #52]	; 0x34
 8003090:	b975      	cbnz	r5, 80030b0 <_dtoa_r+0x40>
 8003092:	2010      	movs	r0, #16
 8003094:	f000 fe2a 	bl	8003cec <malloc>
 8003098:	4602      	mov	r2, r0
 800309a:	61e0      	str	r0, [r4, #28]
 800309c:	b920      	cbnz	r0, 80030a8 <_dtoa_r+0x38>
 800309e:	4bae      	ldr	r3, [pc, #696]	; (8003358 <_dtoa_r+0x2e8>)
 80030a0:	21ef      	movs	r1, #239	; 0xef
 80030a2:	48ae      	ldr	r0, [pc, #696]	; (800335c <_dtoa_r+0x2ec>)
 80030a4:	f001 fb1e 	bl	80046e4 <__assert_func>
 80030a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80030ac:	6005      	str	r5, [r0, #0]
 80030ae:	60c5      	str	r5, [r0, #12]
 80030b0:	69e3      	ldr	r3, [r4, #28]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	b151      	cbz	r1, 80030cc <_dtoa_r+0x5c>
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	604a      	str	r2, [r1, #4]
 80030ba:	2301      	movs	r3, #1
 80030bc:	4093      	lsls	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 ff07 	bl	8003ed4 <_Bfree>
 80030c6:	69e3      	ldr	r3, [r4, #28]
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	1e3b      	subs	r3, r7, #0
 80030ce:	bfbb      	ittet	lt
 80030d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80030d4:	9303      	strlt	r3, [sp, #12]
 80030d6:	2300      	movge	r3, #0
 80030d8:	2201      	movlt	r2, #1
 80030da:	bfac      	ite	ge
 80030dc:	f8c8 3000 	strge.w	r3, [r8]
 80030e0:	f8c8 2000 	strlt.w	r2, [r8]
 80030e4:	4b9e      	ldr	r3, [pc, #632]	; (8003360 <_dtoa_r+0x2f0>)
 80030e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80030ea:	ea33 0308 	bics.w	r3, r3, r8
 80030ee:	d11b      	bne.n	8003128 <_dtoa_r+0xb8>
 80030f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80030fc:	4333      	orrs	r3, r6
 80030fe:	f000 8593 	beq.w	8003c28 <_dtoa_r+0xbb8>
 8003102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003104:	b963      	cbnz	r3, 8003120 <_dtoa_r+0xb0>
 8003106:	4b97      	ldr	r3, [pc, #604]	; (8003364 <_dtoa_r+0x2f4>)
 8003108:	e027      	b.n	800315a <_dtoa_r+0xea>
 800310a:	4b97      	ldr	r3, [pc, #604]	; (8003368 <_dtoa_r+0x2f8>)
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	3308      	adds	r3, #8
 8003110:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	9800      	ldr	r0, [sp, #0]
 8003116:	b013      	add	sp, #76	; 0x4c
 8003118:	ecbd 8b04 	vpop	{d8-d9}
 800311c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003120:	4b90      	ldr	r3, [pc, #576]	; (8003364 <_dtoa_r+0x2f4>)
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	3303      	adds	r3, #3
 8003126:	e7f3      	b.n	8003110 <_dtoa_r+0xa0>
 8003128:	ed9d 7b02 	vldr	d7, [sp, #8]
 800312c:	2200      	movs	r2, #0
 800312e:	ec51 0b17 	vmov	r0, r1, d7
 8003132:	eeb0 8a47 	vmov.f32	s16, s14
 8003136:	eef0 8a67 	vmov.f32	s17, s15
 800313a:	2300      	movs	r3, #0
 800313c:	f7fd fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003140:	4681      	mov	r9, r0
 8003142:	b160      	cbz	r0, 800315e <_dtoa_r+0xee>
 8003144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003146:	2301      	movs	r3, #1
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8568 	beq.w	8003c22 <_dtoa_r+0xbb2>
 8003152:	4b86      	ldr	r3, [pc, #536]	; (800336c <_dtoa_r+0x2fc>)
 8003154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	3b01      	subs	r3, #1
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	e7da      	b.n	8003114 <_dtoa_r+0xa4>
 800315e:	aa10      	add	r2, sp, #64	; 0x40
 8003160:	a911      	add	r1, sp, #68	; 0x44
 8003162:	4620      	mov	r0, r4
 8003164:	eeb0 0a48 	vmov.f32	s0, s16
 8003168:	eef0 0a68 	vmov.f32	s1, s17
 800316c:	f001 f994 	bl	8004498 <__d2b>
 8003170:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003174:	4682      	mov	sl, r0
 8003176:	2d00      	cmp	r5, #0
 8003178:	d07f      	beq.n	800327a <_dtoa_r+0x20a>
 800317a:	ee18 3a90 	vmov	r3, s17
 800317e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003182:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003186:	ec51 0b18 	vmov	r0, r1, d8
 800318a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800318e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003192:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003196:	4619      	mov	r1, r3
 8003198:	2200      	movs	r2, #0
 800319a:	4b75      	ldr	r3, [pc, #468]	; (8003370 <_dtoa_r+0x300>)
 800319c:	f7fd f874 	bl	8000288 <__aeabi_dsub>
 80031a0:	a367      	add	r3, pc, #412	; (adr r3, 8003340 <_dtoa_r+0x2d0>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd fa27 	bl	80005f8 <__aeabi_dmul>
 80031aa:	a367      	add	r3, pc, #412	; (adr r3, 8003348 <_dtoa_r+0x2d8>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd f86c 	bl	800028c <__adddf3>
 80031b4:	4606      	mov	r6, r0
 80031b6:	4628      	mov	r0, r5
 80031b8:	460f      	mov	r7, r1
 80031ba:	f7fd f9b3 	bl	8000524 <__aeabi_i2d>
 80031be:	a364      	add	r3, pc, #400	; (adr r3, 8003350 <_dtoa_r+0x2e0>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f7fd fa18 	bl	80005f8 <__aeabi_dmul>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4630      	mov	r0, r6
 80031ce:	4639      	mov	r1, r7
 80031d0:	f7fd f85c 	bl	800028c <__adddf3>
 80031d4:	4606      	mov	r6, r0
 80031d6:	460f      	mov	r7, r1
 80031d8:	f7fd fcbe 	bl	8000b58 <__aeabi_d2iz>
 80031dc:	2200      	movs	r2, #0
 80031de:	4683      	mov	fp, r0
 80031e0:	2300      	movs	r3, #0
 80031e2:	4630      	mov	r0, r6
 80031e4:	4639      	mov	r1, r7
 80031e6:	f7fd fc79 	bl	8000adc <__aeabi_dcmplt>
 80031ea:	b148      	cbz	r0, 8003200 <_dtoa_r+0x190>
 80031ec:	4658      	mov	r0, fp
 80031ee:	f7fd f999 	bl	8000524 <__aeabi_i2d>
 80031f2:	4632      	mov	r2, r6
 80031f4:	463b      	mov	r3, r7
 80031f6:	f7fd fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 80031fa:	b908      	cbnz	r0, 8003200 <_dtoa_r+0x190>
 80031fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003200:	f1bb 0f16 	cmp.w	fp, #22
 8003204:	d857      	bhi.n	80032b6 <_dtoa_r+0x246>
 8003206:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <_dtoa_r+0x304>)
 8003208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	ec51 0b18 	vmov	r0, r1, d8
 8003214:	f7fd fc62 	bl	8000adc <__aeabi_dcmplt>
 8003218:	2800      	cmp	r0, #0
 800321a:	d04e      	beq.n	80032ba <_dtoa_r+0x24a>
 800321c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003220:	2300      	movs	r3, #0
 8003222:	930c      	str	r3, [sp, #48]	; 0x30
 8003224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003226:	1b5b      	subs	r3, r3, r5
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	bf45      	ittet	mi
 800322c:	f1c3 0301 	rsbmi	r3, r3, #1
 8003230:	9305      	strmi	r3, [sp, #20]
 8003232:	2300      	movpl	r3, #0
 8003234:	2300      	movmi	r3, #0
 8003236:	9206      	str	r2, [sp, #24]
 8003238:	bf54      	ite	pl
 800323a:	9305      	strpl	r3, [sp, #20]
 800323c:	9306      	strmi	r3, [sp, #24]
 800323e:	f1bb 0f00 	cmp.w	fp, #0
 8003242:	db3c      	blt.n	80032be <_dtoa_r+0x24e>
 8003244:	9b06      	ldr	r3, [sp, #24]
 8003246:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800324a:	445b      	add	r3, fp
 800324c:	9306      	str	r3, [sp, #24]
 800324e:	2300      	movs	r3, #0
 8003250:	9308      	str	r3, [sp, #32]
 8003252:	9b07      	ldr	r3, [sp, #28]
 8003254:	2b09      	cmp	r3, #9
 8003256:	d868      	bhi.n	800332a <_dtoa_r+0x2ba>
 8003258:	2b05      	cmp	r3, #5
 800325a:	bfc4      	itt	gt
 800325c:	3b04      	subgt	r3, #4
 800325e:	9307      	strgt	r3, [sp, #28]
 8003260:	9b07      	ldr	r3, [sp, #28]
 8003262:	f1a3 0302 	sub.w	r3, r3, #2
 8003266:	bfcc      	ite	gt
 8003268:	2500      	movgt	r5, #0
 800326a:	2501      	movle	r5, #1
 800326c:	2b03      	cmp	r3, #3
 800326e:	f200 8085 	bhi.w	800337c <_dtoa_r+0x30c>
 8003272:	e8df f003 	tbb	[pc, r3]
 8003276:	3b2e      	.short	0x3b2e
 8003278:	5839      	.short	0x5839
 800327a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800327e:	441d      	add	r5, r3
 8003280:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003284:	2b20      	cmp	r3, #32
 8003286:	bfc1      	itttt	gt
 8003288:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800328c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003290:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003294:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003298:	bfd6      	itet	le
 800329a:	f1c3 0320 	rsble	r3, r3, #32
 800329e:	ea48 0003 	orrgt.w	r0, r8, r3
 80032a2:	fa06 f003 	lslle.w	r0, r6, r3
 80032a6:	f7fd f92d 	bl	8000504 <__aeabi_ui2d>
 80032aa:	2201      	movs	r2, #1
 80032ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80032b0:	3d01      	subs	r5, #1
 80032b2:	920e      	str	r2, [sp, #56]	; 0x38
 80032b4:	e76f      	b.n	8003196 <_dtoa_r+0x126>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e7b3      	b.n	8003222 <_dtoa_r+0x1b2>
 80032ba:	900c      	str	r0, [sp, #48]	; 0x30
 80032bc:	e7b2      	b.n	8003224 <_dtoa_r+0x1b4>
 80032be:	9b05      	ldr	r3, [sp, #20]
 80032c0:	eba3 030b 	sub.w	r3, r3, fp
 80032c4:	9305      	str	r3, [sp, #20]
 80032c6:	f1cb 0300 	rsb	r3, fp, #0
 80032ca:	9308      	str	r3, [sp, #32]
 80032cc:	2300      	movs	r3, #0
 80032ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80032d0:	e7bf      	b.n	8003252 <_dtoa_r+0x1e2>
 80032d2:	2300      	movs	r3, #0
 80032d4:	9309      	str	r3, [sp, #36]	; 0x24
 80032d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	dc52      	bgt.n	8003382 <_dtoa_r+0x312>
 80032dc:	2301      	movs	r3, #1
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	461a      	mov	r2, r3
 80032e4:	920a      	str	r2, [sp, #40]	; 0x28
 80032e6:	e00b      	b.n	8003300 <_dtoa_r+0x290>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e7f3      	b.n	80032d4 <_dtoa_r+0x264>
 80032ec:	2300      	movs	r3, #0
 80032ee:	9309      	str	r3, [sp, #36]	; 0x24
 80032f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032f2:	445b      	add	r3, fp
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	3301      	adds	r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	9304      	str	r3, [sp, #16]
 80032fc:	bfb8      	it	lt
 80032fe:	2301      	movlt	r3, #1
 8003300:	69e0      	ldr	r0, [r4, #28]
 8003302:	2100      	movs	r1, #0
 8003304:	2204      	movs	r2, #4
 8003306:	f102 0614 	add.w	r6, r2, #20
 800330a:	429e      	cmp	r6, r3
 800330c:	d93d      	bls.n	800338a <_dtoa_r+0x31a>
 800330e:	6041      	str	r1, [r0, #4]
 8003310:	4620      	mov	r0, r4
 8003312:	f000 fd9f 	bl	8003e54 <_Balloc>
 8003316:	9000      	str	r0, [sp, #0]
 8003318:	2800      	cmp	r0, #0
 800331a:	d139      	bne.n	8003390 <_dtoa_r+0x320>
 800331c:	4b16      	ldr	r3, [pc, #88]	; (8003378 <_dtoa_r+0x308>)
 800331e:	4602      	mov	r2, r0
 8003320:	f240 11af 	movw	r1, #431	; 0x1af
 8003324:	e6bd      	b.n	80030a2 <_dtoa_r+0x32>
 8003326:	2301      	movs	r3, #1
 8003328:	e7e1      	b.n	80032ee <_dtoa_r+0x27e>
 800332a:	2501      	movs	r5, #1
 800332c:	2300      	movs	r3, #0
 800332e:	9307      	str	r3, [sp, #28]
 8003330:	9509      	str	r5, [sp, #36]	; 0x24
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	9304      	str	r3, [sp, #16]
 800333a:	2200      	movs	r2, #0
 800333c:	2312      	movs	r3, #18
 800333e:	e7d1      	b.n	80032e4 <_dtoa_r+0x274>
 8003340:	636f4361 	.word	0x636f4361
 8003344:	3fd287a7 	.word	0x3fd287a7
 8003348:	8b60c8b3 	.word	0x8b60c8b3
 800334c:	3fc68a28 	.word	0x3fc68a28
 8003350:	509f79fb 	.word	0x509f79fb
 8003354:	3fd34413 	.word	0x3fd34413
 8003358:	08005e59 	.word	0x08005e59
 800335c:	08005e70 	.word	0x08005e70
 8003360:	7ff00000 	.word	0x7ff00000
 8003364:	08005e55 	.word	0x08005e55
 8003368:	08005e4c 	.word	0x08005e4c
 800336c:	08005e29 	.word	0x08005e29
 8003370:	3ff80000 	.word	0x3ff80000
 8003374:	08005f60 	.word	0x08005f60
 8003378:	08005ec8 	.word	0x08005ec8
 800337c:	2301      	movs	r3, #1
 800337e:	9309      	str	r3, [sp, #36]	; 0x24
 8003380:	e7d7      	b.n	8003332 <_dtoa_r+0x2c2>
 8003382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	e7ba      	b.n	8003300 <_dtoa_r+0x290>
 800338a:	3101      	adds	r1, #1
 800338c:	0052      	lsls	r2, r2, #1
 800338e:	e7ba      	b.n	8003306 <_dtoa_r+0x296>
 8003390:	69e3      	ldr	r3, [r4, #28]
 8003392:	9a00      	ldr	r2, [sp, #0]
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	9b04      	ldr	r3, [sp, #16]
 8003398:	2b0e      	cmp	r3, #14
 800339a:	f200 80a8 	bhi.w	80034ee <_dtoa_r+0x47e>
 800339e:	2d00      	cmp	r5, #0
 80033a0:	f000 80a5 	beq.w	80034ee <_dtoa_r+0x47e>
 80033a4:	f1bb 0f00 	cmp.w	fp, #0
 80033a8:	dd38      	ble.n	800341c <_dtoa_r+0x3ac>
 80033aa:	4bc0      	ldr	r3, [pc, #768]	; (80036ac <_dtoa_r+0x63c>)
 80033ac:	f00b 020f 	and.w	r2, fp, #15
 80033b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80033b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80033bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80033c0:	d019      	beq.n	80033f6 <_dtoa_r+0x386>
 80033c2:	4bbb      	ldr	r3, [pc, #748]	; (80036b0 <_dtoa_r+0x640>)
 80033c4:	ec51 0b18 	vmov	r0, r1, d8
 80033c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033cc:	f7fd fa3e 	bl	800084c <__aeabi_ddiv>
 80033d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033d4:	f008 080f 	and.w	r8, r8, #15
 80033d8:	2503      	movs	r5, #3
 80033da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80036b0 <_dtoa_r+0x640>
 80033de:	f1b8 0f00 	cmp.w	r8, #0
 80033e2:	d10a      	bne.n	80033fa <_dtoa_r+0x38a>
 80033e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033e8:	4632      	mov	r2, r6
 80033ea:	463b      	mov	r3, r7
 80033ec:	f7fd fa2e 	bl	800084c <__aeabi_ddiv>
 80033f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033f4:	e02b      	b.n	800344e <_dtoa_r+0x3de>
 80033f6:	2502      	movs	r5, #2
 80033f8:	e7ef      	b.n	80033da <_dtoa_r+0x36a>
 80033fa:	f018 0f01 	tst.w	r8, #1
 80033fe:	d008      	beq.n	8003412 <_dtoa_r+0x3a2>
 8003400:	4630      	mov	r0, r6
 8003402:	4639      	mov	r1, r7
 8003404:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003408:	f7fd f8f6 	bl	80005f8 <__aeabi_dmul>
 800340c:	3501      	adds	r5, #1
 800340e:	4606      	mov	r6, r0
 8003410:	460f      	mov	r7, r1
 8003412:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003416:	f109 0908 	add.w	r9, r9, #8
 800341a:	e7e0      	b.n	80033de <_dtoa_r+0x36e>
 800341c:	f000 809f 	beq.w	800355e <_dtoa_r+0x4ee>
 8003420:	f1cb 0600 	rsb	r6, fp, #0
 8003424:	4ba1      	ldr	r3, [pc, #644]	; (80036ac <_dtoa_r+0x63c>)
 8003426:	4fa2      	ldr	r7, [pc, #648]	; (80036b0 <_dtoa_r+0x640>)
 8003428:	f006 020f 	and.w	r2, r6, #15
 800342c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	ec51 0b18 	vmov	r0, r1, d8
 8003438:	f7fd f8de 	bl	80005f8 <__aeabi_dmul>
 800343c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003440:	1136      	asrs	r6, r6, #4
 8003442:	2300      	movs	r3, #0
 8003444:	2502      	movs	r5, #2
 8003446:	2e00      	cmp	r6, #0
 8003448:	d17e      	bne.n	8003548 <_dtoa_r+0x4d8>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1d0      	bne.n	80033f0 <_dtoa_r+0x380>
 800344e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003450:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8084 	beq.w	8003562 <_dtoa_r+0x4f2>
 800345a:	4b96      	ldr	r3, [pc, #600]	; (80036b4 <_dtoa_r+0x644>)
 800345c:	2200      	movs	r2, #0
 800345e:	4640      	mov	r0, r8
 8003460:	4649      	mov	r1, r9
 8003462:	f7fd fb3b 	bl	8000adc <__aeabi_dcmplt>
 8003466:	2800      	cmp	r0, #0
 8003468:	d07b      	beq.n	8003562 <_dtoa_r+0x4f2>
 800346a:	9b04      	ldr	r3, [sp, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d078      	beq.n	8003562 <_dtoa_r+0x4f2>
 8003470:	9b01      	ldr	r3, [sp, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	dd39      	ble.n	80034ea <_dtoa_r+0x47a>
 8003476:	4b90      	ldr	r3, [pc, #576]	; (80036b8 <_dtoa_r+0x648>)
 8003478:	2200      	movs	r2, #0
 800347a:	4640      	mov	r0, r8
 800347c:	4649      	mov	r1, r9
 800347e:	f7fd f8bb 	bl	80005f8 <__aeabi_dmul>
 8003482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003486:	9e01      	ldr	r6, [sp, #4]
 8003488:	f10b 37ff 	add.w	r7, fp, #4294967295
 800348c:	3501      	adds	r5, #1
 800348e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003492:	4628      	mov	r0, r5
 8003494:	f7fd f846 	bl	8000524 <__aeabi_i2d>
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	f7fd f8ac 	bl	80005f8 <__aeabi_dmul>
 80034a0:	4b86      	ldr	r3, [pc, #536]	; (80036bc <_dtoa_r+0x64c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	f7fc fef2 	bl	800028c <__adddf3>
 80034a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80034ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034b0:	9303      	str	r3, [sp, #12]
 80034b2:	2e00      	cmp	r6, #0
 80034b4:	d158      	bne.n	8003568 <_dtoa_r+0x4f8>
 80034b6:	4b82      	ldr	r3, [pc, #520]	; (80036c0 <_dtoa_r+0x650>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	4640      	mov	r0, r8
 80034bc:	4649      	mov	r1, r9
 80034be:	f7fc fee3 	bl	8000288 <__aeabi_dsub>
 80034c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034c6:	4680      	mov	r8, r0
 80034c8:	4689      	mov	r9, r1
 80034ca:	f7fd fb25 	bl	8000b18 <__aeabi_dcmpgt>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	f040 8296 	bne.w	8003a00 <_dtoa_r+0x990>
 80034d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80034d8:	4640      	mov	r0, r8
 80034da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80034de:	4649      	mov	r1, r9
 80034e0:	f7fd fafc 	bl	8000adc <__aeabi_dcmplt>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	f040 8289 	bne.w	80039fc <_dtoa_r+0x98c>
 80034ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80034ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f2c0 814e 	blt.w	8003792 <_dtoa_r+0x722>
 80034f6:	f1bb 0f0e 	cmp.w	fp, #14
 80034fa:	f300 814a 	bgt.w	8003792 <_dtoa_r+0x722>
 80034fe:	4b6b      	ldr	r3, [pc, #428]	; (80036ac <_dtoa_r+0x63c>)
 8003500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003504:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	f280 80dc 	bge.w	80036c8 <_dtoa_r+0x658>
 8003510:	9b04      	ldr	r3, [sp, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f300 80d8 	bgt.w	80036c8 <_dtoa_r+0x658>
 8003518:	f040 826f 	bne.w	80039fa <_dtoa_r+0x98a>
 800351c:	4b68      	ldr	r3, [pc, #416]	; (80036c0 <_dtoa_r+0x650>)
 800351e:	2200      	movs	r2, #0
 8003520:	4640      	mov	r0, r8
 8003522:	4649      	mov	r1, r9
 8003524:	f7fd f868 	bl	80005f8 <__aeabi_dmul>
 8003528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800352c:	f7fd faea 	bl	8000b04 <__aeabi_dcmpge>
 8003530:	9e04      	ldr	r6, [sp, #16]
 8003532:	4637      	mov	r7, r6
 8003534:	2800      	cmp	r0, #0
 8003536:	f040 8245 	bne.w	80039c4 <_dtoa_r+0x954>
 800353a:	9d00      	ldr	r5, [sp, #0]
 800353c:	2331      	movs	r3, #49	; 0x31
 800353e:	f805 3b01 	strb.w	r3, [r5], #1
 8003542:	f10b 0b01 	add.w	fp, fp, #1
 8003546:	e241      	b.n	80039cc <_dtoa_r+0x95c>
 8003548:	07f2      	lsls	r2, r6, #31
 800354a:	d505      	bpl.n	8003558 <_dtoa_r+0x4e8>
 800354c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003550:	f7fd f852 	bl	80005f8 <__aeabi_dmul>
 8003554:	3501      	adds	r5, #1
 8003556:	2301      	movs	r3, #1
 8003558:	1076      	asrs	r6, r6, #1
 800355a:	3708      	adds	r7, #8
 800355c:	e773      	b.n	8003446 <_dtoa_r+0x3d6>
 800355e:	2502      	movs	r5, #2
 8003560:	e775      	b.n	800344e <_dtoa_r+0x3de>
 8003562:	9e04      	ldr	r6, [sp, #16]
 8003564:	465f      	mov	r7, fp
 8003566:	e792      	b.n	800348e <_dtoa_r+0x41e>
 8003568:	9900      	ldr	r1, [sp, #0]
 800356a:	4b50      	ldr	r3, [pc, #320]	; (80036ac <_dtoa_r+0x63c>)
 800356c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003570:	4431      	add	r1, r6
 8003572:	9102      	str	r1, [sp, #8]
 8003574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003576:	eeb0 9a47 	vmov.f32	s18, s14
 800357a:	eef0 9a67 	vmov.f32	s19, s15
 800357e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003582:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003586:	2900      	cmp	r1, #0
 8003588:	d044      	beq.n	8003614 <_dtoa_r+0x5a4>
 800358a:	494e      	ldr	r1, [pc, #312]	; (80036c4 <_dtoa_r+0x654>)
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd f95d 	bl	800084c <__aeabi_ddiv>
 8003592:	ec53 2b19 	vmov	r2, r3, d9
 8003596:	f7fc fe77 	bl	8000288 <__aeabi_dsub>
 800359a:	9d00      	ldr	r5, [sp, #0]
 800359c:	ec41 0b19 	vmov	d9, r0, r1
 80035a0:	4649      	mov	r1, r9
 80035a2:	4640      	mov	r0, r8
 80035a4:	f7fd fad8 	bl	8000b58 <__aeabi_d2iz>
 80035a8:	4606      	mov	r6, r0
 80035aa:	f7fc ffbb 	bl	8000524 <__aeabi_i2d>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4640      	mov	r0, r8
 80035b4:	4649      	mov	r1, r9
 80035b6:	f7fc fe67 	bl	8000288 <__aeabi_dsub>
 80035ba:	3630      	adds	r6, #48	; 0x30
 80035bc:	f805 6b01 	strb.w	r6, [r5], #1
 80035c0:	ec53 2b19 	vmov	r2, r3, d9
 80035c4:	4680      	mov	r8, r0
 80035c6:	4689      	mov	r9, r1
 80035c8:	f7fd fa88 	bl	8000adc <__aeabi_dcmplt>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d164      	bne.n	800369a <_dtoa_r+0x62a>
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	4937      	ldr	r1, [pc, #220]	; (80036b4 <_dtoa_r+0x644>)
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fc fe56 	bl	8000288 <__aeabi_dsub>
 80035dc:	ec53 2b19 	vmov	r2, r3, d9
 80035e0:	f7fd fa7c 	bl	8000adc <__aeabi_dcmplt>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	f040 80b6 	bne.w	8003756 <_dtoa_r+0x6e6>
 80035ea:	9b02      	ldr	r3, [sp, #8]
 80035ec:	429d      	cmp	r5, r3
 80035ee:	f43f af7c 	beq.w	80034ea <_dtoa_r+0x47a>
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <_dtoa_r+0x648>)
 80035f4:	ec51 0b19 	vmov	r0, r1, d9
 80035f8:	2200      	movs	r2, #0
 80035fa:	f7fc fffd 	bl	80005f8 <__aeabi_dmul>
 80035fe:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <_dtoa_r+0x648>)
 8003600:	ec41 0b19 	vmov	d9, r0, r1
 8003604:	2200      	movs	r2, #0
 8003606:	4640      	mov	r0, r8
 8003608:	4649      	mov	r1, r9
 800360a:	f7fc fff5 	bl	80005f8 <__aeabi_dmul>
 800360e:	4680      	mov	r8, r0
 8003610:	4689      	mov	r9, r1
 8003612:	e7c5      	b.n	80035a0 <_dtoa_r+0x530>
 8003614:	ec51 0b17 	vmov	r0, r1, d7
 8003618:	f7fc ffee 	bl	80005f8 <__aeabi_dmul>
 800361c:	9b02      	ldr	r3, [sp, #8]
 800361e:	9d00      	ldr	r5, [sp, #0]
 8003620:	930f      	str	r3, [sp, #60]	; 0x3c
 8003622:	ec41 0b19 	vmov	d9, r0, r1
 8003626:	4649      	mov	r1, r9
 8003628:	4640      	mov	r0, r8
 800362a:	f7fd fa95 	bl	8000b58 <__aeabi_d2iz>
 800362e:	4606      	mov	r6, r0
 8003630:	f7fc ff78 	bl	8000524 <__aeabi_i2d>
 8003634:	3630      	adds	r6, #48	; 0x30
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4640      	mov	r0, r8
 800363c:	4649      	mov	r1, r9
 800363e:	f7fc fe23 	bl	8000288 <__aeabi_dsub>
 8003642:	f805 6b01 	strb.w	r6, [r5], #1
 8003646:	9b02      	ldr	r3, [sp, #8]
 8003648:	429d      	cmp	r5, r3
 800364a:	4680      	mov	r8, r0
 800364c:	4689      	mov	r9, r1
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	d124      	bne.n	800369e <_dtoa_r+0x62e>
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <_dtoa_r+0x654>)
 8003656:	ec51 0b19 	vmov	r0, r1, d9
 800365a:	f7fc fe17 	bl	800028c <__adddf3>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4640      	mov	r0, r8
 8003664:	4649      	mov	r1, r9
 8003666:	f7fd fa57 	bl	8000b18 <__aeabi_dcmpgt>
 800366a:	2800      	cmp	r0, #0
 800366c:	d173      	bne.n	8003756 <_dtoa_r+0x6e6>
 800366e:	ec53 2b19 	vmov	r2, r3, d9
 8003672:	4914      	ldr	r1, [pc, #80]	; (80036c4 <_dtoa_r+0x654>)
 8003674:	2000      	movs	r0, #0
 8003676:	f7fc fe07 	bl	8000288 <__aeabi_dsub>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4640      	mov	r0, r8
 8003680:	4649      	mov	r1, r9
 8003682:	f7fd fa2b 	bl	8000adc <__aeabi_dcmplt>
 8003686:	2800      	cmp	r0, #0
 8003688:	f43f af2f 	beq.w	80034ea <_dtoa_r+0x47a>
 800368c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800368e:	1e6b      	subs	r3, r5, #1
 8003690:	930f      	str	r3, [sp, #60]	; 0x3c
 8003692:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003696:	2b30      	cmp	r3, #48	; 0x30
 8003698:	d0f8      	beq.n	800368c <_dtoa_r+0x61c>
 800369a:	46bb      	mov	fp, r7
 800369c:	e04a      	b.n	8003734 <_dtoa_r+0x6c4>
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <_dtoa_r+0x648>)
 80036a0:	f7fc ffaa 	bl	80005f8 <__aeabi_dmul>
 80036a4:	4680      	mov	r8, r0
 80036a6:	4689      	mov	r9, r1
 80036a8:	e7bd      	b.n	8003626 <_dtoa_r+0x5b6>
 80036aa:	bf00      	nop
 80036ac:	08005f60 	.word	0x08005f60
 80036b0:	08005f38 	.word	0x08005f38
 80036b4:	3ff00000 	.word	0x3ff00000
 80036b8:	40240000 	.word	0x40240000
 80036bc:	401c0000 	.word	0x401c0000
 80036c0:	40140000 	.word	0x40140000
 80036c4:	3fe00000 	.word	0x3fe00000
 80036c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80036cc:	9d00      	ldr	r5, [sp, #0]
 80036ce:	4642      	mov	r2, r8
 80036d0:	464b      	mov	r3, r9
 80036d2:	4630      	mov	r0, r6
 80036d4:	4639      	mov	r1, r7
 80036d6:	f7fd f8b9 	bl	800084c <__aeabi_ddiv>
 80036da:	f7fd fa3d 	bl	8000b58 <__aeabi_d2iz>
 80036de:	9001      	str	r0, [sp, #4]
 80036e0:	f7fc ff20 	bl	8000524 <__aeabi_i2d>
 80036e4:	4642      	mov	r2, r8
 80036e6:	464b      	mov	r3, r9
 80036e8:	f7fc ff86 	bl	80005f8 <__aeabi_dmul>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4630      	mov	r0, r6
 80036f2:	4639      	mov	r1, r7
 80036f4:	f7fc fdc8 	bl	8000288 <__aeabi_dsub>
 80036f8:	9e01      	ldr	r6, [sp, #4]
 80036fa:	9f04      	ldr	r7, [sp, #16]
 80036fc:	3630      	adds	r6, #48	; 0x30
 80036fe:	f805 6b01 	strb.w	r6, [r5], #1
 8003702:	9e00      	ldr	r6, [sp, #0]
 8003704:	1bae      	subs	r6, r5, r6
 8003706:	42b7      	cmp	r7, r6
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	d134      	bne.n	8003778 <_dtoa_r+0x708>
 800370e:	f7fc fdbd 	bl	800028c <__adddf3>
 8003712:	4642      	mov	r2, r8
 8003714:	464b      	mov	r3, r9
 8003716:	4606      	mov	r6, r0
 8003718:	460f      	mov	r7, r1
 800371a:	f7fd f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 800371e:	b9c8      	cbnz	r0, 8003754 <_dtoa_r+0x6e4>
 8003720:	4642      	mov	r2, r8
 8003722:	464b      	mov	r3, r9
 8003724:	4630      	mov	r0, r6
 8003726:	4639      	mov	r1, r7
 8003728:	f7fd f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800372c:	b110      	cbz	r0, 8003734 <_dtoa_r+0x6c4>
 800372e:	9b01      	ldr	r3, [sp, #4]
 8003730:	07db      	lsls	r3, r3, #31
 8003732:	d40f      	bmi.n	8003754 <_dtoa_r+0x6e4>
 8003734:	4651      	mov	r1, sl
 8003736:	4620      	mov	r0, r4
 8003738:	f000 fbcc 	bl	8003ed4 <_Bfree>
 800373c:	2300      	movs	r3, #0
 800373e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003740:	702b      	strb	r3, [r5, #0]
 8003742:	f10b 0301 	add.w	r3, fp, #1
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800374a:	2b00      	cmp	r3, #0
 800374c:	f43f ace2 	beq.w	8003114 <_dtoa_r+0xa4>
 8003750:	601d      	str	r5, [r3, #0]
 8003752:	e4df      	b.n	8003114 <_dtoa_r+0xa4>
 8003754:	465f      	mov	r7, fp
 8003756:	462b      	mov	r3, r5
 8003758:	461d      	mov	r5, r3
 800375a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800375e:	2a39      	cmp	r2, #57	; 0x39
 8003760:	d106      	bne.n	8003770 <_dtoa_r+0x700>
 8003762:	9a00      	ldr	r2, [sp, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d1f7      	bne.n	8003758 <_dtoa_r+0x6e8>
 8003768:	9900      	ldr	r1, [sp, #0]
 800376a:	2230      	movs	r2, #48	; 0x30
 800376c:	3701      	adds	r7, #1
 800376e:	700a      	strb	r2, [r1, #0]
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	3201      	adds	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e790      	b.n	800369a <_dtoa_r+0x62a>
 8003778:	4ba3      	ldr	r3, [pc, #652]	; (8003a08 <_dtoa_r+0x998>)
 800377a:	2200      	movs	r2, #0
 800377c:	f7fc ff3c 	bl	80005f8 <__aeabi_dmul>
 8003780:	2200      	movs	r2, #0
 8003782:	2300      	movs	r3, #0
 8003784:	4606      	mov	r6, r0
 8003786:	460f      	mov	r7, r1
 8003788:	f7fd f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800378c:	2800      	cmp	r0, #0
 800378e:	d09e      	beq.n	80036ce <_dtoa_r+0x65e>
 8003790:	e7d0      	b.n	8003734 <_dtoa_r+0x6c4>
 8003792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003794:	2a00      	cmp	r2, #0
 8003796:	f000 80ca 	beq.w	800392e <_dtoa_r+0x8be>
 800379a:	9a07      	ldr	r2, [sp, #28]
 800379c:	2a01      	cmp	r2, #1
 800379e:	f300 80ad 	bgt.w	80038fc <_dtoa_r+0x88c>
 80037a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	f000 80a5 	beq.w	80038f4 <_dtoa_r+0x884>
 80037aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80037ae:	9e08      	ldr	r6, [sp, #32]
 80037b0:	9d05      	ldr	r5, [sp, #20]
 80037b2:	9a05      	ldr	r2, [sp, #20]
 80037b4:	441a      	add	r2, r3
 80037b6:	9205      	str	r2, [sp, #20]
 80037b8:	9a06      	ldr	r2, [sp, #24]
 80037ba:	2101      	movs	r1, #1
 80037bc:	441a      	add	r2, r3
 80037be:	4620      	mov	r0, r4
 80037c0:	9206      	str	r2, [sp, #24]
 80037c2:	f000 fc3d 	bl	8004040 <__i2b>
 80037c6:	4607      	mov	r7, r0
 80037c8:	b165      	cbz	r5, 80037e4 <_dtoa_r+0x774>
 80037ca:	9b06      	ldr	r3, [sp, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	dd09      	ble.n	80037e4 <_dtoa_r+0x774>
 80037d0:	42ab      	cmp	r3, r5
 80037d2:	9a05      	ldr	r2, [sp, #20]
 80037d4:	bfa8      	it	ge
 80037d6:	462b      	movge	r3, r5
 80037d8:	1ad2      	subs	r2, r2, r3
 80037da:	9205      	str	r2, [sp, #20]
 80037dc:	9a06      	ldr	r2, [sp, #24]
 80037de:	1aed      	subs	r5, r5, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	9306      	str	r3, [sp, #24]
 80037e4:	9b08      	ldr	r3, [sp, #32]
 80037e6:	b1f3      	cbz	r3, 8003826 <_dtoa_r+0x7b6>
 80037e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80a3 	beq.w	8003936 <_dtoa_r+0x8c6>
 80037f0:	2e00      	cmp	r6, #0
 80037f2:	dd10      	ble.n	8003816 <_dtoa_r+0x7a6>
 80037f4:	4639      	mov	r1, r7
 80037f6:	4632      	mov	r2, r6
 80037f8:	4620      	mov	r0, r4
 80037fa:	f000 fce1 	bl	80041c0 <__pow5mult>
 80037fe:	4652      	mov	r2, sl
 8003800:	4601      	mov	r1, r0
 8003802:	4607      	mov	r7, r0
 8003804:	4620      	mov	r0, r4
 8003806:	f000 fc31 	bl	800406c <__multiply>
 800380a:	4651      	mov	r1, sl
 800380c:	4680      	mov	r8, r0
 800380e:	4620      	mov	r0, r4
 8003810:	f000 fb60 	bl	8003ed4 <_Bfree>
 8003814:	46c2      	mov	sl, r8
 8003816:	9b08      	ldr	r3, [sp, #32]
 8003818:	1b9a      	subs	r2, r3, r6
 800381a:	d004      	beq.n	8003826 <_dtoa_r+0x7b6>
 800381c:	4651      	mov	r1, sl
 800381e:	4620      	mov	r0, r4
 8003820:	f000 fcce 	bl	80041c0 <__pow5mult>
 8003824:	4682      	mov	sl, r0
 8003826:	2101      	movs	r1, #1
 8003828:	4620      	mov	r0, r4
 800382a:	f000 fc09 	bl	8004040 <__i2b>
 800382e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	4606      	mov	r6, r0
 8003834:	f340 8081 	ble.w	800393a <_dtoa_r+0x8ca>
 8003838:	461a      	mov	r2, r3
 800383a:	4601      	mov	r1, r0
 800383c:	4620      	mov	r0, r4
 800383e:	f000 fcbf 	bl	80041c0 <__pow5mult>
 8003842:	9b07      	ldr	r3, [sp, #28]
 8003844:	2b01      	cmp	r3, #1
 8003846:	4606      	mov	r6, r0
 8003848:	dd7a      	ble.n	8003940 <_dtoa_r+0x8d0>
 800384a:	f04f 0800 	mov.w	r8, #0
 800384e:	6933      	ldr	r3, [r6, #16]
 8003850:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003854:	6918      	ldr	r0, [r3, #16]
 8003856:	f000 fba5 	bl	8003fa4 <__hi0bits>
 800385a:	f1c0 0020 	rsb	r0, r0, #32
 800385e:	9b06      	ldr	r3, [sp, #24]
 8003860:	4418      	add	r0, r3
 8003862:	f010 001f 	ands.w	r0, r0, #31
 8003866:	f000 8094 	beq.w	8003992 <_dtoa_r+0x922>
 800386a:	f1c0 0320 	rsb	r3, r0, #32
 800386e:	2b04      	cmp	r3, #4
 8003870:	f340 8085 	ble.w	800397e <_dtoa_r+0x90e>
 8003874:	9b05      	ldr	r3, [sp, #20]
 8003876:	f1c0 001c 	rsb	r0, r0, #28
 800387a:	4403      	add	r3, r0
 800387c:	9305      	str	r3, [sp, #20]
 800387e:	9b06      	ldr	r3, [sp, #24]
 8003880:	4403      	add	r3, r0
 8003882:	4405      	add	r5, r0
 8003884:	9306      	str	r3, [sp, #24]
 8003886:	9b05      	ldr	r3, [sp, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	dd05      	ble.n	8003898 <_dtoa_r+0x828>
 800388c:	4651      	mov	r1, sl
 800388e:	461a      	mov	r2, r3
 8003890:	4620      	mov	r0, r4
 8003892:	f000 fcef 	bl	8004274 <__lshift>
 8003896:	4682      	mov	sl, r0
 8003898:	9b06      	ldr	r3, [sp, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	dd05      	ble.n	80038aa <_dtoa_r+0x83a>
 800389e:	4631      	mov	r1, r6
 80038a0:	461a      	mov	r2, r3
 80038a2:	4620      	mov	r0, r4
 80038a4:	f000 fce6 	bl	8004274 <__lshift>
 80038a8:	4606      	mov	r6, r0
 80038aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d072      	beq.n	8003996 <_dtoa_r+0x926>
 80038b0:	4631      	mov	r1, r6
 80038b2:	4650      	mov	r0, sl
 80038b4:	f000 fd4a 	bl	800434c <__mcmp>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	da6c      	bge.n	8003996 <_dtoa_r+0x926>
 80038bc:	2300      	movs	r3, #0
 80038be:	4651      	mov	r1, sl
 80038c0:	220a      	movs	r2, #10
 80038c2:	4620      	mov	r0, r4
 80038c4:	f000 fb28 	bl	8003f18 <__multadd>
 80038c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038ce:	4682      	mov	sl, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 81b0 	beq.w	8003c36 <_dtoa_r+0xbc6>
 80038d6:	2300      	movs	r3, #0
 80038d8:	4639      	mov	r1, r7
 80038da:	220a      	movs	r2, #10
 80038dc:	4620      	mov	r0, r4
 80038de:	f000 fb1b 	bl	8003f18 <__multadd>
 80038e2:	9b01      	ldr	r3, [sp, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	4607      	mov	r7, r0
 80038e8:	f300 8096 	bgt.w	8003a18 <_dtoa_r+0x9a8>
 80038ec:	9b07      	ldr	r3, [sp, #28]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	dc59      	bgt.n	80039a6 <_dtoa_r+0x936>
 80038f2:	e091      	b.n	8003a18 <_dtoa_r+0x9a8>
 80038f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80038fa:	e758      	b.n	80037ae <_dtoa_r+0x73e>
 80038fc:	9b04      	ldr	r3, [sp, #16]
 80038fe:	1e5e      	subs	r6, r3, #1
 8003900:	9b08      	ldr	r3, [sp, #32]
 8003902:	42b3      	cmp	r3, r6
 8003904:	bfbf      	itttt	lt
 8003906:	9b08      	ldrlt	r3, [sp, #32]
 8003908:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800390a:	9608      	strlt	r6, [sp, #32]
 800390c:	1af3      	sublt	r3, r6, r3
 800390e:	bfb4      	ite	lt
 8003910:	18d2      	addlt	r2, r2, r3
 8003912:	1b9e      	subge	r6, r3, r6
 8003914:	9b04      	ldr	r3, [sp, #16]
 8003916:	bfbc      	itt	lt
 8003918:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800391a:	2600      	movlt	r6, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	bfb7      	itett	lt
 8003920:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8003924:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003928:	1a9d      	sublt	r5, r3, r2
 800392a:	2300      	movlt	r3, #0
 800392c:	e741      	b.n	80037b2 <_dtoa_r+0x742>
 800392e:	9e08      	ldr	r6, [sp, #32]
 8003930:	9d05      	ldr	r5, [sp, #20]
 8003932:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003934:	e748      	b.n	80037c8 <_dtoa_r+0x758>
 8003936:	9a08      	ldr	r2, [sp, #32]
 8003938:	e770      	b.n	800381c <_dtoa_r+0x7ac>
 800393a:	9b07      	ldr	r3, [sp, #28]
 800393c:	2b01      	cmp	r3, #1
 800393e:	dc19      	bgt.n	8003974 <_dtoa_r+0x904>
 8003940:	9b02      	ldr	r3, [sp, #8]
 8003942:	b9bb      	cbnz	r3, 8003974 <_dtoa_r+0x904>
 8003944:	9b03      	ldr	r3, [sp, #12]
 8003946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800394a:	b99b      	cbnz	r3, 8003974 <_dtoa_r+0x904>
 800394c:	9b03      	ldr	r3, [sp, #12]
 800394e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003952:	0d1b      	lsrs	r3, r3, #20
 8003954:	051b      	lsls	r3, r3, #20
 8003956:	b183      	cbz	r3, 800397a <_dtoa_r+0x90a>
 8003958:	9b05      	ldr	r3, [sp, #20]
 800395a:	3301      	adds	r3, #1
 800395c:	9305      	str	r3, [sp, #20]
 800395e:	9b06      	ldr	r3, [sp, #24]
 8003960:	3301      	adds	r3, #1
 8003962:	9306      	str	r3, [sp, #24]
 8003964:	f04f 0801 	mov.w	r8, #1
 8003968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800396a:	2b00      	cmp	r3, #0
 800396c:	f47f af6f 	bne.w	800384e <_dtoa_r+0x7de>
 8003970:	2001      	movs	r0, #1
 8003972:	e774      	b.n	800385e <_dtoa_r+0x7ee>
 8003974:	f04f 0800 	mov.w	r8, #0
 8003978:	e7f6      	b.n	8003968 <_dtoa_r+0x8f8>
 800397a:	4698      	mov	r8, r3
 800397c:	e7f4      	b.n	8003968 <_dtoa_r+0x8f8>
 800397e:	d082      	beq.n	8003886 <_dtoa_r+0x816>
 8003980:	9a05      	ldr	r2, [sp, #20]
 8003982:	331c      	adds	r3, #28
 8003984:	441a      	add	r2, r3
 8003986:	9205      	str	r2, [sp, #20]
 8003988:	9a06      	ldr	r2, [sp, #24]
 800398a:	441a      	add	r2, r3
 800398c:	441d      	add	r5, r3
 800398e:	9206      	str	r2, [sp, #24]
 8003990:	e779      	b.n	8003886 <_dtoa_r+0x816>
 8003992:	4603      	mov	r3, r0
 8003994:	e7f4      	b.n	8003980 <_dtoa_r+0x910>
 8003996:	9b04      	ldr	r3, [sp, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	dc37      	bgt.n	8003a0c <_dtoa_r+0x99c>
 800399c:	9b07      	ldr	r3, [sp, #28]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	dd34      	ble.n	8003a0c <_dtoa_r+0x99c>
 80039a2:	9b04      	ldr	r3, [sp, #16]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	9b01      	ldr	r3, [sp, #4]
 80039a8:	b963      	cbnz	r3, 80039c4 <_dtoa_r+0x954>
 80039aa:	4631      	mov	r1, r6
 80039ac:	2205      	movs	r2, #5
 80039ae:	4620      	mov	r0, r4
 80039b0:	f000 fab2 	bl	8003f18 <__multadd>
 80039b4:	4601      	mov	r1, r0
 80039b6:	4606      	mov	r6, r0
 80039b8:	4650      	mov	r0, sl
 80039ba:	f000 fcc7 	bl	800434c <__mcmp>
 80039be:	2800      	cmp	r0, #0
 80039c0:	f73f adbb 	bgt.w	800353a <_dtoa_r+0x4ca>
 80039c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039c6:	9d00      	ldr	r5, [sp, #0]
 80039c8:	ea6f 0b03 	mvn.w	fp, r3
 80039cc:	f04f 0800 	mov.w	r8, #0
 80039d0:	4631      	mov	r1, r6
 80039d2:	4620      	mov	r0, r4
 80039d4:	f000 fa7e 	bl	8003ed4 <_Bfree>
 80039d8:	2f00      	cmp	r7, #0
 80039da:	f43f aeab 	beq.w	8003734 <_dtoa_r+0x6c4>
 80039de:	f1b8 0f00 	cmp.w	r8, #0
 80039e2:	d005      	beq.n	80039f0 <_dtoa_r+0x980>
 80039e4:	45b8      	cmp	r8, r7
 80039e6:	d003      	beq.n	80039f0 <_dtoa_r+0x980>
 80039e8:	4641      	mov	r1, r8
 80039ea:	4620      	mov	r0, r4
 80039ec:	f000 fa72 	bl	8003ed4 <_Bfree>
 80039f0:	4639      	mov	r1, r7
 80039f2:	4620      	mov	r0, r4
 80039f4:	f000 fa6e 	bl	8003ed4 <_Bfree>
 80039f8:	e69c      	b.n	8003734 <_dtoa_r+0x6c4>
 80039fa:	2600      	movs	r6, #0
 80039fc:	4637      	mov	r7, r6
 80039fe:	e7e1      	b.n	80039c4 <_dtoa_r+0x954>
 8003a00:	46bb      	mov	fp, r7
 8003a02:	4637      	mov	r7, r6
 8003a04:	e599      	b.n	800353a <_dtoa_r+0x4ca>
 8003a06:	bf00      	nop
 8003a08:	40240000 	.word	0x40240000
 8003a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80c8 	beq.w	8003ba4 <_dtoa_r+0xb34>
 8003a14:	9b04      	ldr	r3, [sp, #16]
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	dd05      	ble.n	8003a28 <_dtoa_r+0x9b8>
 8003a1c:	4639      	mov	r1, r7
 8003a1e:	462a      	mov	r2, r5
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 fc27 	bl	8004274 <__lshift>
 8003a26:	4607      	mov	r7, r0
 8003a28:	f1b8 0f00 	cmp.w	r8, #0
 8003a2c:	d05b      	beq.n	8003ae6 <_dtoa_r+0xa76>
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4620      	mov	r0, r4
 8003a32:	f000 fa0f 	bl	8003e54 <_Balloc>
 8003a36:	4605      	mov	r5, r0
 8003a38:	b928      	cbnz	r0, 8003a46 <_dtoa_r+0x9d6>
 8003a3a:	4b83      	ldr	r3, [pc, #524]	; (8003c48 <_dtoa_r+0xbd8>)
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003a42:	f7ff bb2e 	b.w	80030a2 <_dtoa_r+0x32>
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	3202      	adds	r2, #2
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	f107 010c 	add.w	r1, r7, #12
 8003a50:	300c      	adds	r0, #12
 8003a52:	f000 fe39 	bl	80046c8 <memcpy>
 8003a56:	2201      	movs	r2, #1
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 fc0a 	bl	8004274 <__lshift>
 8003a60:	9b00      	ldr	r3, [sp, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	9304      	str	r3, [sp, #16]
 8003a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	9308      	str	r3, [sp, #32]
 8003a6e:	9b02      	ldr	r3, [sp, #8]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	46b8      	mov	r8, r7
 8003a76:	9306      	str	r3, [sp, #24]
 8003a78:	4607      	mov	r7, r0
 8003a7a:	9b04      	ldr	r3, [sp, #16]
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	4650      	mov	r0, sl
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	f7ff fa69 	bl	8002f5a <quorem>
 8003a88:	4641      	mov	r1, r8
 8003a8a:	9002      	str	r0, [sp, #8]
 8003a8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003a90:	4650      	mov	r0, sl
 8003a92:	f000 fc5b 	bl	800434c <__mcmp>
 8003a96:	463a      	mov	r2, r7
 8003a98:	9005      	str	r0, [sp, #20]
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f000 fc71 	bl	8004384 <__mdiff>
 8003aa2:	68c2      	ldr	r2, [r0, #12]
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	bb02      	cbnz	r2, 8003aea <_dtoa_r+0xa7a>
 8003aa8:	4601      	mov	r1, r0
 8003aaa:	4650      	mov	r0, sl
 8003aac:	f000 fc4e 	bl	800434c <__mcmp>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ab8:	f000 fa0c 	bl	8003ed4 <_Bfree>
 8003abc:	9b07      	ldr	r3, [sp, #28]
 8003abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ac0:	9d04      	ldr	r5, [sp, #16]
 8003ac2:	ea43 0102 	orr.w	r1, r3, r2
 8003ac6:	9b06      	ldr	r3, [sp, #24]
 8003ac8:	4319      	orrs	r1, r3
 8003aca:	d110      	bne.n	8003aee <_dtoa_r+0xa7e>
 8003acc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003ad0:	d029      	beq.n	8003b26 <_dtoa_r+0xab6>
 8003ad2:	9b05      	ldr	r3, [sp, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	dd02      	ble.n	8003ade <_dtoa_r+0xa6e>
 8003ad8:	9b02      	ldr	r3, [sp, #8]
 8003ada:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003ade:	9b01      	ldr	r3, [sp, #4]
 8003ae0:	f883 9000 	strb.w	r9, [r3]
 8003ae4:	e774      	b.n	80039d0 <_dtoa_r+0x960>
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	e7ba      	b.n	8003a60 <_dtoa_r+0x9f0>
 8003aea:	2201      	movs	r2, #1
 8003aec:	e7e1      	b.n	8003ab2 <_dtoa_r+0xa42>
 8003aee:	9b05      	ldr	r3, [sp, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	db04      	blt.n	8003afe <_dtoa_r+0xa8e>
 8003af4:	9907      	ldr	r1, [sp, #28]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	9906      	ldr	r1, [sp, #24]
 8003afa:	430b      	orrs	r3, r1
 8003afc:	d120      	bne.n	8003b40 <_dtoa_r+0xad0>
 8003afe:	2a00      	cmp	r2, #0
 8003b00:	dded      	ble.n	8003ade <_dtoa_r+0xa6e>
 8003b02:	4651      	mov	r1, sl
 8003b04:	2201      	movs	r2, #1
 8003b06:	4620      	mov	r0, r4
 8003b08:	f000 fbb4 	bl	8004274 <__lshift>
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	4682      	mov	sl, r0
 8003b10:	f000 fc1c 	bl	800434c <__mcmp>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	dc03      	bgt.n	8003b20 <_dtoa_r+0xab0>
 8003b18:	d1e1      	bne.n	8003ade <_dtoa_r+0xa6e>
 8003b1a:	f019 0f01 	tst.w	r9, #1
 8003b1e:	d0de      	beq.n	8003ade <_dtoa_r+0xa6e>
 8003b20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003b24:	d1d8      	bne.n	8003ad8 <_dtoa_r+0xa68>
 8003b26:	9a01      	ldr	r2, [sp, #4]
 8003b28:	2339      	movs	r3, #57	; 0x39
 8003b2a:	7013      	strb	r3, [r2, #0]
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	461d      	mov	r5, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003b36:	2a39      	cmp	r2, #57	; 0x39
 8003b38:	d06c      	beq.n	8003c14 <_dtoa_r+0xba4>
 8003b3a:	3201      	adds	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e747      	b.n	80039d0 <_dtoa_r+0x960>
 8003b40:	2a00      	cmp	r2, #0
 8003b42:	dd07      	ble.n	8003b54 <_dtoa_r+0xae4>
 8003b44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003b48:	d0ed      	beq.n	8003b26 <_dtoa_r+0xab6>
 8003b4a:	9a01      	ldr	r2, [sp, #4]
 8003b4c:	f109 0301 	add.w	r3, r9, #1
 8003b50:	7013      	strb	r3, [r2, #0]
 8003b52:	e73d      	b.n	80039d0 <_dtoa_r+0x960>
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	9a08      	ldr	r2, [sp, #32]
 8003b58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d043      	beq.n	8003be8 <_dtoa_r+0xb78>
 8003b60:	4651      	mov	r1, sl
 8003b62:	2300      	movs	r3, #0
 8003b64:	220a      	movs	r2, #10
 8003b66:	4620      	mov	r0, r4
 8003b68:	f000 f9d6 	bl	8003f18 <__multadd>
 8003b6c:	45b8      	cmp	r8, r7
 8003b6e:	4682      	mov	sl, r0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	f04f 020a 	mov.w	r2, #10
 8003b78:	4641      	mov	r1, r8
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	d107      	bne.n	8003b8e <_dtoa_r+0xb1e>
 8003b7e:	f000 f9cb 	bl	8003f18 <__multadd>
 8003b82:	4680      	mov	r8, r0
 8003b84:	4607      	mov	r7, r0
 8003b86:	9b04      	ldr	r3, [sp, #16]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	9304      	str	r3, [sp, #16]
 8003b8c:	e775      	b.n	8003a7a <_dtoa_r+0xa0a>
 8003b8e:	f000 f9c3 	bl	8003f18 <__multadd>
 8003b92:	4639      	mov	r1, r7
 8003b94:	4680      	mov	r8, r0
 8003b96:	2300      	movs	r3, #0
 8003b98:	220a      	movs	r2, #10
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f000 f9bc 	bl	8003f18 <__multadd>
 8003ba0:	4607      	mov	r7, r0
 8003ba2:	e7f0      	b.n	8003b86 <_dtoa_r+0xb16>
 8003ba4:	9b04      	ldr	r3, [sp, #16]
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	9d00      	ldr	r5, [sp, #0]
 8003baa:	4631      	mov	r1, r6
 8003bac:	4650      	mov	r0, sl
 8003bae:	f7ff f9d4 	bl	8002f5a <quorem>
 8003bb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003bb6:	9b00      	ldr	r3, [sp, #0]
 8003bb8:	f805 9b01 	strb.w	r9, [r5], #1
 8003bbc:	1aea      	subs	r2, r5, r3
 8003bbe:	9b01      	ldr	r3, [sp, #4]
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	dd07      	ble.n	8003bd4 <_dtoa_r+0xb64>
 8003bc4:	4651      	mov	r1, sl
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	220a      	movs	r2, #10
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f000 f9a4 	bl	8003f18 <__multadd>
 8003bd0:	4682      	mov	sl, r0
 8003bd2:	e7ea      	b.n	8003baa <_dtoa_r+0xb3a>
 8003bd4:	9b01      	ldr	r3, [sp, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bfc8      	it	gt
 8003bda:	461d      	movgt	r5, r3
 8003bdc:	9b00      	ldr	r3, [sp, #0]
 8003bde:	bfd8      	it	le
 8003be0:	2501      	movle	r5, #1
 8003be2:	441d      	add	r5, r3
 8003be4:	f04f 0800 	mov.w	r8, #0
 8003be8:	4651      	mov	r1, sl
 8003bea:	2201      	movs	r2, #1
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 fb41 	bl	8004274 <__lshift>
 8003bf2:	4631      	mov	r1, r6
 8003bf4:	4682      	mov	sl, r0
 8003bf6:	f000 fba9 	bl	800434c <__mcmp>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	dc96      	bgt.n	8003b2c <_dtoa_r+0xabc>
 8003bfe:	d102      	bne.n	8003c06 <_dtoa_r+0xb96>
 8003c00:	f019 0f01 	tst.w	r9, #1
 8003c04:	d192      	bne.n	8003b2c <_dtoa_r+0xabc>
 8003c06:	462b      	mov	r3, r5
 8003c08:	461d      	mov	r5, r3
 8003c0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c0e:	2a30      	cmp	r2, #48	; 0x30
 8003c10:	d0fa      	beq.n	8003c08 <_dtoa_r+0xb98>
 8003c12:	e6dd      	b.n	80039d0 <_dtoa_r+0x960>
 8003c14:	9a00      	ldr	r2, [sp, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d189      	bne.n	8003b2e <_dtoa_r+0xabe>
 8003c1a:	f10b 0b01 	add.w	fp, fp, #1
 8003c1e:	2331      	movs	r3, #49	; 0x31
 8003c20:	e796      	b.n	8003b50 <_dtoa_r+0xae0>
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <_dtoa_r+0xbdc>)
 8003c24:	f7ff ba99 	b.w	800315a <_dtoa_r+0xea>
 8003c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f47f aa6d 	bne.w	800310a <_dtoa_r+0x9a>
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <_dtoa_r+0xbe0>)
 8003c32:	f7ff ba92 	b.w	800315a <_dtoa_r+0xea>
 8003c36:	9b01      	ldr	r3, [sp, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	dcb5      	bgt.n	8003ba8 <_dtoa_r+0xb38>
 8003c3c:	9b07      	ldr	r3, [sp, #28]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	f73f aeb1 	bgt.w	80039a6 <_dtoa_r+0x936>
 8003c44:	e7b0      	b.n	8003ba8 <_dtoa_r+0xb38>
 8003c46:	bf00      	nop
 8003c48:	08005ec8 	.word	0x08005ec8
 8003c4c:	08005e28 	.word	0x08005e28
 8003c50:	08005e4c 	.word	0x08005e4c

08003c54 <_free_r>:
 8003c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d044      	beq.n	8003ce4 <_free_r+0x90>
 8003c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c5e:	9001      	str	r0, [sp, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f1a1 0404 	sub.w	r4, r1, #4
 8003c66:	bfb8      	it	lt
 8003c68:	18e4      	addlt	r4, r4, r3
 8003c6a:	f000 f8e7 	bl	8003e3c <__malloc_lock>
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <_free_r+0x94>)
 8003c70:	9801      	ldr	r0, [sp, #4]
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	b933      	cbnz	r3, 8003c84 <_free_r+0x30>
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	6014      	str	r4, [r2, #0]
 8003c7a:	b003      	add	sp, #12
 8003c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c80:	f000 b8e2 	b.w	8003e48 <__malloc_unlock>
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d908      	bls.n	8003c9a <_free_r+0x46>
 8003c88:	6825      	ldr	r5, [r4, #0]
 8003c8a:	1961      	adds	r1, r4, r5
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf01      	itttt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	1949      	addeq	r1, r1, r5
 8003c96:	6021      	streq	r1, [r4, #0]
 8003c98:	e7ed      	b.n	8003c76 <_free_r+0x22>
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b10b      	cbz	r3, 8003ca4 <_free_r+0x50>
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	d9fa      	bls.n	8003c9a <_free_r+0x46>
 8003ca4:	6811      	ldr	r1, [r2, #0]
 8003ca6:	1855      	adds	r5, r2, r1
 8003ca8:	42a5      	cmp	r5, r4
 8003caa:	d10b      	bne.n	8003cc4 <_free_r+0x70>
 8003cac:	6824      	ldr	r4, [r4, #0]
 8003cae:	4421      	add	r1, r4
 8003cb0:	1854      	adds	r4, r2, r1
 8003cb2:	42a3      	cmp	r3, r4
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	d1e0      	bne.n	8003c7a <_free_r+0x26>
 8003cb8:	681c      	ldr	r4, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	6053      	str	r3, [r2, #4]
 8003cbe:	440c      	add	r4, r1
 8003cc0:	6014      	str	r4, [r2, #0]
 8003cc2:	e7da      	b.n	8003c7a <_free_r+0x26>
 8003cc4:	d902      	bls.n	8003ccc <_free_r+0x78>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	6003      	str	r3, [r0, #0]
 8003cca:	e7d6      	b.n	8003c7a <_free_r+0x26>
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	1961      	adds	r1, r4, r5
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	bf04      	itt	eq
 8003cd4:	6819      	ldreq	r1, [r3, #0]
 8003cd6:	685b      	ldreq	r3, [r3, #4]
 8003cd8:	6063      	str	r3, [r4, #4]
 8003cda:	bf04      	itt	eq
 8003cdc:	1949      	addeq	r1, r1, r5
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	6054      	str	r4, [r2, #4]
 8003ce2:	e7ca      	b.n	8003c7a <_free_r+0x26>
 8003ce4:	b003      	add	sp, #12
 8003ce6:	bd30      	pop	{r4, r5, pc}
 8003ce8:	20000848 	.word	0x20000848

08003cec <malloc>:
 8003cec:	4b02      	ldr	r3, [pc, #8]	; (8003cf8 <malloc+0xc>)
 8003cee:	4601      	mov	r1, r0
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	f000 b823 	b.w	8003d3c <_malloc_r>
 8003cf6:	bf00      	nop
 8003cf8:	20000568 	.word	0x20000568

08003cfc <sbrk_aligned>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4e0e      	ldr	r6, [pc, #56]	; (8003d38 <sbrk_aligned+0x3c>)
 8003d00:	460c      	mov	r4, r1
 8003d02:	6831      	ldr	r1, [r6, #0]
 8003d04:	4605      	mov	r5, r0
 8003d06:	b911      	cbnz	r1, 8003d0e <sbrk_aligned+0x12>
 8003d08:	f000 fcce 	bl	80046a8 <_sbrk_r>
 8003d0c:	6030      	str	r0, [r6, #0]
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 fcc9 	bl	80046a8 <_sbrk_r>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d00a      	beq.n	8003d30 <sbrk_aligned+0x34>
 8003d1a:	1cc4      	adds	r4, r0, #3
 8003d1c:	f024 0403 	bic.w	r4, r4, #3
 8003d20:	42a0      	cmp	r0, r4
 8003d22:	d007      	beq.n	8003d34 <sbrk_aligned+0x38>
 8003d24:	1a21      	subs	r1, r4, r0
 8003d26:	4628      	mov	r0, r5
 8003d28:	f000 fcbe 	bl	80046a8 <_sbrk_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d101      	bne.n	8003d34 <sbrk_aligned+0x38>
 8003d30:	f04f 34ff 	mov.w	r4, #4294967295
 8003d34:	4620      	mov	r0, r4
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	2000084c 	.word	0x2000084c

08003d3c <_malloc_r>:
 8003d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d40:	1ccd      	adds	r5, r1, #3
 8003d42:	f025 0503 	bic.w	r5, r5, #3
 8003d46:	3508      	adds	r5, #8
 8003d48:	2d0c      	cmp	r5, #12
 8003d4a:	bf38      	it	cc
 8003d4c:	250c      	movcc	r5, #12
 8003d4e:	2d00      	cmp	r5, #0
 8003d50:	4607      	mov	r7, r0
 8003d52:	db01      	blt.n	8003d58 <_malloc_r+0x1c>
 8003d54:	42a9      	cmp	r1, r5
 8003d56:	d905      	bls.n	8003d64 <_malloc_r+0x28>
 8003d58:	230c      	movs	r3, #12
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	4630      	mov	r0, r6
 8003d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e38 <_malloc_r+0xfc>
 8003d68:	f000 f868 	bl	8003e3c <__malloc_lock>
 8003d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d70:	461c      	mov	r4, r3
 8003d72:	bb5c      	cbnz	r4, 8003dcc <_malloc_r+0x90>
 8003d74:	4629      	mov	r1, r5
 8003d76:	4638      	mov	r0, r7
 8003d78:	f7ff ffc0 	bl	8003cfc <sbrk_aligned>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	4604      	mov	r4, r0
 8003d80:	d155      	bne.n	8003e2e <_malloc_r+0xf2>
 8003d82:	f8d8 4000 	ldr.w	r4, [r8]
 8003d86:	4626      	mov	r6, r4
 8003d88:	2e00      	cmp	r6, #0
 8003d8a:	d145      	bne.n	8003e18 <_malloc_r+0xdc>
 8003d8c:	2c00      	cmp	r4, #0
 8003d8e:	d048      	beq.n	8003e22 <_malloc_r+0xe6>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	4631      	mov	r1, r6
 8003d94:	4638      	mov	r0, r7
 8003d96:	eb04 0903 	add.w	r9, r4, r3
 8003d9a:	f000 fc85 	bl	80046a8 <_sbrk_r>
 8003d9e:	4581      	cmp	r9, r0
 8003da0:	d13f      	bne.n	8003e22 <_malloc_r+0xe6>
 8003da2:	6821      	ldr	r1, [r4, #0]
 8003da4:	1a6d      	subs	r5, r5, r1
 8003da6:	4629      	mov	r1, r5
 8003da8:	4638      	mov	r0, r7
 8003daa:	f7ff ffa7 	bl	8003cfc <sbrk_aligned>
 8003dae:	3001      	adds	r0, #1
 8003db0:	d037      	beq.n	8003e22 <_malloc_r+0xe6>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	442b      	add	r3, r5
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	f8d8 3000 	ldr.w	r3, [r8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d038      	beq.n	8003e32 <_malloc_r+0xf6>
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	42a2      	cmp	r2, r4
 8003dc4:	d12b      	bne.n	8003e1e <_malloc_r+0xe2>
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	e00f      	b.n	8003dec <_malloc_r+0xb0>
 8003dcc:	6822      	ldr	r2, [r4, #0]
 8003dce:	1b52      	subs	r2, r2, r5
 8003dd0:	d41f      	bmi.n	8003e12 <_malloc_r+0xd6>
 8003dd2:	2a0b      	cmp	r2, #11
 8003dd4:	d917      	bls.n	8003e06 <_malloc_r+0xca>
 8003dd6:	1961      	adds	r1, r4, r5
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	6025      	str	r5, [r4, #0]
 8003ddc:	bf18      	it	ne
 8003dde:	6059      	strne	r1, [r3, #4]
 8003de0:	6863      	ldr	r3, [r4, #4]
 8003de2:	bf08      	it	eq
 8003de4:	f8c8 1000 	streq.w	r1, [r8]
 8003de8:	5162      	str	r2, [r4, r5]
 8003dea:	604b      	str	r3, [r1, #4]
 8003dec:	4638      	mov	r0, r7
 8003dee:	f104 060b 	add.w	r6, r4, #11
 8003df2:	f000 f829 	bl	8003e48 <__malloc_unlock>
 8003df6:	f026 0607 	bic.w	r6, r6, #7
 8003dfa:	1d23      	adds	r3, r4, #4
 8003dfc:	1af2      	subs	r2, r6, r3
 8003dfe:	d0ae      	beq.n	8003d5e <_malloc_r+0x22>
 8003e00:	1b9b      	subs	r3, r3, r6
 8003e02:	50a3      	str	r3, [r4, r2]
 8003e04:	e7ab      	b.n	8003d5e <_malloc_r+0x22>
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	6862      	ldr	r2, [r4, #4]
 8003e0a:	d1dd      	bne.n	8003dc8 <_malloc_r+0x8c>
 8003e0c:	f8c8 2000 	str.w	r2, [r8]
 8003e10:	e7ec      	b.n	8003dec <_malloc_r+0xb0>
 8003e12:	4623      	mov	r3, r4
 8003e14:	6864      	ldr	r4, [r4, #4]
 8003e16:	e7ac      	b.n	8003d72 <_malloc_r+0x36>
 8003e18:	4634      	mov	r4, r6
 8003e1a:	6876      	ldr	r6, [r6, #4]
 8003e1c:	e7b4      	b.n	8003d88 <_malloc_r+0x4c>
 8003e1e:	4613      	mov	r3, r2
 8003e20:	e7cc      	b.n	8003dbc <_malloc_r+0x80>
 8003e22:	230c      	movs	r3, #12
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4638      	mov	r0, r7
 8003e28:	f000 f80e 	bl	8003e48 <__malloc_unlock>
 8003e2c:	e797      	b.n	8003d5e <_malloc_r+0x22>
 8003e2e:	6025      	str	r5, [r4, #0]
 8003e30:	e7dc      	b.n	8003dec <_malloc_r+0xb0>
 8003e32:	605b      	str	r3, [r3, #4]
 8003e34:	deff      	udf	#255	; 0xff
 8003e36:	bf00      	nop
 8003e38:	20000848 	.word	0x20000848

08003e3c <__malloc_lock>:
 8003e3c:	4801      	ldr	r0, [pc, #4]	; (8003e44 <__malloc_lock+0x8>)
 8003e3e:	f7ff b88a 	b.w	8002f56 <__retarget_lock_acquire_recursive>
 8003e42:	bf00      	nop
 8003e44:	20000844 	.word	0x20000844

08003e48 <__malloc_unlock>:
 8003e48:	4801      	ldr	r0, [pc, #4]	; (8003e50 <__malloc_unlock+0x8>)
 8003e4a:	f7ff b885 	b.w	8002f58 <__retarget_lock_release_recursive>
 8003e4e:	bf00      	nop
 8003e50:	20000844 	.word	0x20000844

08003e54 <_Balloc>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	69c6      	ldr	r6, [r0, #28]
 8003e58:	4604      	mov	r4, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	b976      	cbnz	r6, 8003e7c <_Balloc+0x28>
 8003e5e:	2010      	movs	r0, #16
 8003e60:	f7ff ff44 	bl	8003cec <malloc>
 8003e64:	4602      	mov	r2, r0
 8003e66:	61e0      	str	r0, [r4, #28]
 8003e68:	b920      	cbnz	r0, 8003e74 <_Balloc+0x20>
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <_Balloc+0x78>)
 8003e6c:	4818      	ldr	r0, [pc, #96]	; (8003ed0 <_Balloc+0x7c>)
 8003e6e:	216b      	movs	r1, #107	; 0x6b
 8003e70:	f000 fc38 	bl	80046e4 <__assert_func>
 8003e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e78:	6006      	str	r6, [r0, #0]
 8003e7a:	60c6      	str	r6, [r0, #12]
 8003e7c:	69e6      	ldr	r6, [r4, #28]
 8003e7e:	68f3      	ldr	r3, [r6, #12]
 8003e80:	b183      	cbz	r3, 8003ea4 <_Balloc+0x50>
 8003e82:	69e3      	ldr	r3, [r4, #28]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003e8a:	b9b8      	cbnz	r0, 8003ebc <_Balloc+0x68>
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8003e92:	1d72      	adds	r2, r6, #5
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 fc42 	bl	8004720 <_calloc_r>
 8003e9c:	b160      	cbz	r0, 8003eb8 <_Balloc+0x64>
 8003e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003ea2:	e00e      	b.n	8003ec2 <_Balloc+0x6e>
 8003ea4:	2221      	movs	r2, #33	; 0x21
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f000 fc39 	bl	8004720 <_calloc_r>
 8003eae:	69e3      	ldr	r3, [r4, #28]
 8003eb0:	60f0      	str	r0, [r6, #12]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e4      	bne.n	8003e82 <_Balloc+0x2e>
 8003eb8:	2000      	movs	r0, #0
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	6802      	ldr	r2, [r0, #0]
 8003ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003ec8:	e7f7      	b.n	8003eba <_Balloc+0x66>
 8003eca:	bf00      	nop
 8003ecc:	08005e59 	.word	0x08005e59
 8003ed0:	08005ed9 	.word	0x08005ed9

08003ed4 <_Bfree>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	69c6      	ldr	r6, [r0, #28]
 8003ed8:	4605      	mov	r5, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	b976      	cbnz	r6, 8003efc <_Bfree+0x28>
 8003ede:	2010      	movs	r0, #16
 8003ee0:	f7ff ff04 	bl	8003cec <malloc>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	61e8      	str	r0, [r5, #28]
 8003ee8:	b920      	cbnz	r0, 8003ef4 <_Bfree+0x20>
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <_Bfree+0x3c>)
 8003eec:	4809      	ldr	r0, [pc, #36]	; (8003f14 <_Bfree+0x40>)
 8003eee:	218f      	movs	r1, #143	; 0x8f
 8003ef0:	f000 fbf8 	bl	80046e4 <__assert_func>
 8003ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ef8:	6006      	str	r6, [r0, #0]
 8003efa:	60c6      	str	r6, [r0, #12]
 8003efc:	b13c      	cbz	r4, 8003f0e <_Bfree+0x3a>
 8003efe:	69eb      	ldr	r3, [r5, #28]
 8003f00:	6862      	ldr	r2, [r4, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f08:	6021      	str	r1, [r4, #0]
 8003f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	08005e59 	.word	0x08005e59
 8003f14:	08005ed9 	.word	0x08005ed9

08003f18 <__multadd>:
 8003f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1c:	690d      	ldr	r5, [r1, #16]
 8003f1e:	4607      	mov	r7, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	461e      	mov	r6, r3
 8003f24:	f101 0c14 	add.w	ip, r1, #20
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8003f2e:	b299      	uxth	r1, r3
 8003f30:	fb02 6101 	mla	r1, r2, r1, r6
 8003f34:	0c1e      	lsrs	r6, r3, #16
 8003f36:	0c0b      	lsrs	r3, r1, #16
 8003f38:	fb02 3306 	mla	r3, r2, r6, r3
 8003f3c:	b289      	uxth	r1, r1
 8003f3e:	3001      	adds	r0, #1
 8003f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003f44:	4285      	cmp	r5, r0
 8003f46:	f84c 1b04 	str.w	r1, [ip], #4
 8003f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003f4e:	dcec      	bgt.n	8003f2a <__multadd+0x12>
 8003f50:	b30e      	cbz	r6, 8003f96 <__multadd+0x7e>
 8003f52:	68a3      	ldr	r3, [r4, #8]
 8003f54:	42ab      	cmp	r3, r5
 8003f56:	dc19      	bgt.n	8003f8c <__multadd+0x74>
 8003f58:	6861      	ldr	r1, [r4, #4]
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	3101      	adds	r1, #1
 8003f5e:	f7ff ff79 	bl	8003e54 <_Balloc>
 8003f62:	4680      	mov	r8, r0
 8003f64:	b928      	cbnz	r0, 8003f72 <__multadd+0x5a>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <__multadd+0x84>)
 8003f6a:	480d      	ldr	r0, [pc, #52]	; (8003fa0 <__multadd+0x88>)
 8003f6c:	21ba      	movs	r1, #186	; 0xba
 8003f6e:	f000 fbb9 	bl	80046e4 <__assert_func>
 8003f72:	6922      	ldr	r2, [r4, #16]
 8003f74:	3202      	adds	r2, #2
 8003f76:	f104 010c 	add.w	r1, r4, #12
 8003f7a:	0092      	lsls	r2, r2, #2
 8003f7c:	300c      	adds	r0, #12
 8003f7e:	f000 fba3 	bl	80046c8 <memcpy>
 8003f82:	4621      	mov	r1, r4
 8003f84:	4638      	mov	r0, r7
 8003f86:	f7ff ffa5 	bl	8003ed4 <_Bfree>
 8003f8a:	4644      	mov	r4, r8
 8003f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f90:	3501      	adds	r5, #1
 8003f92:	615e      	str	r6, [r3, #20]
 8003f94:	6125      	str	r5, [r4, #16]
 8003f96:	4620      	mov	r0, r4
 8003f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f9c:	08005ec8 	.word	0x08005ec8
 8003fa0:	08005ed9 	.word	0x08005ed9

08003fa4 <__hi0bits>:
 8003fa4:	0c03      	lsrs	r3, r0, #16
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	b9d3      	cbnz	r3, 8003fe0 <__hi0bits+0x3c>
 8003faa:	0400      	lsls	r0, r0, #16
 8003fac:	2310      	movs	r3, #16
 8003fae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003fb2:	bf04      	itt	eq
 8003fb4:	0200      	lsleq	r0, r0, #8
 8003fb6:	3308      	addeq	r3, #8
 8003fb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003fbc:	bf04      	itt	eq
 8003fbe:	0100      	lsleq	r0, r0, #4
 8003fc0:	3304      	addeq	r3, #4
 8003fc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003fc6:	bf04      	itt	eq
 8003fc8:	0080      	lsleq	r0, r0, #2
 8003fca:	3302      	addeq	r3, #2
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	db05      	blt.n	8003fdc <__hi0bits+0x38>
 8003fd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003fd4:	f103 0301 	add.w	r3, r3, #1
 8003fd8:	bf08      	it	eq
 8003fda:	2320      	moveq	r3, #32
 8003fdc:	4618      	mov	r0, r3
 8003fde:	4770      	bx	lr
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e7e4      	b.n	8003fae <__hi0bits+0xa>

08003fe4 <__lo0bits>:
 8003fe4:	6803      	ldr	r3, [r0, #0]
 8003fe6:	f013 0207 	ands.w	r2, r3, #7
 8003fea:	d00c      	beq.n	8004006 <__lo0bits+0x22>
 8003fec:	07d9      	lsls	r1, r3, #31
 8003fee:	d422      	bmi.n	8004036 <__lo0bits+0x52>
 8003ff0:	079a      	lsls	r2, r3, #30
 8003ff2:	bf49      	itett	mi
 8003ff4:	085b      	lsrmi	r3, r3, #1
 8003ff6:	089b      	lsrpl	r3, r3, #2
 8003ff8:	6003      	strmi	r3, [r0, #0]
 8003ffa:	2201      	movmi	r2, #1
 8003ffc:	bf5c      	itt	pl
 8003ffe:	6003      	strpl	r3, [r0, #0]
 8004000:	2202      	movpl	r2, #2
 8004002:	4610      	mov	r0, r2
 8004004:	4770      	bx	lr
 8004006:	b299      	uxth	r1, r3
 8004008:	b909      	cbnz	r1, 800400e <__lo0bits+0x2a>
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	2210      	movs	r2, #16
 800400e:	b2d9      	uxtb	r1, r3
 8004010:	b909      	cbnz	r1, 8004016 <__lo0bits+0x32>
 8004012:	3208      	adds	r2, #8
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	0719      	lsls	r1, r3, #28
 8004018:	bf04      	itt	eq
 800401a:	091b      	lsreq	r3, r3, #4
 800401c:	3204      	addeq	r2, #4
 800401e:	0799      	lsls	r1, r3, #30
 8004020:	bf04      	itt	eq
 8004022:	089b      	lsreq	r3, r3, #2
 8004024:	3202      	addeq	r2, #2
 8004026:	07d9      	lsls	r1, r3, #31
 8004028:	d403      	bmi.n	8004032 <__lo0bits+0x4e>
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	f102 0201 	add.w	r2, r2, #1
 8004030:	d003      	beq.n	800403a <__lo0bits+0x56>
 8004032:	6003      	str	r3, [r0, #0]
 8004034:	e7e5      	b.n	8004002 <__lo0bits+0x1e>
 8004036:	2200      	movs	r2, #0
 8004038:	e7e3      	b.n	8004002 <__lo0bits+0x1e>
 800403a:	2220      	movs	r2, #32
 800403c:	e7e1      	b.n	8004002 <__lo0bits+0x1e>
	...

08004040 <__i2b>:
 8004040:	b510      	push	{r4, lr}
 8004042:	460c      	mov	r4, r1
 8004044:	2101      	movs	r1, #1
 8004046:	f7ff ff05 	bl	8003e54 <_Balloc>
 800404a:	4602      	mov	r2, r0
 800404c:	b928      	cbnz	r0, 800405a <__i2b+0x1a>
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <__i2b+0x24>)
 8004050:	4805      	ldr	r0, [pc, #20]	; (8004068 <__i2b+0x28>)
 8004052:	f240 1145 	movw	r1, #325	; 0x145
 8004056:	f000 fb45 	bl	80046e4 <__assert_func>
 800405a:	2301      	movs	r3, #1
 800405c:	6144      	str	r4, [r0, #20]
 800405e:	6103      	str	r3, [r0, #16]
 8004060:	bd10      	pop	{r4, pc}
 8004062:	bf00      	nop
 8004064:	08005ec8 	.word	0x08005ec8
 8004068:	08005ed9 	.word	0x08005ed9

0800406c <__multiply>:
 800406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004070:	4691      	mov	r9, r2
 8004072:	690a      	ldr	r2, [r1, #16]
 8004074:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004078:	429a      	cmp	r2, r3
 800407a:	bfb8      	it	lt
 800407c:	460b      	movlt	r3, r1
 800407e:	460c      	mov	r4, r1
 8004080:	bfbc      	itt	lt
 8004082:	464c      	movlt	r4, r9
 8004084:	4699      	movlt	r9, r3
 8004086:	6927      	ldr	r7, [r4, #16]
 8004088:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800408c:	68a3      	ldr	r3, [r4, #8]
 800408e:	6861      	ldr	r1, [r4, #4]
 8004090:	eb07 060a 	add.w	r6, r7, sl
 8004094:	42b3      	cmp	r3, r6
 8004096:	b085      	sub	sp, #20
 8004098:	bfb8      	it	lt
 800409a:	3101      	addlt	r1, #1
 800409c:	f7ff feda 	bl	8003e54 <_Balloc>
 80040a0:	b930      	cbnz	r0, 80040b0 <__multiply+0x44>
 80040a2:	4602      	mov	r2, r0
 80040a4:	4b44      	ldr	r3, [pc, #272]	; (80041b8 <__multiply+0x14c>)
 80040a6:	4845      	ldr	r0, [pc, #276]	; (80041bc <__multiply+0x150>)
 80040a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80040ac:	f000 fb1a 	bl	80046e4 <__assert_func>
 80040b0:	f100 0514 	add.w	r5, r0, #20
 80040b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80040b8:	462b      	mov	r3, r5
 80040ba:	2200      	movs	r2, #0
 80040bc:	4543      	cmp	r3, r8
 80040be:	d321      	bcc.n	8004104 <__multiply+0x98>
 80040c0:	f104 0314 	add.w	r3, r4, #20
 80040c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80040c8:	f109 0314 	add.w	r3, r9, #20
 80040cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80040d0:	9202      	str	r2, [sp, #8]
 80040d2:	1b3a      	subs	r2, r7, r4
 80040d4:	3a15      	subs	r2, #21
 80040d6:	f022 0203 	bic.w	r2, r2, #3
 80040da:	3204      	adds	r2, #4
 80040dc:	f104 0115 	add.w	r1, r4, #21
 80040e0:	428f      	cmp	r7, r1
 80040e2:	bf38      	it	cc
 80040e4:	2204      	movcc	r2, #4
 80040e6:	9201      	str	r2, [sp, #4]
 80040e8:	9a02      	ldr	r2, [sp, #8]
 80040ea:	9303      	str	r3, [sp, #12]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d80c      	bhi.n	800410a <__multiply+0x9e>
 80040f0:	2e00      	cmp	r6, #0
 80040f2:	dd03      	ble.n	80040fc <__multiply+0x90>
 80040f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05b      	beq.n	80041b4 <__multiply+0x148>
 80040fc:	6106      	str	r6, [r0, #16]
 80040fe:	b005      	add	sp, #20
 8004100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004104:	f843 2b04 	str.w	r2, [r3], #4
 8004108:	e7d8      	b.n	80040bc <__multiply+0x50>
 800410a:	f8b3 a000 	ldrh.w	sl, [r3]
 800410e:	f1ba 0f00 	cmp.w	sl, #0
 8004112:	d024      	beq.n	800415e <__multiply+0xf2>
 8004114:	f104 0e14 	add.w	lr, r4, #20
 8004118:	46a9      	mov	r9, r5
 800411a:	f04f 0c00 	mov.w	ip, #0
 800411e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004122:	f8d9 1000 	ldr.w	r1, [r9]
 8004126:	fa1f fb82 	uxth.w	fp, r2
 800412a:	b289      	uxth	r1, r1
 800412c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004130:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004134:	f8d9 2000 	ldr.w	r2, [r9]
 8004138:	4461      	add	r1, ip
 800413a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800413e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004142:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004146:	b289      	uxth	r1, r1
 8004148:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800414c:	4577      	cmp	r7, lr
 800414e:	f849 1b04 	str.w	r1, [r9], #4
 8004152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004156:	d8e2      	bhi.n	800411e <__multiply+0xb2>
 8004158:	9a01      	ldr	r2, [sp, #4]
 800415a:	f845 c002 	str.w	ip, [r5, r2]
 800415e:	9a03      	ldr	r2, [sp, #12]
 8004160:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004164:	3304      	adds	r3, #4
 8004166:	f1b9 0f00 	cmp.w	r9, #0
 800416a:	d021      	beq.n	80041b0 <__multiply+0x144>
 800416c:	6829      	ldr	r1, [r5, #0]
 800416e:	f104 0c14 	add.w	ip, r4, #20
 8004172:	46ae      	mov	lr, r5
 8004174:	f04f 0a00 	mov.w	sl, #0
 8004178:	f8bc b000 	ldrh.w	fp, [ip]
 800417c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004180:	fb09 220b 	mla	r2, r9, fp, r2
 8004184:	4452      	add	r2, sl
 8004186:	b289      	uxth	r1, r1
 8004188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800418c:	f84e 1b04 	str.w	r1, [lr], #4
 8004190:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004194:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004198:	f8be 1000 	ldrh.w	r1, [lr]
 800419c:	fb09 110a 	mla	r1, r9, sl, r1
 80041a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80041a4:	4567      	cmp	r7, ip
 80041a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80041aa:	d8e5      	bhi.n	8004178 <__multiply+0x10c>
 80041ac:	9a01      	ldr	r2, [sp, #4]
 80041ae:	50a9      	str	r1, [r5, r2]
 80041b0:	3504      	adds	r5, #4
 80041b2:	e799      	b.n	80040e8 <__multiply+0x7c>
 80041b4:	3e01      	subs	r6, #1
 80041b6:	e79b      	b.n	80040f0 <__multiply+0x84>
 80041b8:	08005ec8 	.word	0x08005ec8
 80041bc:	08005ed9 	.word	0x08005ed9

080041c0 <__pow5mult>:
 80041c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c4:	4615      	mov	r5, r2
 80041c6:	f012 0203 	ands.w	r2, r2, #3
 80041ca:	4606      	mov	r6, r0
 80041cc:	460f      	mov	r7, r1
 80041ce:	d007      	beq.n	80041e0 <__pow5mult+0x20>
 80041d0:	4c25      	ldr	r4, [pc, #148]	; (8004268 <__pow5mult+0xa8>)
 80041d2:	3a01      	subs	r2, #1
 80041d4:	2300      	movs	r3, #0
 80041d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80041da:	f7ff fe9d 	bl	8003f18 <__multadd>
 80041de:	4607      	mov	r7, r0
 80041e0:	10ad      	asrs	r5, r5, #2
 80041e2:	d03d      	beq.n	8004260 <__pow5mult+0xa0>
 80041e4:	69f4      	ldr	r4, [r6, #28]
 80041e6:	b97c      	cbnz	r4, 8004208 <__pow5mult+0x48>
 80041e8:	2010      	movs	r0, #16
 80041ea:	f7ff fd7f 	bl	8003cec <malloc>
 80041ee:	4602      	mov	r2, r0
 80041f0:	61f0      	str	r0, [r6, #28]
 80041f2:	b928      	cbnz	r0, 8004200 <__pow5mult+0x40>
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <__pow5mult+0xac>)
 80041f6:	481e      	ldr	r0, [pc, #120]	; (8004270 <__pow5mult+0xb0>)
 80041f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80041fc:	f000 fa72 	bl	80046e4 <__assert_func>
 8004200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004204:	6004      	str	r4, [r0, #0]
 8004206:	60c4      	str	r4, [r0, #12]
 8004208:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800420c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004210:	b94c      	cbnz	r4, 8004226 <__pow5mult+0x66>
 8004212:	f240 2171 	movw	r1, #625	; 0x271
 8004216:	4630      	mov	r0, r6
 8004218:	f7ff ff12 	bl	8004040 <__i2b>
 800421c:	2300      	movs	r3, #0
 800421e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004222:	4604      	mov	r4, r0
 8004224:	6003      	str	r3, [r0, #0]
 8004226:	f04f 0900 	mov.w	r9, #0
 800422a:	07eb      	lsls	r3, r5, #31
 800422c:	d50a      	bpl.n	8004244 <__pow5mult+0x84>
 800422e:	4639      	mov	r1, r7
 8004230:	4622      	mov	r2, r4
 8004232:	4630      	mov	r0, r6
 8004234:	f7ff ff1a 	bl	800406c <__multiply>
 8004238:	4639      	mov	r1, r7
 800423a:	4680      	mov	r8, r0
 800423c:	4630      	mov	r0, r6
 800423e:	f7ff fe49 	bl	8003ed4 <_Bfree>
 8004242:	4647      	mov	r7, r8
 8004244:	106d      	asrs	r5, r5, #1
 8004246:	d00b      	beq.n	8004260 <__pow5mult+0xa0>
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	b938      	cbnz	r0, 800425c <__pow5mult+0x9c>
 800424c:	4622      	mov	r2, r4
 800424e:	4621      	mov	r1, r4
 8004250:	4630      	mov	r0, r6
 8004252:	f7ff ff0b 	bl	800406c <__multiply>
 8004256:	6020      	str	r0, [r4, #0]
 8004258:	f8c0 9000 	str.w	r9, [r0]
 800425c:	4604      	mov	r4, r0
 800425e:	e7e4      	b.n	800422a <__pow5mult+0x6a>
 8004260:	4638      	mov	r0, r7
 8004262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004266:	bf00      	nop
 8004268:	08006028 	.word	0x08006028
 800426c:	08005e59 	.word	0x08005e59
 8004270:	08005ed9 	.word	0x08005ed9

08004274 <__lshift>:
 8004274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004278:	460c      	mov	r4, r1
 800427a:	6849      	ldr	r1, [r1, #4]
 800427c:	6923      	ldr	r3, [r4, #16]
 800427e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004282:	68a3      	ldr	r3, [r4, #8]
 8004284:	4607      	mov	r7, r0
 8004286:	4691      	mov	r9, r2
 8004288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800428c:	f108 0601 	add.w	r6, r8, #1
 8004290:	42b3      	cmp	r3, r6
 8004292:	db0b      	blt.n	80042ac <__lshift+0x38>
 8004294:	4638      	mov	r0, r7
 8004296:	f7ff fddd 	bl	8003e54 <_Balloc>
 800429a:	4605      	mov	r5, r0
 800429c:	b948      	cbnz	r0, 80042b2 <__lshift+0x3e>
 800429e:	4602      	mov	r2, r0
 80042a0:	4b28      	ldr	r3, [pc, #160]	; (8004344 <__lshift+0xd0>)
 80042a2:	4829      	ldr	r0, [pc, #164]	; (8004348 <__lshift+0xd4>)
 80042a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80042a8:	f000 fa1c 	bl	80046e4 <__assert_func>
 80042ac:	3101      	adds	r1, #1
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	e7ee      	b.n	8004290 <__lshift+0x1c>
 80042b2:	2300      	movs	r3, #0
 80042b4:	f100 0114 	add.w	r1, r0, #20
 80042b8:	f100 0210 	add.w	r2, r0, #16
 80042bc:	4618      	mov	r0, r3
 80042be:	4553      	cmp	r3, sl
 80042c0:	db33      	blt.n	800432a <__lshift+0xb6>
 80042c2:	6920      	ldr	r0, [r4, #16]
 80042c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80042c8:	f104 0314 	add.w	r3, r4, #20
 80042cc:	f019 091f 	ands.w	r9, r9, #31
 80042d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80042d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80042d8:	d02b      	beq.n	8004332 <__lshift+0xbe>
 80042da:	f1c9 0e20 	rsb	lr, r9, #32
 80042de:	468a      	mov	sl, r1
 80042e0:	2200      	movs	r2, #0
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	fa00 f009 	lsl.w	r0, r0, r9
 80042e8:	4310      	orrs	r0, r2
 80042ea:	f84a 0b04 	str.w	r0, [sl], #4
 80042ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80042f2:	459c      	cmp	ip, r3
 80042f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80042f8:	d8f3      	bhi.n	80042e2 <__lshift+0x6e>
 80042fa:	ebac 0304 	sub.w	r3, ip, r4
 80042fe:	3b15      	subs	r3, #21
 8004300:	f023 0303 	bic.w	r3, r3, #3
 8004304:	3304      	adds	r3, #4
 8004306:	f104 0015 	add.w	r0, r4, #21
 800430a:	4584      	cmp	ip, r0
 800430c:	bf38      	it	cc
 800430e:	2304      	movcc	r3, #4
 8004310:	50ca      	str	r2, [r1, r3]
 8004312:	b10a      	cbz	r2, 8004318 <__lshift+0xa4>
 8004314:	f108 0602 	add.w	r6, r8, #2
 8004318:	3e01      	subs	r6, #1
 800431a:	4638      	mov	r0, r7
 800431c:	612e      	str	r6, [r5, #16]
 800431e:	4621      	mov	r1, r4
 8004320:	f7ff fdd8 	bl	8003ed4 <_Bfree>
 8004324:	4628      	mov	r0, r5
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	f842 0f04 	str.w	r0, [r2, #4]!
 800432e:	3301      	adds	r3, #1
 8004330:	e7c5      	b.n	80042be <__lshift+0x4a>
 8004332:	3904      	subs	r1, #4
 8004334:	f853 2b04 	ldr.w	r2, [r3], #4
 8004338:	f841 2f04 	str.w	r2, [r1, #4]!
 800433c:	459c      	cmp	ip, r3
 800433e:	d8f9      	bhi.n	8004334 <__lshift+0xc0>
 8004340:	e7ea      	b.n	8004318 <__lshift+0xa4>
 8004342:	bf00      	nop
 8004344:	08005ec8 	.word	0x08005ec8
 8004348:	08005ed9 	.word	0x08005ed9

0800434c <__mcmp>:
 800434c:	b530      	push	{r4, r5, lr}
 800434e:	6902      	ldr	r2, [r0, #16]
 8004350:	690c      	ldr	r4, [r1, #16]
 8004352:	1b12      	subs	r2, r2, r4
 8004354:	d10e      	bne.n	8004374 <__mcmp+0x28>
 8004356:	f100 0314 	add.w	r3, r0, #20
 800435a:	3114      	adds	r1, #20
 800435c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004360:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004364:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004368:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800436c:	42a5      	cmp	r5, r4
 800436e:	d003      	beq.n	8004378 <__mcmp+0x2c>
 8004370:	d305      	bcc.n	800437e <__mcmp+0x32>
 8004372:	2201      	movs	r2, #1
 8004374:	4610      	mov	r0, r2
 8004376:	bd30      	pop	{r4, r5, pc}
 8004378:	4283      	cmp	r3, r0
 800437a:	d3f3      	bcc.n	8004364 <__mcmp+0x18>
 800437c:	e7fa      	b.n	8004374 <__mcmp+0x28>
 800437e:	f04f 32ff 	mov.w	r2, #4294967295
 8004382:	e7f7      	b.n	8004374 <__mcmp+0x28>

08004384 <__mdiff>:
 8004384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004388:	460c      	mov	r4, r1
 800438a:	4606      	mov	r6, r0
 800438c:	4611      	mov	r1, r2
 800438e:	4620      	mov	r0, r4
 8004390:	4690      	mov	r8, r2
 8004392:	f7ff ffdb 	bl	800434c <__mcmp>
 8004396:	1e05      	subs	r5, r0, #0
 8004398:	d110      	bne.n	80043bc <__mdiff+0x38>
 800439a:	4629      	mov	r1, r5
 800439c:	4630      	mov	r0, r6
 800439e:	f7ff fd59 	bl	8003e54 <_Balloc>
 80043a2:	b930      	cbnz	r0, 80043b2 <__mdiff+0x2e>
 80043a4:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <__mdiff+0x10c>)
 80043a6:	4602      	mov	r2, r0
 80043a8:	f240 2137 	movw	r1, #567	; 0x237
 80043ac:	4839      	ldr	r0, [pc, #228]	; (8004494 <__mdiff+0x110>)
 80043ae:	f000 f999 	bl	80046e4 <__assert_func>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80043b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043bc:	bfa4      	itt	ge
 80043be:	4643      	movge	r3, r8
 80043c0:	46a0      	movge	r8, r4
 80043c2:	4630      	mov	r0, r6
 80043c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80043c8:	bfa6      	itte	ge
 80043ca:	461c      	movge	r4, r3
 80043cc:	2500      	movge	r5, #0
 80043ce:	2501      	movlt	r5, #1
 80043d0:	f7ff fd40 	bl	8003e54 <_Balloc>
 80043d4:	b920      	cbnz	r0, 80043e0 <__mdiff+0x5c>
 80043d6:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <__mdiff+0x10c>)
 80043d8:	4602      	mov	r2, r0
 80043da:	f240 2145 	movw	r1, #581	; 0x245
 80043de:	e7e5      	b.n	80043ac <__mdiff+0x28>
 80043e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80043e4:	6926      	ldr	r6, [r4, #16]
 80043e6:	60c5      	str	r5, [r0, #12]
 80043e8:	f104 0914 	add.w	r9, r4, #20
 80043ec:	f108 0514 	add.w	r5, r8, #20
 80043f0:	f100 0e14 	add.w	lr, r0, #20
 80043f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80043f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80043fc:	f108 0210 	add.w	r2, r8, #16
 8004400:	46f2      	mov	sl, lr
 8004402:	2100      	movs	r1, #0
 8004404:	f859 3b04 	ldr.w	r3, [r9], #4
 8004408:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800440c:	fa11 f88b 	uxtah	r8, r1, fp
 8004410:	b299      	uxth	r1, r3
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	eba8 0801 	sub.w	r8, r8, r1
 8004418:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800441c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004420:	fa1f f888 	uxth.w	r8, r8
 8004424:	1419      	asrs	r1, r3, #16
 8004426:	454e      	cmp	r6, r9
 8004428:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800442c:	f84a 3b04 	str.w	r3, [sl], #4
 8004430:	d8e8      	bhi.n	8004404 <__mdiff+0x80>
 8004432:	1b33      	subs	r3, r6, r4
 8004434:	3b15      	subs	r3, #21
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	3304      	adds	r3, #4
 800443c:	3415      	adds	r4, #21
 800443e:	42a6      	cmp	r6, r4
 8004440:	bf38      	it	cc
 8004442:	2304      	movcc	r3, #4
 8004444:	441d      	add	r5, r3
 8004446:	4473      	add	r3, lr
 8004448:	469e      	mov	lr, r3
 800444a:	462e      	mov	r6, r5
 800444c:	4566      	cmp	r6, ip
 800444e:	d30e      	bcc.n	800446e <__mdiff+0xea>
 8004450:	f10c 0203 	add.w	r2, ip, #3
 8004454:	1b52      	subs	r2, r2, r5
 8004456:	f022 0203 	bic.w	r2, r2, #3
 800445a:	3d03      	subs	r5, #3
 800445c:	45ac      	cmp	ip, r5
 800445e:	bf38      	it	cc
 8004460:	2200      	movcc	r2, #0
 8004462:	4413      	add	r3, r2
 8004464:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004468:	b17a      	cbz	r2, 800448a <__mdiff+0x106>
 800446a:	6107      	str	r7, [r0, #16]
 800446c:	e7a4      	b.n	80043b8 <__mdiff+0x34>
 800446e:	f856 8b04 	ldr.w	r8, [r6], #4
 8004472:	fa11 f288 	uxtah	r2, r1, r8
 8004476:	1414      	asrs	r4, r2, #16
 8004478:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800447c:	b292      	uxth	r2, r2
 800447e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004482:	f84e 2b04 	str.w	r2, [lr], #4
 8004486:	1421      	asrs	r1, r4, #16
 8004488:	e7e0      	b.n	800444c <__mdiff+0xc8>
 800448a:	3f01      	subs	r7, #1
 800448c:	e7ea      	b.n	8004464 <__mdiff+0xe0>
 800448e:	bf00      	nop
 8004490:	08005ec8 	.word	0x08005ec8
 8004494:	08005ed9 	.word	0x08005ed9

08004498 <__d2b>:
 8004498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800449c:	460f      	mov	r7, r1
 800449e:	2101      	movs	r1, #1
 80044a0:	ec59 8b10 	vmov	r8, r9, d0
 80044a4:	4616      	mov	r6, r2
 80044a6:	f7ff fcd5 	bl	8003e54 <_Balloc>
 80044aa:	4604      	mov	r4, r0
 80044ac:	b930      	cbnz	r0, 80044bc <__d2b+0x24>
 80044ae:	4602      	mov	r2, r0
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <__d2b+0xac>)
 80044b2:	4825      	ldr	r0, [pc, #148]	; (8004548 <__d2b+0xb0>)
 80044b4:	f240 310f 	movw	r1, #783	; 0x30f
 80044b8:	f000 f914 	bl	80046e4 <__assert_func>
 80044bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80044c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80044c4:	bb2d      	cbnz	r5, 8004512 <__d2b+0x7a>
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	f1b8 0300 	subs.w	r3, r8, #0
 80044cc:	d026      	beq.n	800451c <__d2b+0x84>
 80044ce:	4668      	mov	r0, sp
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	f7ff fd87 	bl	8003fe4 <__lo0bits>
 80044d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80044da:	b1e8      	cbz	r0, 8004518 <__d2b+0x80>
 80044dc:	f1c0 0320 	rsb	r3, r0, #32
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	430b      	orrs	r3, r1
 80044e6:	40c2      	lsrs	r2, r0
 80044e8:	6163      	str	r3, [r4, #20]
 80044ea:	9201      	str	r2, [sp, #4]
 80044ec:	9b01      	ldr	r3, [sp, #4]
 80044ee:	61a3      	str	r3, [r4, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf14      	ite	ne
 80044f4:	2202      	movne	r2, #2
 80044f6:	2201      	moveq	r2, #1
 80044f8:	6122      	str	r2, [r4, #16]
 80044fa:	b1bd      	cbz	r5, 800452c <__d2b+0x94>
 80044fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004500:	4405      	add	r5, r0
 8004502:	603d      	str	r5, [r7, #0]
 8004504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004508:	6030      	str	r0, [r6, #0]
 800450a:	4620      	mov	r0, r4
 800450c:	b003      	add	sp, #12
 800450e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004516:	e7d6      	b.n	80044c6 <__d2b+0x2e>
 8004518:	6161      	str	r1, [r4, #20]
 800451a:	e7e7      	b.n	80044ec <__d2b+0x54>
 800451c:	a801      	add	r0, sp, #4
 800451e:	f7ff fd61 	bl	8003fe4 <__lo0bits>
 8004522:	9b01      	ldr	r3, [sp, #4]
 8004524:	6163      	str	r3, [r4, #20]
 8004526:	3020      	adds	r0, #32
 8004528:	2201      	movs	r2, #1
 800452a:	e7e5      	b.n	80044f8 <__d2b+0x60>
 800452c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004530:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004534:	6038      	str	r0, [r7, #0]
 8004536:	6918      	ldr	r0, [r3, #16]
 8004538:	f7ff fd34 	bl	8003fa4 <__hi0bits>
 800453c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004540:	e7e2      	b.n	8004508 <__d2b+0x70>
 8004542:	bf00      	nop
 8004544:	08005ec8 	.word	0x08005ec8
 8004548:	08005ed9 	.word	0x08005ed9

0800454c <__sflush_r>:
 800454c:	898a      	ldrh	r2, [r1, #12]
 800454e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004552:	4605      	mov	r5, r0
 8004554:	0710      	lsls	r0, r2, #28
 8004556:	460c      	mov	r4, r1
 8004558:	d458      	bmi.n	800460c <__sflush_r+0xc0>
 800455a:	684b      	ldr	r3, [r1, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	dc05      	bgt.n	800456c <__sflush_r+0x20>
 8004560:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	dc02      	bgt.n	800456c <__sflush_r+0x20>
 8004566:	2000      	movs	r0, #0
 8004568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800456e:	2e00      	cmp	r6, #0
 8004570:	d0f9      	beq.n	8004566 <__sflush_r+0x1a>
 8004572:	2300      	movs	r3, #0
 8004574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004578:	682f      	ldr	r7, [r5, #0]
 800457a:	6a21      	ldr	r1, [r4, #32]
 800457c:	602b      	str	r3, [r5, #0]
 800457e:	d032      	beq.n	80045e6 <__sflush_r+0x9a>
 8004580:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	075a      	lsls	r2, r3, #29
 8004586:	d505      	bpl.n	8004594 <__sflush_r+0x48>
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	1ac0      	subs	r0, r0, r3
 800458c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800458e:	b10b      	cbz	r3, 8004594 <__sflush_r+0x48>
 8004590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004592:	1ac0      	subs	r0, r0, r3
 8004594:	2300      	movs	r3, #0
 8004596:	4602      	mov	r2, r0
 8004598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800459a:	6a21      	ldr	r1, [r4, #32]
 800459c:	4628      	mov	r0, r5
 800459e:	47b0      	blx	r6
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	d106      	bne.n	80045b4 <__sflush_r+0x68>
 80045a6:	6829      	ldr	r1, [r5, #0]
 80045a8:	291d      	cmp	r1, #29
 80045aa:	d82b      	bhi.n	8004604 <__sflush_r+0xb8>
 80045ac:	4a29      	ldr	r2, [pc, #164]	; (8004654 <__sflush_r+0x108>)
 80045ae:	410a      	asrs	r2, r1
 80045b0:	07d6      	lsls	r6, r2, #31
 80045b2:	d427      	bmi.n	8004604 <__sflush_r+0xb8>
 80045b4:	2200      	movs	r2, #0
 80045b6:	6062      	str	r2, [r4, #4]
 80045b8:	04d9      	lsls	r1, r3, #19
 80045ba:	6922      	ldr	r2, [r4, #16]
 80045bc:	6022      	str	r2, [r4, #0]
 80045be:	d504      	bpl.n	80045ca <__sflush_r+0x7e>
 80045c0:	1c42      	adds	r2, r0, #1
 80045c2:	d101      	bne.n	80045c8 <__sflush_r+0x7c>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	b903      	cbnz	r3, 80045ca <__sflush_r+0x7e>
 80045c8:	6560      	str	r0, [r4, #84]	; 0x54
 80045ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045cc:	602f      	str	r7, [r5, #0]
 80045ce:	2900      	cmp	r1, #0
 80045d0:	d0c9      	beq.n	8004566 <__sflush_r+0x1a>
 80045d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d6:	4299      	cmp	r1, r3
 80045d8:	d002      	beq.n	80045e0 <__sflush_r+0x94>
 80045da:	4628      	mov	r0, r5
 80045dc:	f7ff fb3a 	bl	8003c54 <_free_r>
 80045e0:	2000      	movs	r0, #0
 80045e2:	6360      	str	r0, [r4, #52]	; 0x34
 80045e4:	e7c0      	b.n	8004568 <__sflush_r+0x1c>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4628      	mov	r0, r5
 80045ea:	47b0      	blx	r6
 80045ec:	1c41      	adds	r1, r0, #1
 80045ee:	d1c8      	bne.n	8004582 <__sflush_r+0x36>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0c5      	beq.n	8004582 <__sflush_r+0x36>
 80045f6:	2b1d      	cmp	r3, #29
 80045f8:	d001      	beq.n	80045fe <__sflush_r+0xb2>
 80045fa:	2b16      	cmp	r3, #22
 80045fc:	d101      	bne.n	8004602 <__sflush_r+0xb6>
 80045fe:	602f      	str	r7, [r5, #0]
 8004600:	e7b1      	b.n	8004566 <__sflush_r+0x1a>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004608:	81a3      	strh	r3, [r4, #12]
 800460a:	e7ad      	b.n	8004568 <__sflush_r+0x1c>
 800460c:	690f      	ldr	r7, [r1, #16]
 800460e:	2f00      	cmp	r7, #0
 8004610:	d0a9      	beq.n	8004566 <__sflush_r+0x1a>
 8004612:	0793      	lsls	r3, r2, #30
 8004614:	680e      	ldr	r6, [r1, #0]
 8004616:	bf08      	it	eq
 8004618:	694b      	ldreq	r3, [r1, #20]
 800461a:	600f      	str	r7, [r1, #0]
 800461c:	bf18      	it	ne
 800461e:	2300      	movne	r3, #0
 8004620:	eba6 0807 	sub.w	r8, r6, r7
 8004624:	608b      	str	r3, [r1, #8]
 8004626:	f1b8 0f00 	cmp.w	r8, #0
 800462a:	dd9c      	ble.n	8004566 <__sflush_r+0x1a>
 800462c:	6a21      	ldr	r1, [r4, #32]
 800462e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004630:	4643      	mov	r3, r8
 8004632:	463a      	mov	r2, r7
 8004634:	4628      	mov	r0, r5
 8004636:	47b0      	blx	r6
 8004638:	2800      	cmp	r0, #0
 800463a:	dc06      	bgt.n	800464a <__sflush_r+0xfe>
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	e78e      	b.n	8004568 <__sflush_r+0x1c>
 800464a:	4407      	add	r7, r0
 800464c:	eba8 0800 	sub.w	r8, r8, r0
 8004650:	e7e9      	b.n	8004626 <__sflush_r+0xda>
 8004652:	bf00      	nop
 8004654:	dfbffffe 	.word	0xdfbffffe

08004658 <_fflush_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	690b      	ldr	r3, [r1, #16]
 800465c:	4605      	mov	r5, r0
 800465e:	460c      	mov	r4, r1
 8004660:	b913      	cbnz	r3, 8004668 <_fflush_r+0x10>
 8004662:	2500      	movs	r5, #0
 8004664:	4628      	mov	r0, r5
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	b118      	cbz	r0, 8004672 <_fflush_r+0x1a>
 800466a:	6a03      	ldr	r3, [r0, #32]
 800466c:	b90b      	cbnz	r3, 8004672 <_fflush_r+0x1a>
 800466e:	f7fe fb7b 	bl	8002d68 <__sinit>
 8004672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f3      	beq.n	8004662 <_fflush_r+0xa>
 800467a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800467c:	07d0      	lsls	r0, r2, #31
 800467e:	d404      	bmi.n	800468a <_fflush_r+0x32>
 8004680:	0599      	lsls	r1, r3, #22
 8004682:	d402      	bmi.n	800468a <_fflush_r+0x32>
 8004684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004686:	f7fe fc66 	bl	8002f56 <__retarget_lock_acquire_recursive>
 800468a:	4628      	mov	r0, r5
 800468c:	4621      	mov	r1, r4
 800468e:	f7ff ff5d 	bl	800454c <__sflush_r>
 8004692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004694:	07da      	lsls	r2, r3, #31
 8004696:	4605      	mov	r5, r0
 8004698:	d4e4      	bmi.n	8004664 <_fflush_r+0xc>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	059b      	lsls	r3, r3, #22
 800469e:	d4e1      	bmi.n	8004664 <_fflush_r+0xc>
 80046a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a2:	f7fe fc59 	bl	8002f58 <__retarget_lock_release_recursive>
 80046a6:	e7dd      	b.n	8004664 <_fflush_r+0xc>

080046a8 <_sbrk_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d06      	ldr	r5, [pc, #24]	; (80046c4 <_sbrk_r+0x1c>)
 80046ac:	2300      	movs	r3, #0
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	f7fc ff06 	bl	80014c4 <_sbrk>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_sbrk_r+0x1a>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_sbrk_r+0x1a>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	20000840 	.word	0x20000840

080046c8 <memcpy>:
 80046c8:	440a      	add	r2, r1
 80046ca:	4291      	cmp	r1, r2
 80046cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80046d0:	d100      	bne.n	80046d4 <memcpy+0xc>
 80046d2:	4770      	bx	lr
 80046d4:	b510      	push	{r4, lr}
 80046d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046de:	4291      	cmp	r1, r2
 80046e0:	d1f9      	bne.n	80046d6 <memcpy+0xe>
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <__assert_func>:
 80046e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80046e6:	4614      	mov	r4, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <__assert_func+0x2c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4605      	mov	r5, r0
 80046f0:	68d8      	ldr	r0, [r3, #12]
 80046f2:	b14c      	cbz	r4, 8004708 <__assert_func+0x24>
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <__assert_func+0x30>)
 80046f6:	9100      	str	r1, [sp, #0]
 80046f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80046fc:	4906      	ldr	r1, [pc, #24]	; (8004718 <__assert_func+0x34>)
 80046fe:	462b      	mov	r3, r5
 8004700:	f000 f844 	bl	800478c <fiprintf>
 8004704:	f000 f854 	bl	80047b0 <abort>
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <__assert_func+0x38>)
 800470a:	461c      	mov	r4, r3
 800470c:	e7f3      	b.n	80046f6 <__assert_func+0x12>
 800470e:	bf00      	nop
 8004710:	20000568 	.word	0x20000568
 8004714:	0800603e 	.word	0x0800603e
 8004718:	0800604b 	.word	0x0800604b
 800471c:	08006079 	.word	0x08006079

08004720 <_calloc_r>:
 8004720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004722:	fba1 2402 	umull	r2, r4, r1, r2
 8004726:	b94c      	cbnz	r4, 800473c <_calloc_r+0x1c>
 8004728:	4611      	mov	r1, r2
 800472a:	9201      	str	r2, [sp, #4]
 800472c:	f7ff fb06 	bl	8003d3c <_malloc_r>
 8004730:	9a01      	ldr	r2, [sp, #4]
 8004732:	4605      	mov	r5, r0
 8004734:	b930      	cbnz	r0, 8004744 <_calloc_r+0x24>
 8004736:	4628      	mov	r0, r5
 8004738:	b003      	add	sp, #12
 800473a:	bd30      	pop	{r4, r5, pc}
 800473c:	220c      	movs	r2, #12
 800473e:	6002      	str	r2, [r0, #0]
 8004740:	2500      	movs	r5, #0
 8004742:	e7f8      	b.n	8004736 <_calloc_r+0x16>
 8004744:	4621      	mov	r1, r4
 8004746:	f7fe fb88 	bl	8002e5a <memset>
 800474a:	e7f4      	b.n	8004736 <_calloc_r+0x16>

0800474c <__ascii_mbtowc>:
 800474c:	b082      	sub	sp, #8
 800474e:	b901      	cbnz	r1, 8004752 <__ascii_mbtowc+0x6>
 8004750:	a901      	add	r1, sp, #4
 8004752:	b142      	cbz	r2, 8004766 <__ascii_mbtowc+0x1a>
 8004754:	b14b      	cbz	r3, 800476a <__ascii_mbtowc+0x1e>
 8004756:	7813      	ldrb	r3, [r2, #0]
 8004758:	600b      	str	r3, [r1, #0]
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	1e10      	subs	r0, r2, #0
 800475e:	bf18      	it	ne
 8004760:	2001      	movne	r0, #1
 8004762:	b002      	add	sp, #8
 8004764:	4770      	bx	lr
 8004766:	4610      	mov	r0, r2
 8004768:	e7fb      	b.n	8004762 <__ascii_mbtowc+0x16>
 800476a:	f06f 0001 	mvn.w	r0, #1
 800476e:	e7f8      	b.n	8004762 <__ascii_mbtowc+0x16>

08004770 <__ascii_wctomb>:
 8004770:	b149      	cbz	r1, 8004786 <__ascii_wctomb+0x16>
 8004772:	2aff      	cmp	r2, #255	; 0xff
 8004774:	bf85      	ittet	hi
 8004776:	238a      	movhi	r3, #138	; 0x8a
 8004778:	6003      	strhi	r3, [r0, #0]
 800477a:	700a      	strbls	r2, [r1, #0]
 800477c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004780:	bf98      	it	ls
 8004782:	2001      	movls	r0, #1
 8004784:	4770      	bx	lr
 8004786:	4608      	mov	r0, r1
 8004788:	4770      	bx	lr
	...

0800478c <fiprintf>:
 800478c:	b40e      	push	{r1, r2, r3}
 800478e:	b503      	push	{r0, r1, lr}
 8004790:	4601      	mov	r1, r0
 8004792:	ab03      	add	r3, sp, #12
 8004794:	4805      	ldr	r0, [pc, #20]	; (80047ac <fiprintf+0x20>)
 8004796:	f853 2b04 	ldr.w	r2, [r3], #4
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	f000 f837 	bl	8004810 <_vfiprintf_r>
 80047a2:	b002      	add	sp, #8
 80047a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a8:	b003      	add	sp, #12
 80047aa:	4770      	bx	lr
 80047ac:	20000568 	.word	0x20000568

080047b0 <abort>:
 80047b0:	b508      	push	{r3, lr}
 80047b2:	2006      	movs	r0, #6
 80047b4:	f000 fa04 	bl	8004bc0 <raise>
 80047b8:	2001      	movs	r0, #1
 80047ba:	f7fc fe0b 	bl	80013d4 <_exit>

080047be <__sfputc_r>:
 80047be:	6893      	ldr	r3, [r2, #8]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	b410      	push	{r4}
 80047c6:	6093      	str	r3, [r2, #8]
 80047c8:	da08      	bge.n	80047dc <__sfputc_r+0x1e>
 80047ca:	6994      	ldr	r4, [r2, #24]
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	db01      	blt.n	80047d4 <__sfputc_r+0x16>
 80047d0:	290a      	cmp	r1, #10
 80047d2:	d103      	bne.n	80047dc <__sfputc_r+0x1e>
 80047d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047d8:	f000 b934 	b.w	8004a44 <__swbuf_r>
 80047dc:	6813      	ldr	r3, [r2, #0]
 80047de:	1c58      	adds	r0, r3, #1
 80047e0:	6010      	str	r0, [r2, #0]
 80047e2:	7019      	strb	r1, [r3, #0]
 80047e4:	4608      	mov	r0, r1
 80047e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <__sfputs_r>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	4606      	mov	r6, r0
 80047f0:	460f      	mov	r7, r1
 80047f2:	4614      	mov	r4, r2
 80047f4:	18d5      	adds	r5, r2, r3
 80047f6:	42ac      	cmp	r4, r5
 80047f8:	d101      	bne.n	80047fe <__sfputs_r+0x12>
 80047fa:	2000      	movs	r0, #0
 80047fc:	e007      	b.n	800480e <__sfputs_r+0x22>
 80047fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004802:	463a      	mov	r2, r7
 8004804:	4630      	mov	r0, r6
 8004806:	f7ff ffda 	bl	80047be <__sfputc_r>
 800480a:	1c43      	adds	r3, r0, #1
 800480c:	d1f3      	bne.n	80047f6 <__sfputs_r+0xa>
 800480e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004810 <_vfiprintf_r>:
 8004810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	460d      	mov	r5, r1
 8004816:	b09d      	sub	sp, #116	; 0x74
 8004818:	4614      	mov	r4, r2
 800481a:	4698      	mov	r8, r3
 800481c:	4606      	mov	r6, r0
 800481e:	b118      	cbz	r0, 8004828 <_vfiprintf_r+0x18>
 8004820:	6a03      	ldr	r3, [r0, #32]
 8004822:	b90b      	cbnz	r3, 8004828 <_vfiprintf_r+0x18>
 8004824:	f7fe faa0 	bl	8002d68 <__sinit>
 8004828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800482a:	07d9      	lsls	r1, r3, #31
 800482c:	d405      	bmi.n	800483a <_vfiprintf_r+0x2a>
 800482e:	89ab      	ldrh	r3, [r5, #12]
 8004830:	059a      	lsls	r2, r3, #22
 8004832:	d402      	bmi.n	800483a <_vfiprintf_r+0x2a>
 8004834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004836:	f7fe fb8e 	bl	8002f56 <__retarget_lock_acquire_recursive>
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	071b      	lsls	r3, r3, #28
 800483e:	d501      	bpl.n	8004844 <_vfiprintf_r+0x34>
 8004840:	692b      	ldr	r3, [r5, #16]
 8004842:	b99b      	cbnz	r3, 800486c <_vfiprintf_r+0x5c>
 8004844:	4629      	mov	r1, r5
 8004846:	4630      	mov	r0, r6
 8004848:	f000 f93a 	bl	8004ac0 <__swsetup_r>
 800484c:	b170      	cbz	r0, 800486c <_vfiprintf_r+0x5c>
 800484e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004850:	07dc      	lsls	r4, r3, #31
 8004852:	d504      	bpl.n	800485e <_vfiprintf_r+0x4e>
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	b01d      	add	sp, #116	; 0x74
 800485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485e:	89ab      	ldrh	r3, [r5, #12]
 8004860:	0598      	lsls	r0, r3, #22
 8004862:	d4f7      	bmi.n	8004854 <_vfiprintf_r+0x44>
 8004864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004866:	f7fe fb77 	bl	8002f58 <__retarget_lock_release_recursive>
 800486a:	e7f3      	b.n	8004854 <_vfiprintf_r+0x44>
 800486c:	2300      	movs	r3, #0
 800486e:	9309      	str	r3, [sp, #36]	; 0x24
 8004870:	2320      	movs	r3, #32
 8004872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004876:	f8cd 800c 	str.w	r8, [sp, #12]
 800487a:	2330      	movs	r3, #48	; 0x30
 800487c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004a30 <_vfiprintf_r+0x220>
 8004880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004884:	f04f 0901 	mov.w	r9, #1
 8004888:	4623      	mov	r3, r4
 800488a:	469a      	mov	sl, r3
 800488c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004890:	b10a      	cbz	r2, 8004896 <_vfiprintf_r+0x86>
 8004892:	2a25      	cmp	r2, #37	; 0x25
 8004894:	d1f9      	bne.n	800488a <_vfiprintf_r+0x7a>
 8004896:	ebba 0b04 	subs.w	fp, sl, r4
 800489a:	d00b      	beq.n	80048b4 <_vfiprintf_r+0xa4>
 800489c:	465b      	mov	r3, fp
 800489e:	4622      	mov	r2, r4
 80048a0:	4629      	mov	r1, r5
 80048a2:	4630      	mov	r0, r6
 80048a4:	f7ff ffa2 	bl	80047ec <__sfputs_r>
 80048a8:	3001      	adds	r0, #1
 80048aa:	f000 80a9 	beq.w	8004a00 <_vfiprintf_r+0x1f0>
 80048ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b0:	445a      	add	r2, fp
 80048b2:	9209      	str	r2, [sp, #36]	; 0x24
 80048b4:	f89a 3000 	ldrb.w	r3, [sl]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80a1 	beq.w	8004a00 <_vfiprintf_r+0x1f0>
 80048be:	2300      	movs	r3, #0
 80048c0:	f04f 32ff 	mov.w	r2, #4294967295
 80048c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048c8:	f10a 0a01 	add.w	sl, sl, #1
 80048cc:	9304      	str	r3, [sp, #16]
 80048ce:	9307      	str	r3, [sp, #28]
 80048d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048d4:	931a      	str	r3, [sp, #104]	; 0x68
 80048d6:	4654      	mov	r4, sl
 80048d8:	2205      	movs	r2, #5
 80048da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048de:	4854      	ldr	r0, [pc, #336]	; (8004a30 <_vfiprintf_r+0x220>)
 80048e0:	f7fb fc76 	bl	80001d0 <memchr>
 80048e4:	9a04      	ldr	r2, [sp, #16]
 80048e6:	b9d8      	cbnz	r0, 8004920 <_vfiprintf_r+0x110>
 80048e8:	06d1      	lsls	r1, r2, #27
 80048ea:	bf44      	itt	mi
 80048ec:	2320      	movmi	r3, #32
 80048ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f2:	0713      	lsls	r3, r2, #28
 80048f4:	bf44      	itt	mi
 80048f6:	232b      	movmi	r3, #43	; 0x2b
 80048f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004900:	2b2a      	cmp	r3, #42	; 0x2a
 8004902:	d015      	beq.n	8004930 <_vfiprintf_r+0x120>
 8004904:	9a07      	ldr	r2, [sp, #28]
 8004906:	4654      	mov	r4, sl
 8004908:	2000      	movs	r0, #0
 800490a:	f04f 0c0a 	mov.w	ip, #10
 800490e:	4621      	mov	r1, r4
 8004910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004914:	3b30      	subs	r3, #48	; 0x30
 8004916:	2b09      	cmp	r3, #9
 8004918:	d94d      	bls.n	80049b6 <_vfiprintf_r+0x1a6>
 800491a:	b1b0      	cbz	r0, 800494a <_vfiprintf_r+0x13a>
 800491c:	9207      	str	r2, [sp, #28]
 800491e:	e014      	b.n	800494a <_vfiprintf_r+0x13a>
 8004920:	eba0 0308 	sub.w	r3, r0, r8
 8004924:	fa09 f303 	lsl.w	r3, r9, r3
 8004928:	4313      	orrs	r3, r2
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	46a2      	mov	sl, r4
 800492e:	e7d2      	b.n	80048d6 <_vfiprintf_r+0xc6>
 8004930:	9b03      	ldr	r3, [sp, #12]
 8004932:	1d19      	adds	r1, r3, #4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	9103      	str	r1, [sp, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	bfbb      	ittet	lt
 800493c:	425b      	neglt	r3, r3
 800493e:	f042 0202 	orrlt.w	r2, r2, #2
 8004942:	9307      	strge	r3, [sp, #28]
 8004944:	9307      	strlt	r3, [sp, #28]
 8004946:	bfb8      	it	lt
 8004948:	9204      	strlt	r2, [sp, #16]
 800494a:	7823      	ldrb	r3, [r4, #0]
 800494c:	2b2e      	cmp	r3, #46	; 0x2e
 800494e:	d10c      	bne.n	800496a <_vfiprintf_r+0x15a>
 8004950:	7863      	ldrb	r3, [r4, #1]
 8004952:	2b2a      	cmp	r3, #42	; 0x2a
 8004954:	d134      	bne.n	80049c0 <_vfiprintf_r+0x1b0>
 8004956:	9b03      	ldr	r3, [sp, #12]
 8004958:	1d1a      	adds	r2, r3, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	9203      	str	r2, [sp, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	bfb8      	it	lt
 8004962:	f04f 33ff 	movlt.w	r3, #4294967295
 8004966:	3402      	adds	r4, #2
 8004968:	9305      	str	r3, [sp, #20]
 800496a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a40 <_vfiprintf_r+0x230>
 800496e:	7821      	ldrb	r1, [r4, #0]
 8004970:	2203      	movs	r2, #3
 8004972:	4650      	mov	r0, sl
 8004974:	f7fb fc2c 	bl	80001d0 <memchr>
 8004978:	b138      	cbz	r0, 800498a <_vfiprintf_r+0x17a>
 800497a:	9b04      	ldr	r3, [sp, #16]
 800497c:	eba0 000a 	sub.w	r0, r0, sl
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	4082      	lsls	r2, r0
 8004984:	4313      	orrs	r3, r2
 8004986:	3401      	adds	r4, #1
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498e:	4829      	ldr	r0, [pc, #164]	; (8004a34 <_vfiprintf_r+0x224>)
 8004990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004994:	2206      	movs	r2, #6
 8004996:	f7fb fc1b 	bl	80001d0 <memchr>
 800499a:	2800      	cmp	r0, #0
 800499c:	d03f      	beq.n	8004a1e <_vfiprintf_r+0x20e>
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <_vfiprintf_r+0x228>)
 80049a0:	bb1b      	cbnz	r3, 80049ea <_vfiprintf_r+0x1da>
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	3307      	adds	r3, #7
 80049a6:	f023 0307 	bic.w	r3, r3, #7
 80049aa:	3308      	adds	r3, #8
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b0:	443b      	add	r3, r7
 80049b2:	9309      	str	r3, [sp, #36]	; 0x24
 80049b4:	e768      	b.n	8004888 <_vfiprintf_r+0x78>
 80049b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ba:	460c      	mov	r4, r1
 80049bc:	2001      	movs	r0, #1
 80049be:	e7a6      	b.n	800490e <_vfiprintf_r+0xfe>
 80049c0:	2300      	movs	r3, #0
 80049c2:	3401      	adds	r4, #1
 80049c4:	9305      	str	r3, [sp, #20]
 80049c6:	4619      	mov	r1, r3
 80049c8:	f04f 0c0a 	mov.w	ip, #10
 80049cc:	4620      	mov	r0, r4
 80049ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d2:	3a30      	subs	r2, #48	; 0x30
 80049d4:	2a09      	cmp	r2, #9
 80049d6:	d903      	bls.n	80049e0 <_vfiprintf_r+0x1d0>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0c6      	beq.n	800496a <_vfiprintf_r+0x15a>
 80049dc:	9105      	str	r1, [sp, #20]
 80049de:	e7c4      	b.n	800496a <_vfiprintf_r+0x15a>
 80049e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80049e4:	4604      	mov	r4, r0
 80049e6:	2301      	movs	r3, #1
 80049e8:	e7f0      	b.n	80049cc <_vfiprintf_r+0x1bc>
 80049ea:	ab03      	add	r3, sp, #12
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	462a      	mov	r2, r5
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <_vfiprintf_r+0x22c>)
 80049f2:	a904      	add	r1, sp, #16
 80049f4:	4630      	mov	r0, r6
 80049f6:	f7fd fd65 	bl	80024c4 <_printf_float>
 80049fa:	4607      	mov	r7, r0
 80049fc:	1c78      	adds	r0, r7, #1
 80049fe:	d1d6      	bne.n	80049ae <_vfiprintf_r+0x19e>
 8004a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a02:	07d9      	lsls	r1, r3, #31
 8004a04:	d405      	bmi.n	8004a12 <_vfiprintf_r+0x202>
 8004a06:	89ab      	ldrh	r3, [r5, #12]
 8004a08:	059a      	lsls	r2, r3, #22
 8004a0a:	d402      	bmi.n	8004a12 <_vfiprintf_r+0x202>
 8004a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a0e:	f7fe faa3 	bl	8002f58 <__retarget_lock_release_recursive>
 8004a12:	89ab      	ldrh	r3, [r5, #12]
 8004a14:	065b      	lsls	r3, r3, #25
 8004a16:	f53f af1d 	bmi.w	8004854 <_vfiprintf_r+0x44>
 8004a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1c:	e71c      	b.n	8004858 <_vfiprintf_r+0x48>
 8004a1e:	ab03      	add	r3, sp, #12
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	462a      	mov	r2, r5
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <_vfiprintf_r+0x22c>)
 8004a26:	a904      	add	r1, sp, #16
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f7fd ffef 	bl	8002a0c <_printf_i>
 8004a2e:	e7e4      	b.n	80049fa <_vfiprintf_r+0x1ea>
 8004a30:	0800617b 	.word	0x0800617b
 8004a34:	08006185 	.word	0x08006185
 8004a38:	080024c5 	.word	0x080024c5
 8004a3c:	080047ed 	.word	0x080047ed
 8004a40:	08006181 	.word	0x08006181

08004a44 <__swbuf_r>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	460e      	mov	r6, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	b118      	cbz	r0, 8004a56 <__swbuf_r+0x12>
 8004a4e:	6a03      	ldr	r3, [r0, #32]
 8004a50:	b90b      	cbnz	r3, 8004a56 <__swbuf_r+0x12>
 8004a52:	f7fe f989 	bl	8002d68 <__sinit>
 8004a56:	69a3      	ldr	r3, [r4, #24]
 8004a58:	60a3      	str	r3, [r4, #8]
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	071a      	lsls	r2, r3, #28
 8004a5e:	d525      	bpl.n	8004aac <__swbuf_r+0x68>
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	b31b      	cbz	r3, 8004aac <__swbuf_r+0x68>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	6922      	ldr	r2, [r4, #16]
 8004a68:	1a98      	subs	r0, r3, r2
 8004a6a:	6963      	ldr	r3, [r4, #20]
 8004a6c:	b2f6      	uxtb	r6, r6
 8004a6e:	4283      	cmp	r3, r0
 8004a70:	4637      	mov	r7, r6
 8004a72:	dc04      	bgt.n	8004a7e <__swbuf_r+0x3a>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f7ff fdee 	bl	8004658 <_fflush_r>
 8004a7c:	b9e0      	cbnz	r0, 8004ab8 <__swbuf_r+0x74>
 8004a7e:	68a3      	ldr	r3, [r4, #8]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	60a3      	str	r3, [r4, #8]
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	701e      	strb	r6, [r3, #0]
 8004a8c:	6962      	ldr	r2, [r4, #20]
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d004      	beq.n	8004a9e <__swbuf_r+0x5a>
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	07db      	lsls	r3, r3, #31
 8004a98:	d506      	bpl.n	8004aa8 <__swbuf_r+0x64>
 8004a9a:	2e0a      	cmp	r6, #10
 8004a9c:	d104      	bne.n	8004aa8 <__swbuf_r+0x64>
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f7ff fdd9 	bl	8004658 <_fflush_r>
 8004aa6:	b938      	cbnz	r0, 8004ab8 <__swbuf_r+0x74>
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f806 	bl	8004ac0 <__swsetup_r>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d0d5      	beq.n	8004a64 <__swbuf_r+0x20>
 8004ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8004abc:	e7f4      	b.n	8004aa8 <__swbuf_r+0x64>
	...

08004ac0 <__swsetup_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <__swsetup_r+0xac>)
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	460c      	mov	r4, r1
 8004aca:	b118      	cbz	r0, 8004ad4 <__swsetup_r+0x14>
 8004acc:	6a03      	ldr	r3, [r0, #32]
 8004ace:	b90b      	cbnz	r3, 8004ad4 <__swsetup_r+0x14>
 8004ad0:	f7fe f94a 	bl	8002d68 <__sinit>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ada:	0718      	lsls	r0, r3, #28
 8004adc:	d422      	bmi.n	8004b24 <__swsetup_r+0x64>
 8004ade:	06d9      	lsls	r1, r3, #27
 8004ae0:	d407      	bmi.n	8004af2 <__swsetup_r+0x32>
 8004ae2:	2309      	movs	r3, #9
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	e034      	b.n	8004b5c <__swsetup_r+0x9c>
 8004af2:	0758      	lsls	r0, r3, #29
 8004af4:	d512      	bpl.n	8004b1c <__swsetup_r+0x5c>
 8004af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af8:	b141      	cbz	r1, 8004b0c <__swsetup_r+0x4c>
 8004afa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004afe:	4299      	cmp	r1, r3
 8004b00:	d002      	beq.n	8004b08 <__swsetup_r+0x48>
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7ff f8a6 	bl	8003c54 <_free_r>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	6363      	str	r3, [r4, #52]	; 0x34
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	2300      	movs	r3, #0
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	6023      	str	r3, [r4, #0]
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f043 0308 	orr.w	r3, r3, #8
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	6923      	ldr	r3, [r4, #16]
 8004b26:	b94b      	cbnz	r3, 8004b3c <__swsetup_r+0x7c>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d003      	beq.n	8004b3c <__swsetup_r+0x7c>
 8004b34:	4621      	mov	r1, r4
 8004b36:	4628      	mov	r0, r5
 8004b38:	f000 f884 	bl	8004c44 <__smakebuf_r>
 8004b3c:	89a0      	ldrh	r0, [r4, #12]
 8004b3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b42:	f010 0301 	ands.w	r3, r0, #1
 8004b46:	d00a      	beq.n	8004b5e <__swsetup_r+0x9e>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60a3      	str	r3, [r4, #8]
 8004b4c:	6963      	ldr	r3, [r4, #20]
 8004b4e:	425b      	negs	r3, r3
 8004b50:	61a3      	str	r3, [r4, #24]
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	b943      	cbnz	r3, 8004b68 <__swsetup_r+0xa8>
 8004b56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b5a:	d1c4      	bne.n	8004ae6 <__swsetup_r+0x26>
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	0781      	lsls	r1, r0, #30
 8004b60:	bf58      	it	pl
 8004b62:	6963      	ldrpl	r3, [r4, #20]
 8004b64:	60a3      	str	r3, [r4, #8]
 8004b66:	e7f4      	b.n	8004b52 <__swsetup_r+0x92>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e7f7      	b.n	8004b5c <__swsetup_r+0x9c>
 8004b6c:	20000568 	.word	0x20000568

08004b70 <_raise_r>:
 8004b70:	291f      	cmp	r1, #31
 8004b72:	b538      	push	{r3, r4, r5, lr}
 8004b74:	4604      	mov	r4, r0
 8004b76:	460d      	mov	r5, r1
 8004b78:	d904      	bls.n	8004b84 <_raise_r+0x14>
 8004b7a:	2316      	movs	r3, #22
 8004b7c:	6003      	str	r3, [r0, #0]
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004b86:	b112      	cbz	r2, 8004b8e <_raise_r+0x1e>
 8004b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b8c:	b94b      	cbnz	r3, 8004ba2 <_raise_r+0x32>
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f000 f830 	bl	8004bf4 <_getpid_r>
 8004b94:	462a      	mov	r2, r5
 8004b96:	4601      	mov	r1, r0
 8004b98:	4620      	mov	r0, r4
 8004b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b9e:	f000 b817 	b.w	8004bd0 <_kill_r>
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d00a      	beq.n	8004bbc <_raise_r+0x4c>
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	d103      	bne.n	8004bb2 <_raise_r+0x42>
 8004baa:	2316      	movs	r3, #22
 8004bac:	6003      	str	r3, [r0, #0]
 8004bae:	2001      	movs	r0, #1
 8004bb0:	e7e7      	b.n	8004b82 <_raise_r+0x12>
 8004bb2:	2400      	movs	r4, #0
 8004bb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004bb8:	4628      	mov	r0, r5
 8004bba:	4798      	blx	r3
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	e7e0      	b.n	8004b82 <_raise_r+0x12>

08004bc0 <raise>:
 8004bc0:	4b02      	ldr	r3, [pc, #8]	; (8004bcc <raise+0xc>)
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	f7ff bfd3 	b.w	8004b70 <_raise_r>
 8004bca:	bf00      	nop
 8004bcc:	20000568 	.word	0x20000568

08004bd0 <_kill_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4d07      	ldr	r5, [pc, #28]	; (8004bf0 <_kill_r+0x20>)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	4608      	mov	r0, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	f7fc fbe9 	bl	80013b4 <_kill>
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	d102      	bne.n	8004bec <_kill_r+0x1c>
 8004be6:	682b      	ldr	r3, [r5, #0]
 8004be8:	b103      	cbz	r3, 8004bec <_kill_r+0x1c>
 8004bea:	6023      	str	r3, [r4, #0]
 8004bec:	bd38      	pop	{r3, r4, r5, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000840 	.word	0x20000840

08004bf4 <_getpid_r>:
 8004bf4:	f7fc bbd6 	b.w	80013a4 <_getpid>

08004bf8 <__swhatbuf_r>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	2900      	cmp	r1, #0
 8004c02:	b096      	sub	sp, #88	; 0x58
 8004c04:	4615      	mov	r5, r2
 8004c06:	461e      	mov	r6, r3
 8004c08:	da0d      	bge.n	8004c26 <__swhatbuf_r+0x2e>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c10:	f04f 0100 	mov.w	r1, #0
 8004c14:	bf0c      	ite	eq
 8004c16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c1a:	2340      	movne	r3, #64	; 0x40
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	6031      	str	r1, [r6, #0]
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	b016      	add	sp, #88	; 0x58
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
 8004c26:	466a      	mov	r2, sp
 8004c28:	f000 f848 	bl	8004cbc <_fstat_r>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	dbec      	blt.n	8004c0a <__swhatbuf_r+0x12>
 8004c30:	9901      	ldr	r1, [sp, #4]
 8004c32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004c36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004c3a:	4259      	negs	r1, r3
 8004c3c:	4159      	adcs	r1, r3
 8004c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c42:	e7eb      	b.n	8004c1c <__swhatbuf_r+0x24>

08004c44 <__smakebuf_r>:
 8004c44:	898b      	ldrh	r3, [r1, #12]
 8004c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c48:	079d      	lsls	r5, r3, #30
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	d507      	bpl.n	8004c60 <__smakebuf_r+0x1c>
 8004c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	6123      	str	r3, [r4, #16]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	6163      	str	r3, [r4, #20]
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	ab01      	add	r3, sp, #4
 8004c62:	466a      	mov	r2, sp
 8004c64:	f7ff ffc8 	bl	8004bf8 <__swhatbuf_r>
 8004c68:	9900      	ldr	r1, [sp, #0]
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f7ff f865 	bl	8003d3c <_malloc_r>
 8004c72:	b948      	cbnz	r0, 8004c88 <__smakebuf_r+0x44>
 8004c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c78:	059a      	lsls	r2, r3, #22
 8004c7a:	d4ef      	bmi.n	8004c5c <__smakebuf_r+0x18>
 8004c7c:	f023 0303 	bic.w	r3, r3, #3
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	e7e3      	b.n	8004c50 <__smakebuf_r+0xc>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	6020      	str	r0, [r4, #0]
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	9b00      	ldr	r3, [sp, #0]
 8004c94:	6163      	str	r3, [r4, #20]
 8004c96:	9b01      	ldr	r3, [sp, #4]
 8004c98:	6120      	str	r0, [r4, #16]
 8004c9a:	b15b      	cbz	r3, 8004cb4 <__smakebuf_r+0x70>
 8004c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f000 f81d 	bl	8004ce0 <_isatty_r>
 8004ca6:	b128      	cbz	r0, 8004cb4 <__smakebuf_r+0x70>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	431d      	orrs	r5, r3
 8004cb8:	81a5      	strh	r5, [r4, #12]
 8004cba:	e7cf      	b.n	8004c5c <__smakebuf_r+0x18>

08004cbc <_fstat_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d07      	ldr	r5, [pc, #28]	; (8004cdc <_fstat_r+0x20>)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	f7fc fbd2 	bl	8001472 <_fstat>
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	d102      	bne.n	8004cd8 <_fstat_r+0x1c>
 8004cd2:	682b      	ldr	r3, [r5, #0]
 8004cd4:	b103      	cbz	r3, 8004cd8 <_fstat_r+0x1c>
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	bd38      	pop	{r3, r4, r5, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000840 	.word	0x20000840

08004ce0 <_isatty_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d06      	ldr	r5, [pc, #24]	; (8004cfc <_isatty_r+0x1c>)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	f7fc fbd1 	bl	8001492 <_isatty>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d102      	bne.n	8004cfa <_isatty_r+0x1a>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	b103      	cbz	r3, 8004cfa <_isatty_r+0x1a>
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	20000840 	.word	0x20000840

08004d00 <sin>:
 8004d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d02:	ec53 2b10 	vmov	r2, r3, d0
 8004d06:	4828      	ldr	r0, [pc, #160]	; (8004da8 <sin+0xa8>)
 8004d08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d0c:	4281      	cmp	r1, r0
 8004d0e:	dc07      	bgt.n	8004d20 <sin+0x20>
 8004d10:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004da0 <sin+0xa0>
 8004d14:	2000      	movs	r0, #0
 8004d16:	b005      	add	sp, #20
 8004d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d1c:	f000 b948 	b.w	8004fb0 <__kernel_sin>
 8004d20:	4822      	ldr	r0, [pc, #136]	; (8004dac <sin+0xac>)
 8004d22:	4281      	cmp	r1, r0
 8004d24:	dd09      	ble.n	8004d3a <sin+0x3a>
 8004d26:	ee10 0a10 	vmov	r0, s0
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f7fb faac 	bl	8000288 <__aeabi_dsub>
 8004d30:	ec41 0b10 	vmov	d0, r0, r1
 8004d34:	b005      	add	sp, #20
 8004d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d3a:	4668      	mov	r0, sp
 8004d3c:	f000 f9f8 	bl	8005130 <__ieee754_rem_pio2>
 8004d40:	f000 0003 	and.w	r0, r0, #3
 8004d44:	2801      	cmp	r0, #1
 8004d46:	d00c      	beq.n	8004d62 <sin+0x62>
 8004d48:	2802      	cmp	r0, #2
 8004d4a:	d011      	beq.n	8004d70 <sin+0x70>
 8004d4c:	b9f0      	cbnz	r0, 8004d8c <sin+0x8c>
 8004d4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d52:	ed9d 0b00 	vldr	d0, [sp]
 8004d56:	2001      	movs	r0, #1
 8004d58:	f000 f92a 	bl	8004fb0 <__kernel_sin>
 8004d5c:	ec51 0b10 	vmov	r0, r1, d0
 8004d60:	e7e6      	b.n	8004d30 <sin+0x30>
 8004d62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d66:	ed9d 0b00 	vldr	d0, [sp]
 8004d6a:	f000 f859 	bl	8004e20 <__kernel_cos>
 8004d6e:	e7f5      	b.n	8004d5c <sin+0x5c>
 8004d70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d74:	ed9d 0b00 	vldr	d0, [sp]
 8004d78:	2001      	movs	r0, #1
 8004d7a:	f000 f919 	bl	8004fb0 <__kernel_sin>
 8004d7e:	ec53 2b10 	vmov	r2, r3, d0
 8004d82:	ee10 0a10 	vmov	r0, s0
 8004d86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d8a:	e7d1      	b.n	8004d30 <sin+0x30>
 8004d8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d90:	ed9d 0b00 	vldr	d0, [sp]
 8004d94:	f000 f844 	bl	8004e20 <__kernel_cos>
 8004d98:	e7f1      	b.n	8004d7e <sin+0x7e>
 8004d9a:	bf00      	nop
 8004d9c:	f3af 8000 	nop.w
	...
 8004da8:	3fe921fb 	.word	0x3fe921fb
 8004dac:	7fefffff 	.word	0x7fefffff

08004db0 <fmaxf>:
 8004db0:	b508      	push	{r3, lr}
 8004db2:	ed2d 8b02 	vpush	{d8}
 8004db6:	eeb0 8a40 	vmov.f32	s16, s0
 8004dba:	eef0 8a60 	vmov.f32	s17, s1
 8004dbe:	f000 f813 	bl	8004de8 <__fpclassifyf>
 8004dc2:	b148      	cbz	r0, 8004dd8 <fmaxf+0x28>
 8004dc4:	eeb0 0a68 	vmov.f32	s0, s17
 8004dc8:	f000 f80e 	bl	8004de8 <__fpclassifyf>
 8004dcc:	b130      	cbz	r0, 8004ddc <fmaxf+0x2c>
 8004dce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd6:	dc01      	bgt.n	8004ddc <fmaxf+0x2c>
 8004dd8:	eeb0 8a68 	vmov.f32	s16, s17
 8004ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8004de0:	ecbd 8b02 	vpop	{d8}
 8004de4:	bd08      	pop	{r3, pc}
	...

08004de8 <__fpclassifyf>:
 8004de8:	ee10 3a10 	vmov	r3, s0
 8004dec:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8004df0:	d00d      	beq.n	8004e0e <__fpclassifyf+0x26>
 8004df2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8004df6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8004dfa:	d30a      	bcc.n	8004e12 <__fpclassifyf+0x2a>
 8004dfc:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <__fpclassifyf+0x34>)
 8004dfe:	1e42      	subs	r2, r0, #1
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d908      	bls.n	8004e16 <__fpclassifyf+0x2e>
 8004e04:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8004e08:	4258      	negs	r0, r3
 8004e0a:	4158      	adcs	r0, r3
 8004e0c:	4770      	bx	lr
 8004e0e:	2002      	movs	r0, #2
 8004e10:	4770      	bx	lr
 8004e12:	2004      	movs	r0, #4
 8004e14:	4770      	bx	lr
 8004e16:	2003      	movs	r0, #3
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	007ffffe 	.word	0x007ffffe

08004e20 <__kernel_cos>:
 8004e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	ec57 6b10 	vmov	r6, r7, d0
 8004e28:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004e2c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004e30:	ed8d 1b00 	vstr	d1, [sp]
 8004e34:	da07      	bge.n	8004e46 <__kernel_cos+0x26>
 8004e36:	ee10 0a10 	vmov	r0, s0
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fe8c 	bl	8000b58 <__aeabi_d2iz>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f000 8088 	beq.w	8004f56 <__kernel_cos+0x136>
 8004e46:	4632      	mov	r2, r6
 8004e48:	463b      	mov	r3, r7
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	f7fb fbd3 	bl	80005f8 <__aeabi_dmul>
 8004e52:	4b51      	ldr	r3, [pc, #324]	; (8004f98 <__kernel_cos+0x178>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	4604      	mov	r4, r0
 8004e58:	460d      	mov	r5, r1
 8004e5a:	f7fb fbcd 	bl	80005f8 <__aeabi_dmul>
 8004e5e:	a340      	add	r3, pc, #256	; (adr r3, 8004f60 <__kernel_cos+0x140>)
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	4682      	mov	sl, r0
 8004e66:	468b      	mov	fp, r1
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f7fb fbc4 	bl	80005f8 <__aeabi_dmul>
 8004e70:	a33d      	add	r3, pc, #244	; (adr r3, 8004f68 <__kernel_cos+0x148>)
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f7fb fa09 	bl	800028c <__adddf3>
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	f7fb fbbb 	bl	80005f8 <__aeabi_dmul>
 8004e82:	a33b      	add	r3, pc, #236	; (adr r3, 8004f70 <__kernel_cos+0x150>)
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	f7fb f9fe 	bl	8000288 <__aeabi_dsub>
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	462b      	mov	r3, r5
 8004e90:	f7fb fbb2 	bl	80005f8 <__aeabi_dmul>
 8004e94:	a338      	add	r3, pc, #224	; (adr r3, 8004f78 <__kernel_cos+0x158>)
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	f7fb f9f7 	bl	800028c <__adddf3>
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	f7fb fba9 	bl	80005f8 <__aeabi_dmul>
 8004ea6:	a336      	add	r3, pc, #216	; (adr r3, 8004f80 <__kernel_cos+0x160>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb f9ec 	bl	8000288 <__aeabi_dsub>
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	f7fb fba0 	bl	80005f8 <__aeabi_dmul>
 8004eb8:	a333      	add	r3, pc, #204	; (adr r3, 8004f88 <__kernel_cos+0x168>)
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f7fb f9e5 	bl	800028c <__adddf3>
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	f7fb fb97 	bl	80005f8 <__aeabi_dmul>
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	f7fb fb93 	bl	80005f8 <__aeabi_dmul>
 8004ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	460d      	mov	r5, r1
 8004eda:	4630      	mov	r0, r6
 8004edc:	4639      	mov	r1, r7
 8004ede:	f7fb fb8b 	bl	80005f8 <__aeabi_dmul>
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f7fb f9cd 	bl	8000288 <__aeabi_dsub>
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <__kernel_cos+0x17c>)
 8004ef0:	4598      	cmp	r8, r3
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	dc10      	bgt.n	8004f1a <__kernel_cos+0xfa>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4650      	mov	r0, sl
 8004efe:	4659      	mov	r1, fp
 8004f00:	f7fb f9c2 	bl	8000288 <__aeabi_dsub>
 8004f04:	460b      	mov	r3, r1
 8004f06:	4926      	ldr	r1, [pc, #152]	; (8004fa0 <__kernel_cos+0x180>)
 8004f08:	4602      	mov	r2, r0
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7fb f9bc 	bl	8000288 <__aeabi_dsub>
 8004f10:	ec41 0b10 	vmov	d0, r0, r1
 8004f14:	b003      	add	sp, #12
 8004f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <__kernel_cos+0x184>)
 8004f1c:	4920      	ldr	r1, [pc, #128]	; (8004fa0 <__kernel_cos+0x180>)
 8004f1e:	4598      	cmp	r8, r3
 8004f20:	bfcc      	ite	gt
 8004f22:	4d21      	ldrgt	r5, [pc, #132]	; (8004fa8 <__kernel_cos+0x188>)
 8004f24:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004f28:	2400      	movs	r4, #0
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f7fb f9aa 	bl	8000288 <__aeabi_dsub>
 8004f34:	4622      	mov	r2, r4
 8004f36:	4680      	mov	r8, r0
 8004f38:	4689      	mov	r9, r1
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	4659      	mov	r1, fp
 8004f40:	f7fb f9a2 	bl	8000288 <__aeabi_dsub>
 8004f44:	4632      	mov	r2, r6
 8004f46:	463b      	mov	r3, r7
 8004f48:	f7fb f99e 	bl	8000288 <__aeabi_dsub>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4640      	mov	r0, r8
 8004f52:	4649      	mov	r1, r9
 8004f54:	e7da      	b.n	8004f0c <__kernel_cos+0xec>
 8004f56:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004f90 <__kernel_cos+0x170>
 8004f5a:	e7db      	b.n	8004f14 <__kernel_cos+0xf4>
 8004f5c:	f3af 8000 	nop.w
 8004f60:	be8838d4 	.word	0xbe8838d4
 8004f64:	bda8fae9 	.word	0xbda8fae9
 8004f68:	bdb4b1c4 	.word	0xbdb4b1c4
 8004f6c:	3e21ee9e 	.word	0x3e21ee9e
 8004f70:	809c52ad 	.word	0x809c52ad
 8004f74:	3e927e4f 	.word	0x3e927e4f
 8004f78:	19cb1590 	.word	0x19cb1590
 8004f7c:	3efa01a0 	.word	0x3efa01a0
 8004f80:	16c15177 	.word	0x16c15177
 8004f84:	3f56c16c 	.word	0x3f56c16c
 8004f88:	5555554c 	.word	0x5555554c
 8004f8c:	3fa55555 	.word	0x3fa55555
 8004f90:	00000000 	.word	0x00000000
 8004f94:	3ff00000 	.word	0x3ff00000
 8004f98:	3fe00000 	.word	0x3fe00000
 8004f9c:	3fd33332 	.word	0x3fd33332
 8004fa0:	3ff00000 	.word	0x3ff00000
 8004fa4:	3fe90000 	.word	0x3fe90000
 8004fa8:	3fd20000 	.word	0x3fd20000
 8004fac:	00000000 	.word	0x00000000

08004fb0 <__kernel_sin>:
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	ed2d 8b04 	vpush	{d8-d9}
 8004fb8:	eeb0 8a41 	vmov.f32	s16, s2
 8004fbc:	eef0 8a61 	vmov.f32	s17, s3
 8004fc0:	ec55 4b10 	vmov	r4, r5, d0
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004fca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004fce:	9001      	str	r0, [sp, #4]
 8004fd0:	da06      	bge.n	8004fe0 <__kernel_sin+0x30>
 8004fd2:	ee10 0a10 	vmov	r0, s0
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	f7fb fdbe 	bl	8000b58 <__aeabi_d2iz>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d051      	beq.n	8005084 <__kernel_sin+0xd4>
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	f7fb fb06 	bl	80005f8 <__aeabi_dmul>
 8004fec:	4682      	mov	sl, r0
 8004fee:	468b      	mov	fp, r1
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f7fb fafe 	bl	80005f8 <__aeabi_dmul>
 8004ffc:	a341      	add	r3, pc, #260	; (adr r3, 8005104 <__kernel_sin+0x154>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	4680      	mov	r8, r0
 8005004:	4689      	mov	r9, r1
 8005006:	4650      	mov	r0, sl
 8005008:	4659      	mov	r1, fp
 800500a:	f7fb faf5 	bl	80005f8 <__aeabi_dmul>
 800500e:	a33f      	add	r3, pc, #252	; (adr r3, 800510c <__kernel_sin+0x15c>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb f938 	bl	8000288 <__aeabi_dsub>
 8005018:	4652      	mov	r2, sl
 800501a:	465b      	mov	r3, fp
 800501c:	f7fb faec 	bl	80005f8 <__aeabi_dmul>
 8005020:	a33c      	add	r3, pc, #240	; (adr r3, 8005114 <__kernel_sin+0x164>)
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f7fb f931 	bl	800028c <__adddf3>
 800502a:	4652      	mov	r2, sl
 800502c:	465b      	mov	r3, fp
 800502e:	f7fb fae3 	bl	80005f8 <__aeabi_dmul>
 8005032:	a33a      	add	r3, pc, #232	; (adr r3, 800511c <__kernel_sin+0x16c>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb f926 	bl	8000288 <__aeabi_dsub>
 800503c:	4652      	mov	r2, sl
 800503e:	465b      	mov	r3, fp
 8005040:	f7fb fada 	bl	80005f8 <__aeabi_dmul>
 8005044:	a337      	add	r3, pc, #220	; (adr r3, 8005124 <__kernel_sin+0x174>)
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f7fb f91f 	bl	800028c <__adddf3>
 800504e:	9b01      	ldr	r3, [sp, #4]
 8005050:	4606      	mov	r6, r0
 8005052:	460f      	mov	r7, r1
 8005054:	b9eb      	cbnz	r3, 8005092 <__kernel_sin+0xe2>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4650      	mov	r0, sl
 800505c:	4659      	mov	r1, fp
 800505e:	f7fb facb 	bl	80005f8 <__aeabi_dmul>
 8005062:	a325      	add	r3, pc, #148	; (adr r3, 80050f8 <__kernel_sin+0x148>)
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f7fb f90e 	bl	8000288 <__aeabi_dsub>
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	f7fb fac2 	bl	80005f8 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb f906 	bl	800028c <__adddf3>
 8005080:	4604      	mov	r4, r0
 8005082:	460d      	mov	r5, r1
 8005084:	ec45 4b10 	vmov	d0, r4, r5
 8005088:	b003      	add	sp, #12
 800508a:	ecbd 8b04 	vpop	{d8-d9}
 800508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005092:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <__kernel_sin+0x150>)
 8005094:	ec51 0b18 	vmov	r0, r1, d8
 8005098:	2200      	movs	r2, #0
 800509a:	f7fb faad 	bl	80005f8 <__aeabi_dmul>
 800509e:	4632      	mov	r2, r6
 80050a0:	ec41 0b19 	vmov	d9, r0, r1
 80050a4:	463b      	mov	r3, r7
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb faa5 	bl	80005f8 <__aeabi_dmul>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	ec51 0b19 	vmov	r0, r1, d9
 80050b6:	f7fb f8e7 	bl	8000288 <__aeabi_dsub>
 80050ba:	4652      	mov	r2, sl
 80050bc:	465b      	mov	r3, fp
 80050be:	f7fb fa9b 	bl	80005f8 <__aeabi_dmul>
 80050c2:	ec53 2b18 	vmov	r2, r3, d8
 80050c6:	f7fb f8df 	bl	8000288 <__aeabi_dsub>
 80050ca:	a30b      	add	r3, pc, #44	; (adr r3, 80050f8 <__kernel_sin+0x148>)
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	4606      	mov	r6, r0
 80050d2:	460f      	mov	r7, r1
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb fa8e 	bl	80005f8 <__aeabi_dmul>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4630      	mov	r0, r6
 80050e2:	4639      	mov	r1, r7
 80050e4:	f7fb f8d2 	bl	800028c <__adddf3>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4620      	mov	r0, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	f7fb f8ca 	bl	8000288 <__aeabi_dsub>
 80050f4:	e7c4      	b.n	8005080 <__kernel_sin+0xd0>
 80050f6:	bf00      	nop
 80050f8:	55555549 	.word	0x55555549
 80050fc:	3fc55555 	.word	0x3fc55555
 8005100:	3fe00000 	.word	0x3fe00000
 8005104:	5acfd57c 	.word	0x5acfd57c
 8005108:	3de5d93a 	.word	0x3de5d93a
 800510c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005110:	3e5ae5e6 	.word	0x3e5ae5e6
 8005114:	57b1fe7d 	.word	0x57b1fe7d
 8005118:	3ec71de3 	.word	0x3ec71de3
 800511c:	19c161d5 	.word	0x19c161d5
 8005120:	3f2a01a0 	.word	0x3f2a01a0
 8005124:	1110f8a6 	.word	0x1110f8a6
 8005128:	3f811111 	.word	0x3f811111
 800512c:	00000000 	.word	0x00000000

08005130 <__ieee754_rem_pio2>:
 8005130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005134:	ed2d 8b02 	vpush	{d8}
 8005138:	ec55 4b10 	vmov	r4, r5, d0
 800513c:	4bca      	ldr	r3, [pc, #808]	; (8005468 <__ieee754_rem_pio2+0x338>)
 800513e:	b08b      	sub	sp, #44	; 0x2c
 8005140:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005144:	4598      	cmp	r8, r3
 8005146:	4682      	mov	sl, r0
 8005148:	9502      	str	r5, [sp, #8]
 800514a:	dc08      	bgt.n	800515e <__ieee754_rem_pio2+0x2e>
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	ed80 0b00 	vstr	d0, [r0]
 8005154:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005158:	f04f 0b00 	mov.w	fp, #0
 800515c:	e028      	b.n	80051b0 <__ieee754_rem_pio2+0x80>
 800515e:	4bc3      	ldr	r3, [pc, #780]	; (800546c <__ieee754_rem_pio2+0x33c>)
 8005160:	4598      	cmp	r8, r3
 8005162:	dc78      	bgt.n	8005256 <__ieee754_rem_pio2+0x126>
 8005164:	9b02      	ldr	r3, [sp, #8]
 8005166:	4ec2      	ldr	r6, [pc, #776]	; (8005470 <__ieee754_rem_pio2+0x340>)
 8005168:	2b00      	cmp	r3, #0
 800516a:	ee10 0a10 	vmov	r0, s0
 800516e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005430 <__ieee754_rem_pio2+0x300>)
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	4629      	mov	r1, r5
 8005176:	dd39      	ble.n	80051ec <__ieee754_rem_pio2+0xbc>
 8005178:	f7fb f886 	bl	8000288 <__aeabi_dsub>
 800517c:	45b0      	cmp	r8, r6
 800517e:	4604      	mov	r4, r0
 8005180:	460d      	mov	r5, r1
 8005182:	d01b      	beq.n	80051bc <__ieee754_rem_pio2+0x8c>
 8005184:	a3ac      	add	r3, pc, #688	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f7fb f87d 	bl	8000288 <__aeabi_dsub>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	e9ca 2300 	strd	r2, r3, [sl]
 8005196:	4620      	mov	r0, r4
 8005198:	4629      	mov	r1, r5
 800519a:	f7fb f875 	bl	8000288 <__aeabi_dsub>
 800519e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f7fb f870 	bl	8000288 <__aeabi_dsub>
 80051a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80051ac:	f04f 0b01 	mov.w	fp, #1
 80051b0:	4658      	mov	r0, fp
 80051b2:	b00b      	add	sp, #44	; 0x2c
 80051b4:	ecbd 8b02 	vpop	{d8}
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005440 <__ieee754_rem_pio2+0x310>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f7fb f861 	bl	8000288 <__aeabi_dsub>
 80051c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	4604      	mov	r4, r0
 80051ce:	460d      	mov	r5, r1
 80051d0:	f7fb f85a 	bl	8000288 <__aeabi_dsub>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	e9ca 2300 	strd	r2, r3, [sl]
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fb f852 	bl	8000288 <__aeabi_dsub>
 80051e4:	a398      	add	r3, pc, #608	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	e7db      	b.n	80051a4 <__ieee754_rem_pio2+0x74>
 80051ec:	f7fb f84e 	bl	800028c <__adddf3>
 80051f0:	45b0      	cmp	r8, r6
 80051f2:	4604      	mov	r4, r0
 80051f4:	460d      	mov	r5, r1
 80051f6:	d016      	beq.n	8005226 <__ieee754_rem_pio2+0xf6>
 80051f8:	a38f      	add	r3, pc, #572	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fb f845 	bl	800028c <__adddf3>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	e9ca 2300 	strd	r2, r3, [sl]
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	f7fb f83b 	bl	8000288 <__aeabi_dsub>
 8005212:	a389      	add	r3, pc, #548	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fb f838 	bl	800028c <__adddf3>
 800521c:	f04f 3bff 	mov.w	fp, #4294967295
 8005220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005224:	e7c4      	b.n	80051b0 <__ieee754_rem_pio2+0x80>
 8005226:	a386      	add	r3, pc, #536	; (adr r3, 8005440 <__ieee754_rem_pio2+0x310>)
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	f7fb f82e 	bl	800028c <__adddf3>
 8005230:	a385      	add	r3, pc, #532	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	4604      	mov	r4, r0
 8005238:	460d      	mov	r5, r1
 800523a:	f7fb f827 	bl	800028c <__adddf3>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	e9ca 2300 	strd	r2, r3, [sl]
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f7fb f81d 	bl	8000288 <__aeabi_dsub>
 800524e:	a37e      	add	r3, pc, #504	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	e7e0      	b.n	8005218 <__ieee754_rem_pio2+0xe8>
 8005256:	4b87      	ldr	r3, [pc, #540]	; (8005474 <__ieee754_rem_pio2+0x344>)
 8005258:	4598      	cmp	r8, r3
 800525a:	f300 80d8 	bgt.w	800540e <__ieee754_rem_pio2+0x2de>
 800525e:	f000 f96d 	bl	800553c <fabs>
 8005262:	ec55 4b10 	vmov	r4, r5, d0
 8005266:	ee10 0a10 	vmov	r0, s0
 800526a:	a379      	add	r3, pc, #484	; (adr r3, 8005450 <__ieee754_rem_pio2+0x320>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	4629      	mov	r1, r5
 8005272:	f7fb f9c1 	bl	80005f8 <__aeabi_dmul>
 8005276:	4b80      	ldr	r3, [pc, #512]	; (8005478 <__ieee754_rem_pio2+0x348>)
 8005278:	2200      	movs	r2, #0
 800527a:	f7fb f807 	bl	800028c <__adddf3>
 800527e:	f7fb fc6b 	bl	8000b58 <__aeabi_d2iz>
 8005282:	4683      	mov	fp, r0
 8005284:	f7fb f94e 	bl	8000524 <__aeabi_i2d>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	ec43 2b18 	vmov	d8, r2, r3
 8005290:	a367      	add	r3, pc, #412	; (adr r3, 8005430 <__ieee754_rem_pio2+0x300>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb f9af 	bl	80005f8 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f7fa fff1 	bl	8000288 <__aeabi_dsub>
 80052a6:	a364      	add	r3, pc, #400	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	4606      	mov	r6, r0
 80052ae:	460f      	mov	r7, r1
 80052b0:	ec51 0b18 	vmov	r0, r1, d8
 80052b4:	f7fb f9a0 	bl	80005f8 <__aeabi_dmul>
 80052b8:	f1bb 0f1f 	cmp.w	fp, #31
 80052bc:	4604      	mov	r4, r0
 80052be:	460d      	mov	r5, r1
 80052c0:	dc0d      	bgt.n	80052de <__ieee754_rem_pio2+0x1ae>
 80052c2:	4b6e      	ldr	r3, [pc, #440]	; (800547c <__ieee754_rem_pio2+0x34c>)
 80052c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80052c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052cc:	4543      	cmp	r3, r8
 80052ce:	d006      	beq.n	80052de <__ieee754_rem_pio2+0x1ae>
 80052d0:	4622      	mov	r2, r4
 80052d2:	462b      	mov	r3, r5
 80052d4:	4630      	mov	r0, r6
 80052d6:	4639      	mov	r1, r7
 80052d8:	f7fa ffd6 	bl	8000288 <__aeabi_dsub>
 80052dc:	e00e      	b.n	80052fc <__ieee754_rem_pio2+0x1cc>
 80052de:	462b      	mov	r3, r5
 80052e0:	4622      	mov	r2, r4
 80052e2:	4630      	mov	r0, r6
 80052e4:	4639      	mov	r1, r7
 80052e6:	f7fa ffcf 	bl	8000288 <__aeabi_dsub>
 80052ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80052ee:	9303      	str	r3, [sp, #12]
 80052f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052f4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	dc02      	bgt.n	8005302 <__ieee754_rem_pio2+0x1d2>
 80052fc:	e9ca 0100 	strd	r0, r1, [sl]
 8005300:	e039      	b.n	8005376 <__ieee754_rem_pio2+0x246>
 8005302:	a34f      	add	r3, pc, #316	; (adr r3, 8005440 <__ieee754_rem_pio2+0x310>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	ec51 0b18 	vmov	r0, r1, d8
 800530c:	f7fb f974 	bl	80005f8 <__aeabi_dmul>
 8005310:	4604      	mov	r4, r0
 8005312:	460d      	mov	r5, r1
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4630      	mov	r0, r6
 800531a:	4639      	mov	r1, r7
 800531c:	f7fa ffb4 	bl	8000288 <__aeabi_dsub>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4680      	mov	r8, r0
 8005326:	4689      	mov	r9, r1
 8005328:	4630      	mov	r0, r6
 800532a:	4639      	mov	r1, r7
 800532c:	f7fa ffac 	bl	8000288 <__aeabi_dsub>
 8005330:	4622      	mov	r2, r4
 8005332:	462b      	mov	r3, r5
 8005334:	f7fa ffa8 	bl	8000288 <__aeabi_dsub>
 8005338:	a343      	add	r3, pc, #268	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	4604      	mov	r4, r0
 8005340:	460d      	mov	r5, r1
 8005342:	ec51 0b18 	vmov	r0, r1, d8
 8005346:	f7fb f957 	bl	80005f8 <__aeabi_dmul>
 800534a:	4622      	mov	r2, r4
 800534c:	462b      	mov	r3, r5
 800534e:	f7fa ff9b 	bl	8000288 <__aeabi_dsub>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4604      	mov	r4, r0
 8005358:	460d      	mov	r5, r1
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fa ff93 	bl	8000288 <__aeabi_dsub>
 8005362:	9a03      	ldr	r2, [sp, #12]
 8005364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b31      	cmp	r3, #49	; 0x31
 800536c:	dc24      	bgt.n	80053b8 <__ieee754_rem_pio2+0x288>
 800536e:	e9ca 0100 	strd	r0, r1, [sl]
 8005372:	4646      	mov	r6, r8
 8005374:	464f      	mov	r7, r9
 8005376:	e9da 8900 	ldrd	r8, r9, [sl]
 800537a:	4630      	mov	r0, r6
 800537c:	4642      	mov	r2, r8
 800537e:	464b      	mov	r3, r9
 8005380:	4639      	mov	r1, r7
 8005382:	f7fa ff81 	bl	8000288 <__aeabi_dsub>
 8005386:	462b      	mov	r3, r5
 8005388:	4622      	mov	r2, r4
 800538a:	f7fa ff7d 	bl	8000288 <__aeabi_dsub>
 800538e:	9b02      	ldr	r3, [sp, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005396:	f6bf af0b 	bge.w	80051b0 <__ieee754_rem_pio2+0x80>
 800539a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800539e:	f8ca 3004 	str.w	r3, [sl, #4]
 80053a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053a6:	f8ca 8000 	str.w	r8, [sl]
 80053aa:	f8ca 0008 	str.w	r0, [sl, #8]
 80053ae:	f8ca 300c 	str.w	r3, [sl, #12]
 80053b2:	f1cb 0b00 	rsb	fp, fp, #0
 80053b6:	e6fb      	b.n	80051b0 <__ieee754_rem_pio2+0x80>
 80053b8:	a327      	add	r3, pc, #156	; (adr r3, 8005458 <__ieee754_rem_pio2+0x328>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	ec51 0b18 	vmov	r0, r1, d8
 80053c2:	f7fb f919 	bl	80005f8 <__aeabi_dmul>
 80053c6:	4604      	mov	r4, r0
 80053c8:	460d      	mov	r5, r1
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4640      	mov	r0, r8
 80053d0:	4649      	mov	r1, r9
 80053d2:	f7fa ff59 	bl	8000288 <__aeabi_dsub>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4606      	mov	r6, r0
 80053dc:	460f      	mov	r7, r1
 80053de:	4640      	mov	r0, r8
 80053e0:	4649      	mov	r1, r9
 80053e2:	f7fa ff51 	bl	8000288 <__aeabi_dsub>
 80053e6:	4622      	mov	r2, r4
 80053e8:	462b      	mov	r3, r5
 80053ea:	f7fa ff4d 	bl	8000288 <__aeabi_dsub>
 80053ee:	a31c      	add	r3, pc, #112	; (adr r3, 8005460 <__ieee754_rem_pio2+0x330>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	4604      	mov	r4, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	ec51 0b18 	vmov	r0, r1, d8
 80053fc:	f7fb f8fc 	bl	80005f8 <__aeabi_dmul>
 8005400:	4622      	mov	r2, r4
 8005402:	462b      	mov	r3, r5
 8005404:	f7fa ff40 	bl	8000288 <__aeabi_dsub>
 8005408:	4604      	mov	r4, r0
 800540a:	460d      	mov	r5, r1
 800540c:	e760      	b.n	80052d0 <__ieee754_rem_pio2+0x1a0>
 800540e:	4b1c      	ldr	r3, [pc, #112]	; (8005480 <__ieee754_rem_pio2+0x350>)
 8005410:	4598      	cmp	r8, r3
 8005412:	dd37      	ble.n	8005484 <__ieee754_rem_pio2+0x354>
 8005414:	ee10 2a10 	vmov	r2, s0
 8005418:	462b      	mov	r3, r5
 800541a:	4620      	mov	r0, r4
 800541c:	4629      	mov	r1, r5
 800541e:	f7fa ff33 	bl	8000288 <__aeabi_dsub>
 8005422:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005426:	e9ca 0100 	strd	r0, r1, [sl]
 800542a:	e695      	b.n	8005158 <__ieee754_rem_pio2+0x28>
 800542c:	f3af 8000 	nop.w
 8005430:	54400000 	.word	0x54400000
 8005434:	3ff921fb 	.word	0x3ff921fb
 8005438:	1a626331 	.word	0x1a626331
 800543c:	3dd0b461 	.word	0x3dd0b461
 8005440:	1a600000 	.word	0x1a600000
 8005444:	3dd0b461 	.word	0x3dd0b461
 8005448:	2e037073 	.word	0x2e037073
 800544c:	3ba3198a 	.word	0x3ba3198a
 8005450:	6dc9c883 	.word	0x6dc9c883
 8005454:	3fe45f30 	.word	0x3fe45f30
 8005458:	2e000000 	.word	0x2e000000
 800545c:	3ba3198a 	.word	0x3ba3198a
 8005460:	252049c1 	.word	0x252049c1
 8005464:	397b839a 	.word	0x397b839a
 8005468:	3fe921fb 	.word	0x3fe921fb
 800546c:	4002d97b 	.word	0x4002d97b
 8005470:	3ff921fb 	.word	0x3ff921fb
 8005474:	413921fb 	.word	0x413921fb
 8005478:	3fe00000 	.word	0x3fe00000
 800547c:	0800618c 	.word	0x0800618c
 8005480:	7fefffff 	.word	0x7fefffff
 8005484:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005488:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800548c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005490:	4620      	mov	r0, r4
 8005492:	460d      	mov	r5, r1
 8005494:	f7fb fb60 	bl	8000b58 <__aeabi_d2iz>
 8005498:	f7fb f844 	bl	8000524 <__aeabi_i2d>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4620      	mov	r0, r4
 80054a2:	4629      	mov	r1, r5
 80054a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054a8:	f7fa feee 	bl	8000288 <__aeabi_dsub>
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <__ieee754_rem_pio2+0x404>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	f7fb f8a2 	bl	80005f8 <__aeabi_dmul>
 80054b4:	460d      	mov	r5, r1
 80054b6:	4604      	mov	r4, r0
 80054b8:	f7fb fb4e 	bl	8000b58 <__aeabi_d2iz>
 80054bc:	f7fb f832 	bl	8000524 <__aeabi_i2d>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4620      	mov	r0, r4
 80054c6:	4629      	mov	r1, r5
 80054c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054cc:	f7fa fedc 	bl	8000288 <__aeabi_dsub>
 80054d0:	4b18      	ldr	r3, [pc, #96]	; (8005534 <__ieee754_rem_pio2+0x404>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	f7fb f890 	bl	80005f8 <__aeabi_dmul>
 80054d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054dc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80054e0:	2703      	movs	r7, #3
 80054e2:	2400      	movs	r4, #0
 80054e4:	2500      	movs	r5, #0
 80054e6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80054ea:	4622      	mov	r2, r4
 80054ec:	462b      	mov	r3, r5
 80054ee:	46b9      	mov	r9, r7
 80054f0:	3f01      	subs	r7, #1
 80054f2:	f7fb fae9 	bl	8000ac8 <__aeabi_dcmpeq>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d1f5      	bne.n	80054e6 <__ieee754_rem_pio2+0x3b6>
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <__ieee754_rem_pio2+0x408>)
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	2302      	movs	r3, #2
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	4632      	mov	r2, r6
 8005504:	464b      	mov	r3, r9
 8005506:	4651      	mov	r1, sl
 8005508:	a804      	add	r0, sp, #16
 800550a:	f000 f821 	bl	8005550 <__kernel_rem_pio2>
 800550e:	9b02      	ldr	r3, [sp, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	4683      	mov	fp, r0
 8005514:	f6bf ae4c 	bge.w	80051b0 <__ieee754_rem_pio2+0x80>
 8005518:	e9da 2100 	ldrd	r2, r1, [sl]
 800551c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005520:	e9ca 2300 	strd	r2, r3, [sl]
 8005524:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005528:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800552c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005530:	e73f      	b.n	80053b2 <__ieee754_rem_pio2+0x282>
 8005532:	bf00      	nop
 8005534:	41700000 	.word	0x41700000
 8005538:	0800620c 	.word	0x0800620c

0800553c <fabs>:
 800553c:	ec51 0b10 	vmov	r0, r1, d0
 8005540:	ee10 2a10 	vmov	r2, s0
 8005544:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005548:	ec43 2b10 	vmov	d0, r2, r3
 800554c:	4770      	bx	lr
	...

08005550 <__kernel_rem_pio2>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	ed2d 8b02 	vpush	{d8}
 8005558:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800555c:	f112 0f14 	cmn.w	r2, #20
 8005560:	9306      	str	r3, [sp, #24]
 8005562:	9104      	str	r1, [sp, #16]
 8005564:	4bc2      	ldr	r3, [pc, #776]	; (8005870 <__kernel_rem_pio2+0x320>)
 8005566:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005568:	9009      	str	r0, [sp, #36]	; 0x24
 800556a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	9b06      	ldr	r3, [sp, #24]
 8005572:	f103 33ff 	add.w	r3, r3, #4294967295
 8005576:	bfa8      	it	ge
 8005578:	1ed4      	subge	r4, r2, #3
 800557a:	9305      	str	r3, [sp, #20]
 800557c:	bfb2      	itee	lt
 800557e:	2400      	movlt	r4, #0
 8005580:	2318      	movge	r3, #24
 8005582:	fb94 f4f3 	sdivge	r4, r4, r3
 8005586:	f06f 0317 	mvn.w	r3, #23
 800558a:	fb04 3303 	mla	r3, r4, r3, r3
 800558e:	eb03 0a02 	add.w	sl, r3, r2
 8005592:	9b00      	ldr	r3, [sp, #0]
 8005594:	9a05      	ldr	r2, [sp, #20]
 8005596:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005860 <__kernel_rem_pio2+0x310>
 800559a:	eb03 0802 	add.w	r8, r3, r2
 800559e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80055a0:	1aa7      	subs	r7, r4, r2
 80055a2:	ae20      	add	r6, sp, #128	; 0x80
 80055a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80055a8:	2500      	movs	r5, #0
 80055aa:	4545      	cmp	r5, r8
 80055ac:	dd13      	ble.n	80055d6 <__kernel_rem_pio2+0x86>
 80055ae:	9b06      	ldr	r3, [sp, #24]
 80055b0:	aa20      	add	r2, sp, #128	; 0x80
 80055b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80055b6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80055ba:	f04f 0800 	mov.w	r8, #0
 80055be:	9b00      	ldr	r3, [sp, #0]
 80055c0:	4598      	cmp	r8, r3
 80055c2:	dc31      	bgt.n	8005628 <__kernel_rem_pio2+0xd8>
 80055c4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005860 <__kernel_rem_pio2+0x310>
 80055c8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80055cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055d0:	462f      	mov	r7, r5
 80055d2:	2600      	movs	r6, #0
 80055d4:	e01b      	b.n	800560e <__kernel_rem_pio2+0xbe>
 80055d6:	42ef      	cmn	r7, r5
 80055d8:	d407      	bmi.n	80055ea <__kernel_rem_pio2+0x9a>
 80055da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80055de:	f7fa ffa1 	bl	8000524 <__aeabi_i2d>
 80055e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80055e6:	3501      	adds	r5, #1
 80055e8:	e7df      	b.n	80055aa <__kernel_rem_pio2+0x5a>
 80055ea:	ec51 0b18 	vmov	r0, r1, d8
 80055ee:	e7f8      	b.n	80055e2 <__kernel_rem_pio2+0x92>
 80055f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80055f8:	f7fa fffe 	bl	80005f8 <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005604:	f7fa fe42 	bl	800028c <__adddf3>
 8005608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800560c:	3601      	adds	r6, #1
 800560e:	9b05      	ldr	r3, [sp, #20]
 8005610:	429e      	cmp	r6, r3
 8005612:	f1a7 0708 	sub.w	r7, r7, #8
 8005616:	ddeb      	ble.n	80055f0 <__kernel_rem_pio2+0xa0>
 8005618:	ed9d 7b02 	vldr	d7, [sp, #8]
 800561c:	f108 0801 	add.w	r8, r8, #1
 8005620:	ecab 7b02 	vstmia	fp!, {d7}
 8005624:	3508      	adds	r5, #8
 8005626:	e7ca      	b.n	80055be <__kernel_rem_pio2+0x6e>
 8005628:	9b00      	ldr	r3, [sp, #0]
 800562a:	aa0c      	add	r2, sp, #48	; 0x30
 800562c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005630:	930b      	str	r3, [sp, #44]	; 0x2c
 8005632:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005634:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005638:	9c00      	ldr	r4, [sp, #0]
 800563a:	930a      	str	r3, [sp, #40]	; 0x28
 800563c:	00e3      	lsls	r3, r4, #3
 800563e:	9308      	str	r3, [sp, #32]
 8005640:	ab98      	add	r3, sp, #608	; 0x260
 8005642:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005646:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800564a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800564e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005650:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005654:	46c3      	mov	fp, r8
 8005656:	46a1      	mov	r9, r4
 8005658:	f1b9 0f00 	cmp.w	r9, #0
 800565c:	f1a5 0508 	sub.w	r5, r5, #8
 8005660:	dc77      	bgt.n	8005752 <__kernel_rem_pio2+0x202>
 8005662:	ec47 6b10 	vmov	d0, r6, r7
 8005666:	4650      	mov	r0, sl
 8005668:	f000 fac2 	bl	8005bf0 <scalbn>
 800566c:	ec57 6b10 	vmov	r6, r7, d0
 8005670:	2200      	movs	r2, #0
 8005672:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005676:	ee10 0a10 	vmov	r0, s0
 800567a:	4639      	mov	r1, r7
 800567c:	f7fa ffbc 	bl	80005f8 <__aeabi_dmul>
 8005680:	ec41 0b10 	vmov	d0, r0, r1
 8005684:	f000 fb34 	bl	8005cf0 <floor>
 8005688:	4b7a      	ldr	r3, [pc, #488]	; (8005874 <__kernel_rem_pio2+0x324>)
 800568a:	ec51 0b10 	vmov	r0, r1, d0
 800568e:	2200      	movs	r2, #0
 8005690:	f7fa ffb2 	bl	80005f8 <__aeabi_dmul>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4630      	mov	r0, r6
 800569a:	4639      	mov	r1, r7
 800569c:	f7fa fdf4 	bl	8000288 <__aeabi_dsub>
 80056a0:	460f      	mov	r7, r1
 80056a2:	4606      	mov	r6, r0
 80056a4:	f7fb fa58 	bl	8000b58 <__aeabi_d2iz>
 80056a8:	9002      	str	r0, [sp, #8]
 80056aa:	f7fa ff3b 	bl	8000524 <__aeabi_i2d>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4630      	mov	r0, r6
 80056b4:	4639      	mov	r1, r7
 80056b6:	f7fa fde7 	bl	8000288 <__aeabi_dsub>
 80056ba:	f1ba 0f00 	cmp.w	sl, #0
 80056be:	4606      	mov	r6, r0
 80056c0:	460f      	mov	r7, r1
 80056c2:	dd6d      	ble.n	80057a0 <__kernel_rem_pio2+0x250>
 80056c4:	1e61      	subs	r1, r4, #1
 80056c6:	ab0c      	add	r3, sp, #48	; 0x30
 80056c8:	9d02      	ldr	r5, [sp, #8]
 80056ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056ce:	f1ca 0018 	rsb	r0, sl, #24
 80056d2:	fa43 f200 	asr.w	r2, r3, r0
 80056d6:	4415      	add	r5, r2
 80056d8:	4082      	lsls	r2, r0
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	aa0c      	add	r2, sp, #48	; 0x30
 80056de:	9502      	str	r5, [sp, #8]
 80056e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80056e4:	f1ca 0217 	rsb	r2, sl, #23
 80056e8:	fa43 fb02 	asr.w	fp, r3, r2
 80056ec:	f1bb 0f00 	cmp.w	fp, #0
 80056f0:	dd65      	ble.n	80057be <__kernel_rem_pio2+0x26e>
 80056f2:	9b02      	ldr	r3, [sp, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	3301      	adds	r3, #1
 80056f8:	9302      	str	r3, [sp, #8]
 80056fa:	4615      	mov	r5, r2
 80056fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005700:	4294      	cmp	r4, r2
 8005702:	f300 809f 	bgt.w	8005844 <__kernel_rem_pio2+0x2f4>
 8005706:	f1ba 0f00 	cmp.w	sl, #0
 800570a:	dd07      	ble.n	800571c <__kernel_rem_pio2+0x1cc>
 800570c:	f1ba 0f01 	cmp.w	sl, #1
 8005710:	f000 80c1 	beq.w	8005896 <__kernel_rem_pio2+0x346>
 8005714:	f1ba 0f02 	cmp.w	sl, #2
 8005718:	f000 80c7 	beq.w	80058aa <__kernel_rem_pio2+0x35a>
 800571c:	f1bb 0f02 	cmp.w	fp, #2
 8005720:	d14d      	bne.n	80057be <__kernel_rem_pio2+0x26e>
 8005722:	4632      	mov	r2, r6
 8005724:	463b      	mov	r3, r7
 8005726:	4954      	ldr	r1, [pc, #336]	; (8005878 <__kernel_rem_pio2+0x328>)
 8005728:	2000      	movs	r0, #0
 800572a:	f7fa fdad 	bl	8000288 <__aeabi_dsub>
 800572e:	4606      	mov	r6, r0
 8005730:	460f      	mov	r7, r1
 8005732:	2d00      	cmp	r5, #0
 8005734:	d043      	beq.n	80057be <__kernel_rem_pio2+0x26e>
 8005736:	4650      	mov	r0, sl
 8005738:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005868 <__kernel_rem_pio2+0x318>
 800573c:	f000 fa58 	bl	8005bf0 <scalbn>
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	ec53 2b10 	vmov	r2, r3, d0
 8005748:	f7fa fd9e 	bl	8000288 <__aeabi_dsub>
 800574c:	4606      	mov	r6, r0
 800574e:	460f      	mov	r7, r1
 8005750:	e035      	b.n	80057be <__kernel_rem_pio2+0x26e>
 8005752:	4b4a      	ldr	r3, [pc, #296]	; (800587c <__kernel_rem_pio2+0x32c>)
 8005754:	2200      	movs	r2, #0
 8005756:	4630      	mov	r0, r6
 8005758:	4639      	mov	r1, r7
 800575a:	f7fa ff4d 	bl	80005f8 <__aeabi_dmul>
 800575e:	f7fb f9fb 	bl	8000b58 <__aeabi_d2iz>
 8005762:	f7fa fedf 	bl	8000524 <__aeabi_i2d>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	ec43 2b18 	vmov	d8, r2, r3
 800576e:	4b44      	ldr	r3, [pc, #272]	; (8005880 <__kernel_rem_pio2+0x330>)
 8005770:	2200      	movs	r2, #0
 8005772:	f7fa ff41 	bl	80005f8 <__aeabi_dmul>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4630      	mov	r0, r6
 800577c:	4639      	mov	r1, r7
 800577e:	f7fa fd83 	bl	8000288 <__aeabi_dsub>
 8005782:	f7fb f9e9 	bl	8000b58 <__aeabi_d2iz>
 8005786:	e9d5 2300 	ldrd	r2, r3, [r5]
 800578a:	f84b 0b04 	str.w	r0, [fp], #4
 800578e:	ec51 0b18 	vmov	r0, r1, d8
 8005792:	f7fa fd7b 	bl	800028c <__adddf3>
 8005796:	f109 39ff 	add.w	r9, r9, #4294967295
 800579a:	4606      	mov	r6, r0
 800579c:	460f      	mov	r7, r1
 800579e:	e75b      	b.n	8005658 <__kernel_rem_pio2+0x108>
 80057a0:	d106      	bne.n	80057b0 <__kernel_rem_pio2+0x260>
 80057a2:	1e63      	subs	r3, r4, #1
 80057a4:	aa0c      	add	r2, sp, #48	; 0x30
 80057a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057aa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80057ae:	e79d      	b.n	80056ec <__kernel_rem_pio2+0x19c>
 80057b0:	4b34      	ldr	r3, [pc, #208]	; (8005884 <__kernel_rem_pio2+0x334>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	f7fb f9a6 	bl	8000b04 <__aeabi_dcmpge>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d140      	bne.n	800583e <__kernel_rem_pio2+0x2ee>
 80057bc:	4683      	mov	fp, r0
 80057be:	2200      	movs	r2, #0
 80057c0:	2300      	movs	r3, #0
 80057c2:	4630      	mov	r0, r6
 80057c4:	4639      	mov	r1, r7
 80057c6:	f7fb f97f 	bl	8000ac8 <__aeabi_dcmpeq>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f000 80c1 	beq.w	8005952 <__kernel_rem_pio2+0x402>
 80057d0:	1e65      	subs	r5, r4, #1
 80057d2:	462b      	mov	r3, r5
 80057d4:	2200      	movs	r2, #0
 80057d6:	9900      	ldr	r1, [sp, #0]
 80057d8:	428b      	cmp	r3, r1
 80057da:	da6d      	bge.n	80058b8 <__kernel_rem_pio2+0x368>
 80057dc:	2a00      	cmp	r2, #0
 80057de:	f000 808a 	beq.w	80058f6 <__kernel_rem_pio2+0x3a6>
 80057e2:	ab0c      	add	r3, sp, #48	; 0x30
 80057e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80057e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80ae 	beq.w	800594e <__kernel_rem_pio2+0x3fe>
 80057f2:	4650      	mov	r0, sl
 80057f4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005868 <__kernel_rem_pio2+0x318>
 80057f8:	f000 f9fa 	bl	8005bf0 <scalbn>
 80057fc:	1c6b      	adds	r3, r5, #1
 80057fe:	00da      	lsls	r2, r3, #3
 8005800:	9205      	str	r2, [sp, #20]
 8005802:	ec57 6b10 	vmov	r6, r7, d0
 8005806:	aa70      	add	r2, sp, #448	; 0x1c0
 8005808:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800587c <__kernel_rem_pio2+0x32c>
 800580c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005810:	462c      	mov	r4, r5
 8005812:	f04f 0800 	mov.w	r8, #0
 8005816:	2c00      	cmp	r4, #0
 8005818:	f280 80d4 	bge.w	80059c4 <__kernel_rem_pio2+0x474>
 800581c:	462c      	mov	r4, r5
 800581e:	2c00      	cmp	r4, #0
 8005820:	f2c0 8102 	blt.w	8005a28 <__kernel_rem_pio2+0x4d8>
 8005824:	4b18      	ldr	r3, [pc, #96]	; (8005888 <__kernel_rem_pio2+0x338>)
 8005826:	461e      	mov	r6, r3
 8005828:	ab70      	add	r3, sp, #448	; 0x1c0
 800582a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800582e:	1b2b      	subs	r3, r5, r4
 8005830:	f04f 0900 	mov.w	r9, #0
 8005834:	f04f 0a00 	mov.w	sl, #0
 8005838:	2700      	movs	r7, #0
 800583a:	9306      	str	r3, [sp, #24]
 800583c:	e0e6      	b.n	8005a0c <__kernel_rem_pio2+0x4bc>
 800583e:	f04f 0b02 	mov.w	fp, #2
 8005842:	e756      	b.n	80056f2 <__kernel_rem_pio2+0x1a2>
 8005844:	f8d8 3000 	ldr.w	r3, [r8]
 8005848:	bb05      	cbnz	r5, 800588c <__kernel_rem_pio2+0x33c>
 800584a:	b123      	cbz	r3, 8005856 <__kernel_rem_pio2+0x306>
 800584c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005850:	f8c8 3000 	str.w	r3, [r8]
 8005854:	2301      	movs	r3, #1
 8005856:	3201      	adds	r2, #1
 8005858:	f108 0804 	add.w	r8, r8, #4
 800585c:	461d      	mov	r5, r3
 800585e:	e74f      	b.n	8005700 <__kernel_rem_pio2+0x1b0>
	...
 800586c:	3ff00000 	.word	0x3ff00000
 8005870:	08006358 	.word	0x08006358
 8005874:	40200000 	.word	0x40200000
 8005878:	3ff00000 	.word	0x3ff00000
 800587c:	3e700000 	.word	0x3e700000
 8005880:	41700000 	.word	0x41700000
 8005884:	3fe00000 	.word	0x3fe00000
 8005888:	08006318 	.word	0x08006318
 800588c:	1acb      	subs	r3, r1, r3
 800588e:	f8c8 3000 	str.w	r3, [r8]
 8005892:	462b      	mov	r3, r5
 8005894:	e7df      	b.n	8005856 <__kernel_rem_pio2+0x306>
 8005896:	1e62      	subs	r2, r4, #1
 8005898:	ab0c      	add	r3, sp, #48	; 0x30
 800589a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80058a2:	a90c      	add	r1, sp, #48	; 0x30
 80058a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80058a8:	e738      	b.n	800571c <__kernel_rem_pio2+0x1cc>
 80058aa:	1e62      	subs	r2, r4, #1
 80058ac:	ab0c      	add	r3, sp, #48	; 0x30
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80058b6:	e7f4      	b.n	80058a2 <__kernel_rem_pio2+0x352>
 80058b8:	a90c      	add	r1, sp, #48	; 0x30
 80058ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80058be:	3b01      	subs	r3, #1
 80058c0:	430a      	orrs	r2, r1
 80058c2:	e788      	b.n	80057d6 <__kernel_rem_pio2+0x286>
 80058c4:	3301      	adds	r3, #1
 80058c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80058ca:	2900      	cmp	r1, #0
 80058cc:	d0fa      	beq.n	80058c4 <__kernel_rem_pio2+0x374>
 80058ce:	9a08      	ldr	r2, [sp, #32]
 80058d0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80058d4:	446a      	add	r2, sp
 80058d6:	3a98      	subs	r2, #152	; 0x98
 80058d8:	9208      	str	r2, [sp, #32]
 80058da:	9a06      	ldr	r2, [sp, #24]
 80058dc:	a920      	add	r1, sp, #128	; 0x80
 80058de:	18a2      	adds	r2, r4, r2
 80058e0:	18e3      	adds	r3, r4, r3
 80058e2:	f104 0801 	add.w	r8, r4, #1
 80058e6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	9b02      	ldr	r3, [sp, #8]
 80058ee:	4543      	cmp	r3, r8
 80058f0:	da04      	bge.n	80058fc <__kernel_rem_pio2+0x3ac>
 80058f2:	461c      	mov	r4, r3
 80058f4:	e6a2      	b.n	800563c <__kernel_rem_pio2+0xec>
 80058f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058f8:	2301      	movs	r3, #1
 80058fa:	e7e4      	b.n	80058c6 <__kernel_rem_pio2+0x376>
 80058fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005902:	f7fa fe0f 	bl	8000524 <__aeabi_i2d>
 8005906:	e8e5 0102 	strd	r0, r1, [r5], #8
 800590a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590c:	46ab      	mov	fp, r5
 800590e:	461c      	mov	r4, r3
 8005910:	f04f 0900 	mov.w	r9, #0
 8005914:	2600      	movs	r6, #0
 8005916:	2700      	movs	r7, #0
 8005918:	9b05      	ldr	r3, [sp, #20]
 800591a:	4599      	cmp	r9, r3
 800591c:	dd06      	ble.n	800592c <__kernel_rem_pio2+0x3dc>
 800591e:	9b08      	ldr	r3, [sp, #32]
 8005920:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005924:	f108 0801 	add.w	r8, r8, #1
 8005928:	9308      	str	r3, [sp, #32]
 800592a:	e7df      	b.n	80058ec <__kernel_rem_pio2+0x39c>
 800592c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005930:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005934:	f7fa fe60 	bl	80005f8 <__aeabi_dmul>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4630      	mov	r0, r6
 800593e:	4639      	mov	r1, r7
 8005940:	f7fa fca4 	bl	800028c <__adddf3>
 8005944:	f109 0901 	add.w	r9, r9, #1
 8005948:	4606      	mov	r6, r0
 800594a:	460f      	mov	r7, r1
 800594c:	e7e4      	b.n	8005918 <__kernel_rem_pio2+0x3c8>
 800594e:	3d01      	subs	r5, #1
 8005950:	e747      	b.n	80057e2 <__kernel_rem_pio2+0x292>
 8005952:	ec47 6b10 	vmov	d0, r6, r7
 8005956:	f1ca 0000 	rsb	r0, sl, #0
 800595a:	f000 f949 	bl	8005bf0 <scalbn>
 800595e:	ec57 6b10 	vmov	r6, r7, d0
 8005962:	4ba0      	ldr	r3, [pc, #640]	; (8005be4 <__kernel_rem_pio2+0x694>)
 8005964:	ee10 0a10 	vmov	r0, s0
 8005968:	2200      	movs	r2, #0
 800596a:	4639      	mov	r1, r7
 800596c:	f7fb f8ca 	bl	8000b04 <__aeabi_dcmpge>
 8005970:	b1f8      	cbz	r0, 80059b2 <__kernel_rem_pio2+0x462>
 8005972:	4b9d      	ldr	r3, [pc, #628]	; (8005be8 <__kernel_rem_pio2+0x698>)
 8005974:	2200      	movs	r2, #0
 8005976:	4630      	mov	r0, r6
 8005978:	4639      	mov	r1, r7
 800597a:	f7fa fe3d 	bl	80005f8 <__aeabi_dmul>
 800597e:	f7fb f8eb 	bl	8000b58 <__aeabi_d2iz>
 8005982:	4680      	mov	r8, r0
 8005984:	f7fa fdce 	bl	8000524 <__aeabi_i2d>
 8005988:	4b96      	ldr	r3, [pc, #600]	; (8005be4 <__kernel_rem_pio2+0x694>)
 800598a:	2200      	movs	r2, #0
 800598c:	f7fa fe34 	bl	80005f8 <__aeabi_dmul>
 8005990:	460b      	mov	r3, r1
 8005992:	4602      	mov	r2, r0
 8005994:	4639      	mov	r1, r7
 8005996:	4630      	mov	r0, r6
 8005998:	f7fa fc76 	bl	8000288 <__aeabi_dsub>
 800599c:	f7fb f8dc 	bl	8000b58 <__aeabi_d2iz>
 80059a0:	1c65      	adds	r5, r4, #1
 80059a2:	ab0c      	add	r3, sp, #48	; 0x30
 80059a4:	f10a 0a18 	add.w	sl, sl, #24
 80059a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80059ac:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80059b0:	e71f      	b.n	80057f2 <__kernel_rem_pio2+0x2a2>
 80059b2:	4630      	mov	r0, r6
 80059b4:	4639      	mov	r1, r7
 80059b6:	f7fb f8cf 	bl	8000b58 <__aeabi_d2iz>
 80059ba:	ab0c      	add	r3, sp, #48	; 0x30
 80059bc:	4625      	mov	r5, r4
 80059be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80059c2:	e716      	b.n	80057f2 <__kernel_rem_pio2+0x2a2>
 80059c4:	ab0c      	add	r3, sp, #48	; 0x30
 80059c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80059ca:	f7fa fdab 	bl	8000524 <__aeabi_i2d>
 80059ce:	4632      	mov	r2, r6
 80059d0:	463b      	mov	r3, r7
 80059d2:	f7fa fe11 	bl	80005f8 <__aeabi_dmul>
 80059d6:	4642      	mov	r2, r8
 80059d8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80059dc:	464b      	mov	r3, r9
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fa fe09 	bl	80005f8 <__aeabi_dmul>
 80059e6:	3c01      	subs	r4, #1
 80059e8:	4606      	mov	r6, r0
 80059ea:	460f      	mov	r7, r1
 80059ec:	e713      	b.n	8005816 <__kernel_rem_pio2+0x2c6>
 80059ee:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80059f2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80059f6:	f7fa fdff 	bl	80005f8 <__aeabi_dmul>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4648      	mov	r0, r9
 8005a00:	4651      	mov	r1, sl
 8005a02:	f7fa fc43 	bl	800028c <__adddf3>
 8005a06:	3701      	adds	r7, #1
 8005a08:	4681      	mov	r9, r0
 8005a0a:	468a      	mov	sl, r1
 8005a0c:	9b00      	ldr	r3, [sp, #0]
 8005a0e:	429f      	cmp	r7, r3
 8005a10:	dc02      	bgt.n	8005a18 <__kernel_rem_pio2+0x4c8>
 8005a12:	9b06      	ldr	r3, [sp, #24]
 8005a14:	429f      	cmp	r7, r3
 8005a16:	ddea      	ble.n	80059ee <__kernel_rem_pio2+0x49e>
 8005a18:	9a06      	ldr	r2, [sp, #24]
 8005a1a:	ab48      	add	r3, sp, #288	; 0x120
 8005a1c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005a20:	e9c6 9a00 	strd	r9, sl, [r6]
 8005a24:	3c01      	subs	r4, #1
 8005a26:	e6fa      	b.n	800581e <__kernel_rem_pio2+0x2ce>
 8005a28:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	dc0b      	bgt.n	8005a46 <__kernel_rem_pio2+0x4f6>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	dc39      	bgt.n	8005aa6 <__kernel_rem_pio2+0x556>
 8005a32:	d05d      	beq.n	8005af0 <__kernel_rem_pio2+0x5a0>
 8005a34:	9b02      	ldr	r3, [sp, #8]
 8005a36:	f003 0007 	and.w	r0, r3, #7
 8005a3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005a3e:	ecbd 8b02 	vpop	{d8}
 8005a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d1f3      	bne.n	8005a34 <__kernel_rem_pio2+0x4e4>
 8005a4c:	9b05      	ldr	r3, [sp, #20]
 8005a4e:	9500      	str	r5, [sp, #0]
 8005a50:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005a54:	eb0d 0403 	add.w	r4, sp, r3
 8005a58:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8005a5c:	46a2      	mov	sl, r4
 8005a5e:	9b00      	ldr	r3, [sp, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f1aa 0a08 	sub.w	sl, sl, #8
 8005a66:	dc69      	bgt.n	8005b3c <__kernel_rem_pio2+0x5ec>
 8005a68:	46aa      	mov	sl, r5
 8005a6a:	f1ba 0f01 	cmp.w	sl, #1
 8005a6e:	f1a4 0408 	sub.w	r4, r4, #8
 8005a72:	f300 8083 	bgt.w	8005b7c <__kernel_rem_pio2+0x62c>
 8005a76:	9c05      	ldr	r4, [sp, #20]
 8005a78:	ab48      	add	r3, sp, #288	; 0x120
 8005a7a:	441c      	add	r4, r3
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	2100      	movs	r1, #0
 8005a80:	2d01      	cmp	r5, #1
 8005a82:	f300 809a 	bgt.w	8005bba <__kernel_rem_pio2+0x66a>
 8005a86:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8005a8a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005a8e:	f1bb 0f00 	cmp.w	fp, #0
 8005a92:	f040 8098 	bne.w	8005bc6 <__kernel_rem_pio2+0x676>
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	e9c3 7800 	strd	r7, r8, [r3]
 8005a9c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005aa0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005aa4:	e7c6      	b.n	8005a34 <__kernel_rem_pio2+0x4e4>
 8005aa6:	9e05      	ldr	r6, [sp, #20]
 8005aa8:	ab48      	add	r3, sp, #288	; 0x120
 8005aaa:	441e      	add	r6, r3
 8005aac:	462c      	mov	r4, r5
 8005aae:	2000      	movs	r0, #0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	2c00      	cmp	r4, #0
 8005ab4:	da33      	bge.n	8005b1e <__kernel_rem_pio2+0x5ce>
 8005ab6:	f1bb 0f00 	cmp.w	fp, #0
 8005aba:	d036      	beq.n	8005b2a <__kernel_rem_pio2+0x5da>
 8005abc:	4602      	mov	r2, r0
 8005abe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ac2:	9c04      	ldr	r4, [sp, #16]
 8005ac4:	e9c4 2300 	strd	r2, r3, [r4]
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005ad0:	f7fa fbda 	bl	8000288 <__aeabi_dsub>
 8005ad4:	ae4a      	add	r6, sp, #296	; 0x128
 8005ad6:	2401      	movs	r4, #1
 8005ad8:	42a5      	cmp	r5, r4
 8005ada:	da29      	bge.n	8005b30 <__kernel_rem_pio2+0x5e0>
 8005adc:	f1bb 0f00 	cmp.w	fp, #0
 8005ae0:	d002      	beq.n	8005ae8 <__kernel_rem_pio2+0x598>
 8005ae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005aee:	e7a1      	b.n	8005a34 <__kernel_rem_pio2+0x4e4>
 8005af0:	9c05      	ldr	r4, [sp, #20]
 8005af2:	ab48      	add	r3, sp, #288	; 0x120
 8005af4:	441c      	add	r4, r3
 8005af6:	2000      	movs	r0, #0
 8005af8:	2100      	movs	r1, #0
 8005afa:	2d00      	cmp	r5, #0
 8005afc:	da09      	bge.n	8005b12 <__kernel_rem_pio2+0x5c2>
 8005afe:	f1bb 0f00 	cmp.w	fp, #0
 8005b02:	d002      	beq.n	8005b0a <__kernel_rem_pio2+0x5ba>
 8005b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b08:	4619      	mov	r1, r3
 8005b0a:	9b04      	ldr	r3, [sp, #16]
 8005b0c:	e9c3 0100 	strd	r0, r1, [r3]
 8005b10:	e790      	b.n	8005a34 <__kernel_rem_pio2+0x4e4>
 8005b12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005b16:	f7fa fbb9 	bl	800028c <__adddf3>
 8005b1a:	3d01      	subs	r5, #1
 8005b1c:	e7ed      	b.n	8005afa <__kernel_rem_pio2+0x5aa>
 8005b1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005b22:	f7fa fbb3 	bl	800028c <__adddf3>
 8005b26:	3c01      	subs	r4, #1
 8005b28:	e7c3      	b.n	8005ab2 <__kernel_rem_pio2+0x562>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	e7c8      	b.n	8005ac2 <__kernel_rem_pio2+0x572>
 8005b30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005b34:	f7fa fbaa 	bl	800028c <__adddf3>
 8005b38:	3401      	adds	r4, #1
 8005b3a:	e7cd      	b.n	8005ad8 <__kernel_rem_pio2+0x588>
 8005b3c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b40:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005b44:	9b00      	ldr	r3, [sp, #0]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	4640      	mov	r0, r8
 8005b50:	4649      	mov	r1, r9
 8005b52:	f7fa fb9b 	bl	800028c <__adddf3>
 8005b56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f7fa fb91 	bl	8000288 <__aeabi_dsub>
 8005b66:	4632      	mov	r2, r6
 8005b68:	463b      	mov	r3, r7
 8005b6a:	f7fa fb8f 	bl	800028c <__adddf3>
 8005b6e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005b72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b76:	ed8a 7b00 	vstr	d7, [sl]
 8005b7a:	e770      	b.n	8005a5e <__kernel_rem_pio2+0x50e>
 8005b7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005b80:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005b84:	4640      	mov	r0, r8
 8005b86:	4632      	mov	r2, r6
 8005b88:	463b      	mov	r3, r7
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	f7fa fb7e 	bl	800028c <__adddf3>
 8005b90:	e9cd 0100 	strd	r0, r1, [sp]
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	f7fa fb74 	bl	8000288 <__aeabi_dsub>
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	f7fa fb72 	bl	800028c <__adddf3>
 8005ba8:	ed9d 7b00 	vldr	d7, [sp]
 8005bac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bb0:	ed84 7b00 	vstr	d7, [r4]
 8005bb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bb8:	e757      	b.n	8005a6a <__kernel_rem_pio2+0x51a>
 8005bba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005bbe:	f7fa fb65 	bl	800028c <__adddf3>
 8005bc2:	3d01      	subs	r5, #1
 8005bc4:	e75c      	b.n	8005a80 <__kernel_rem_pio2+0x530>
 8005bc6:	9b04      	ldr	r3, [sp, #16]
 8005bc8:	9a04      	ldr	r2, [sp, #16]
 8005bca:	601f      	str	r7, [r3, #0]
 8005bcc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005bd0:	605c      	str	r4, [r3, #4]
 8005bd2:	609d      	str	r5, [r3, #8]
 8005bd4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005bd8:	60d3      	str	r3, [r2, #12]
 8005bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bde:	6110      	str	r0, [r2, #16]
 8005be0:	6153      	str	r3, [r2, #20]
 8005be2:	e727      	b.n	8005a34 <__kernel_rem_pio2+0x4e4>
 8005be4:	41700000 	.word	0x41700000
 8005be8:	3e700000 	.word	0x3e700000
 8005bec:	00000000 	.word	0x00000000

08005bf0 <scalbn>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	ec55 4b10 	vmov	r4, r5, d0
 8005bf6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	b999      	cbnz	r1, 8005c28 <scalbn+0x38>
 8005c00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005c04:	4323      	orrs	r3, r4
 8005c06:	d03f      	beq.n	8005c88 <scalbn+0x98>
 8005c08:	4b35      	ldr	r3, [pc, #212]	; (8005ce0 <scalbn+0xf0>)
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	ee10 0a10 	vmov	r0, s0
 8005c10:	2200      	movs	r2, #0
 8005c12:	f7fa fcf1 	bl	80005f8 <__aeabi_dmul>
 8005c16:	4b33      	ldr	r3, [pc, #204]	; (8005ce4 <scalbn+0xf4>)
 8005c18:	429e      	cmp	r6, r3
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	460d      	mov	r5, r1
 8005c1e:	da10      	bge.n	8005c42 <scalbn+0x52>
 8005c20:	a327      	add	r3, pc, #156	; (adr r3, 8005cc0 <scalbn+0xd0>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	e01f      	b.n	8005c68 <scalbn+0x78>
 8005c28:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005c2c:	4291      	cmp	r1, r2
 8005c2e:	d10c      	bne.n	8005c4a <scalbn+0x5a>
 8005c30:	ee10 2a10 	vmov	r2, s0
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	f7fa fb28 	bl	800028c <__adddf3>
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	460d      	mov	r5, r1
 8005c40:	e022      	b.n	8005c88 <scalbn+0x98>
 8005c42:	460b      	mov	r3, r1
 8005c44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005c48:	3936      	subs	r1, #54	; 0x36
 8005c4a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005c4e:	4296      	cmp	r6, r2
 8005c50:	dd0d      	ble.n	8005c6e <scalbn+0x7e>
 8005c52:	2d00      	cmp	r5, #0
 8005c54:	a11c      	add	r1, pc, #112	; (adr r1, 8005cc8 <scalbn+0xd8>)
 8005c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c5a:	da02      	bge.n	8005c62 <scalbn+0x72>
 8005c5c:	a11c      	add	r1, pc, #112	; (adr r1, 8005cd0 <scalbn+0xe0>)
 8005c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c62:	a319      	add	r3, pc, #100	; (adr r3, 8005cc8 <scalbn+0xd8>)
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fcc6 	bl	80005f8 <__aeabi_dmul>
 8005c6c:	e7e6      	b.n	8005c3c <scalbn+0x4c>
 8005c6e:	1872      	adds	r2, r6, r1
 8005c70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c74:	428a      	cmp	r2, r1
 8005c76:	dcec      	bgt.n	8005c52 <scalbn+0x62>
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	dd08      	ble.n	8005c8e <scalbn+0x9e>
 8005c7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c88:	ec45 4b10 	vmov	d0, r4, r5
 8005c8c:	bd70      	pop	{r4, r5, r6, pc}
 8005c8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005c92:	da08      	bge.n	8005ca6 <scalbn+0xb6>
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	a10a      	add	r1, pc, #40	; (adr r1, 8005cc0 <scalbn+0xd0>)
 8005c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c9c:	dac0      	bge.n	8005c20 <scalbn+0x30>
 8005c9e:	a10e      	add	r1, pc, #56	; (adr r1, 8005cd8 <scalbn+0xe8>)
 8005ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ca4:	e7bc      	b.n	8005c20 <scalbn+0x30>
 8005ca6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005caa:	3236      	adds	r2, #54	; 0x36
 8005cac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <scalbn+0xf8>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	e7d5      	b.n	8005c68 <scalbn+0x78>
 8005cbc:	f3af 8000 	nop.w
 8005cc0:	c2f8f359 	.word	0xc2f8f359
 8005cc4:	01a56e1f 	.word	0x01a56e1f
 8005cc8:	8800759c 	.word	0x8800759c
 8005ccc:	7e37e43c 	.word	0x7e37e43c
 8005cd0:	8800759c 	.word	0x8800759c
 8005cd4:	fe37e43c 	.word	0xfe37e43c
 8005cd8:	c2f8f359 	.word	0xc2f8f359
 8005cdc:	81a56e1f 	.word	0x81a56e1f
 8005ce0:	43500000 	.word	0x43500000
 8005ce4:	ffff3cb0 	.word	0xffff3cb0
 8005ce8:	3c900000 	.word	0x3c900000
 8005cec:	00000000 	.word	0x00000000

08005cf0 <floor>:
 8005cf0:	ec51 0b10 	vmov	r0, r1, d0
 8005cf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8005d00:	2e13      	cmp	r6, #19
 8005d02:	ee10 5a10 	vmov	r5, s0
 8005d06:	ee10 8a10 	vmov	r8, s0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	dc31      	bgt.n	8005d72 <floor+0x82>
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	da14      	bge.n	8005d3c <floor+0x4c>
 8005d12:	a333      	add	r3, pc, #204	; (adr r3, 8005de0 <floor+0xf0>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fab8 	bl	800028c <__adddf3>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f7fa fefa 	bl	8000b18 <__aeabi_dcmpgt>
 8005d24:	b138      	cbz	r0, 8005d36 <floor+0x46>
 8005d26:	2c00      	cmp	r4, #0
 8005d28:	da53      	bge.n	8005dd2 <floor+0xe2>
 8005d2a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005d2e:	4325      	orrs	r5, r4
 8005d30:	d052      	beq.n	8005dd8 <floor+0xe8>
 8005d32:	4c2d      	ldr	r4, [pc, #180]	; (8005de8 <floor+0xf8>)
 8005d34:	2500      	movs	r5, #0
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	e024      	b.n	8005d86 <floor+0x96>
 8005d3c:	4f2b      	ldr	r7, [pc, #172]	; (8005dec <floor+0xfc>)
 8005d3e:	4137      	asrs	r7, r6
 8005d40:	ea01 0307 	and.w	r3, r1, r7
 8005d44:	4303      	orrs	r3, r0
 8005d46:	d01e      	beq.n	8005d86 <floor+0x96>
 8005d48:	a325      	add	r3, pc, #148	; (adr r3, 8005de0 <floor+0xf0>)
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fa9d 	bl	800028c <__adddf3>
 8005d52:	2200      	movs	r2, #0
 8005d54:	2300      	movs	r3, #0
 8005d56:	f7fa fedf 	bl	8000b18 <__aeabi_dcmpgt>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0eb      	beq.n	8005d36 <floor+0x46>
 8005d5e:	2c00      	cmp	r4, #0
 8005d60:	bfbe      	ittt	lt
 8005d62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005d66:	4133      	asrlt	r3, r6
 8005d68:	18e4      	addlt	r4, r4, r3
 8005d6a:	ea24 0407 	bic.w	r4, r4, r7
 8005d6e:	2500      	movs	r5, #0
 8005d70:	e7e1      	b.n	8005d36 <floor+0x46>
 8005d72:	2e33      	cmp	r6, #51	; 0x33
 8005d74:	dd0b      	ble.n	8005d8e <floor+0x9e>
 8005d76:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005d7a:	d104      	bne.n	8005d86 <floor+0x96>
 8005d7c:	ee10 2a10 	vmov	r2, s0
 8005d80:	460b      	mov	r3, r1
 8005d82:	f7fa fa83 	bl	800028c <__adddf3>
 8005d86:	ec41 0b10 	vmov	d0, r0, r1
 8005d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d8e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8005d92:	f04f 37ff 	mov.w	r7, #4294967295
 8005d96:	40df      	lsrs	r7, r3
 8005d98:	4238      	tst	r0, r7
 8005d9a:	d0f4      	beq.n	8005d86 <floor+0x96>
 8005d9c:	a310      	add	r3, pc, #64	; (adr r3, 8005de0 <floor+0xf0>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	f7fa fa73 	bl	800028c <__adddf3>
 8005da6:	2200      	movs	r2, #0
 8005da8:	2300      	movs	r3, #0
 8005daa:	f7fa feb5 	bl	8000b18 <__aeabi_dcmpgt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d0c1      	beq.n	8005d36 <floor+0x46>
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	da0a      	bge.n	8005dcc <floor+0xdc>
 8005db6:	2e14      	cmp	r6, #20
 8005db8:	d101      	bne.n	8005dbe <floor+0xce>
 8005dba:	3401      	adds	r4, #1
 8005dbc:	e006      	b.n	8005dcc <floor+0xdc>
 8005dbe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	40b3      	lsls	r3, r6
 8005dc6:	441d      	add	r5, r3
 8005dc8:	45a8      	cmp	r8, r5
 8005dca:	d8f6      	bhi.n	8005dba <floor+0xca>
 8005dcc:	ea25 0507 	bic.w	r5, r5, r7
 8005dd0:	e7b1      	b.n	8005d36 <floor+0x46>
 8005dd2:	2500      	movs	r5, #0
 8005dd4:	462c      	mov	r4, r5
 8005dd6:	e7ae      	b.n	8005d36 <floor+0x46>
 8005dd8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005ddc:	e7ab      	b.n	8005d36 <floor+0x46>
 8005dde:	bf00      	nop
 8005de0:	8800759c 	.word	0x8800759c
 8005de4:	7e37e43c 	.word	0x7e37e43c
 8005de8:	bff00000 	.word	0xbff00000
 8005dec:	000fffff 	.word	0x000fffff

08005df0 <_init>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	bf00      	nop
 8005df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df6:	bc08      	pop	{r3}
 8005df8:	469e      	mov	lr, r3
 8005dfa:	4770      	bx	lr

08005dfc <_fini>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr
